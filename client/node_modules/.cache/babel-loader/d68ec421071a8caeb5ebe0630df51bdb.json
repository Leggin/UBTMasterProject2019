{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTaskComponent.js\";\nimport React from \"react\";\nimport './CreateTaskComponent.css';\nimport { Dropdown, Input } from 'semantic-ui-react';\nimport * as c from './Constants.js';\n\nvar CreateTaskComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateTaskComponent, _React$Component);\n\n  function CreateTaskComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CreateTaskComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateTaskComponent).call(this, props));\n\n    _this.handleCreateTask = function () {\n      if (_this.state.activity === '' || _this.state.address === '' || _this.state.taskType === '') {\n        console.error(\"Some required Fields are Empty! Cannot create Task!\");\n      }\n\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.createTask.cacheSend(_this.state.activity, _this.state.address, _this.state.taskType, _this.state.requirements, {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n\n      _this.resetForm();\n    };\n\n    _this.state = {\n      stackId: null,\n      activity: '',\n      address: '',\n      taskType: '',\n      requirements: [],\n      dataKey: null,\n      tasks: null,\n      reqoptions: []\n    };\n    _this.taskTypes = c.TASKTYPES;\n    _this.handleRequirements = _this.handleRequirements.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCreateTask = _this.handleCreateTask.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.formRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(CreateTaskComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      var dataKey = contract.methods.getTasks.cacheCall();\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(tasksObject) {\n      var optionlist = [];\n\n      if (tasksObject) {\n        for (var i = 0; i < tasksObject.value.length; i++) {\n          var option = {\n            key: Number(tasksObject.value[i]),\n            text: tasksObject.value[i],\n            value: Number(tasksObject.value[i])\n          };\n          optionlist.push(option);\n        }\n      }\n\n      return optionlist;\n    }\n  }, {\n    key: \"handleRequirements\",\n    value: function handleRequirements(event, data) {\n      this.setState({\n        requirements: data.value\n      });\n    }\n  }, {\n    key: \"resetForm\",\n    value: function resetForm() {\n      this.setState({\n        activity: '',\n        address: '',\n        taskType: '',\n        requirements: []\n      });\n    }\n  }, {\n    key: \"getAccountsDropdownObject\",\n    value: function getAccountsDropdownObject() {\n      var accountOject = [];\n      var drizzleAccounts = this.props.drizzleState.accounts;\n\n      for (var acc in drizzleAccounts) {\n        accountOject.push({\n          key: drizzleAccounts[acc],\n          text: acc + \":\\t\" + drizzleAccounts[acc],\n          value: drizzleAccounts[acc]\n        });\n      }\n\n      return accountOject;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newOptions = this.updateOptions(tasksObject);\n      var accountOptions = this.getAccountsDropdownObject();\n      return React.createElement(\"form\", {\n        className: \"add-task-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Input, {\n        fluid: true,\n        icon: \"clipboard outline\",\n        placeholder: \"Activity\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            activity: data.value\n          });\n        },\n        value: this.state.activity,\n        ref: this.formRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        icon: \"\",\n        placeholder: \"Responsible Account\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            address: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: accountOptions,\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"TaskType\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            taskType: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.taskTypes,\n        value: this.state.taskType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Requirements\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            requirements: data.value\n          });\n        },\n        fluid: true,\n        multiple: true,\n        selection: true,\n        options: newOptions,\n        value: this.state.requirements,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Create Task\"));\n    }\n  }]);\n\n  return CreateTaskComponent;\n}(React.Component);\n\nexport default CreateTaskComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTaskComponent.js"],"names":["React","Dropdown","Input","c","CreateTaskComponent","props","handleCreateTask","state","activity","address","taskType","console","error","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","stackId","methods","createTask","cacheSend","requirements","from","accounts","gas","setState","resetForm","dataKey","tasks","reqoptions","taskTypes","TASKTYPES","handleRequirements","bind","formRef","createRef","getTasks","cacheCall","tasksObject","optionlist","i","value","length","option","key","Number","text","push","event","data","accountOject","drizzleAccounts","acc","newOptions","updateOptions","accountOptions","getAccountsDropdownObject","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './CreateTaskComponent.css';\nimport { Dropdown, Input } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nclass CreateTaskComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            activity: '',\n            address: '',\n            taskType: '',\n            requirements: [],\n            dataKey: null,\n            tasks: null,\n            reqoptions: []\n        }\n        this.taskTypes = c.TASKTYPES;\n\n        this.handleRequirements = this.handleRequirements.bind(this);\n        this.handleCreateTask = this.handleCreateTask.bind(this);\n        this.formRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        const dataKey = contract.methods.getTasks.cacheCall();\n        this.setState({ dataKey });\n    }\n\n    updateOptions(tasksObject) {\n        const optionlist = []\n        if (tasksObject) {\n            for (var i = 0; i < tasksObject.value.length; i++) {\n                let option = { key: Number(tasksObject.value[i]), text: tasksObject.value[i], value: Number(tasksObject.value[i]) }\n                optionlist.push(option)\n            }\n        }\n\n        return optionlist;\n    }\n    handleRequirements(event, data) {\n        this.setState({ requirements: data.value });\n    }\n\n    handleCreateTask = () => {\n        if (this.state.activity === '' || this.state.address === '' || this.state.taskType === '') {\n            console.error(\"Some required Fields are Empty! Cannot create Task!\");\n\n        }\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to call the `set` method with `value`\n        const stackId = contract.methods.createTask.cacheSend(this.state.activity,\n            this.state.address, this.state.taskType, this.state.requirements, {\n                from: drizzleState.accounts[0],\n                gas: 600000\n            });\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n        this.resetForm();\n    }\n\n    resetForm() {\n        this.setState({\n            activity: '',\n            address: '',\n            taskType: '',\n            requirements: []\n        });\n    }\n\n    getAccountsDropdownObject() {\n        let accountOject = [];\n        let drizzleAccounts = this.props.drizzleState.accounts;\n        for (let acc in drizzleAccounts) {\n            accountOject.push({ key: drizzleAccounts[acc], text: acc + \":\\t\" + drizzleAccounts[acc], value: drizzleAccounts[acc] })\n        }\n        return accountOject;\n    }\n\n    render() {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newOptions = this.updateOptions(tasksObject);\n        const accountOptions = this.getAccountsDropdownObject();\n        return (\n            <form className=\"add-task-form\" >\n                <label className=\"add-task-label\">\n                    <Input fluid icon='clipboard outline' placeholder='Activity' onChange={\n                        (event, data) => {\n                            this.setState({ activity: data.value });\n                        }} value={this.state.activity} ref={this.formRef} />\n                </label>\n                <label className=\"add-task-label\">\n                    <Dropdown icon=\"\" placeholder='Responsible Account' onChange={\n                        (event, data) => {\n                            this.setState({ address: data.value });\n                        }\n                    } fluid selection options={accountOptions} value={this.state.address} />\n                </label>\n                <label className=\"add-task-label\">\n\n                    <Dropdown placeholder='TaskType' onChange={\n                        (event, data) => {\n                            this.setState({ taskType: data.value });\n                        }} fluid selection options={this.taskTypes} value={this.state.taskType} />\n                </label>\n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label>\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Create Task\n                 </button>\n            </form >\n        );\n    }\n}\n\nexport default CreateTaskComponent;\n"]},"metadata":{},"sourceType":"module"}