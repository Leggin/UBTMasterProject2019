{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\"\n    };\n    _this.decisionTypes = c.DECISIONTYPES;\n    _this.operator = c.OPERATORS;\n    _this.gatewayTypes = c.GATEWAYTPYES;\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var getPayloadsDataKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var getIntPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getStringPayloadCountKey = contract.methods.getGlobalStringPayloadCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      console.log(\"taskcount\", taskCount);\n      taskCount = taskCount ? Number(ccmState.getTaskCount[getTaskCountKey].value) : 100;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        getPayloadsDataKey: getPayloadsDataKey,\n        getIntPayloadCountKey: getIntPayloadCountKey,\n        getStringPayloadCountKey: getStringPayloadCountKey\n      });\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"getIntPayloadDropdownOptions\",\n    value: function getIntPayloadDropdownOptions() {\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var count = ccmState.getGlobalIntegerPayloadCount[this.state.getIntPayloadCountKey];\n      var payloads = [];\n    }\n  }, {\n    key: \"getStringPayloadDropdownOptions\",\n    value: function getStringPayloadDropdownOptions() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      var intPayloadOptions = this.getIntPayloadDropdownOptions();\n      var stringPayloadOptions = this.getStringPayloadDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            selectedPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: stringPayloadOptions,\n        value: this.state.selectedPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Add Decision\"));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","decisionTypes","DECISIONTYPES","operator","OPERATORS","gatewayTypes","GATEWAYTPYES","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","getGlobalStringPayloadCount","ccmState","drizzleState","taskCount","console","log","Number","value","i","push","getTaskById","setState","tasks","getAllTasks","options","forEach","task","key","id","text","description","count","payloads","taskOptions","getTaskDropdownOptions","intPayloadOptions","getIntPayloadDropdownOptions","stringPayloadOptions","getStringPayloadDropdownOptions","event","data","selectedPayload","handleCreateTask","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,gBAAnB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAGMC,oB;;;;;AACF,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,IADL;AAETC,MAAAA,eAAe,EAAE,EAFR;AAGTC,MAAAA,mBAAmB,EAAE,EAHZ;AAITC,MAAAA,kBAAkB,EAAE,EAJX;AAKTC,MAAAA,qBAAqB,EAAE,EALd;AAMTC,MAAAA,wBAAwB,EAAE;AANjB,KAAb;AAQA,UAAKC,aAAL,GAAqBZ,CAAC,CAACa,aAAvB;AACA,UAAKC,QAAL,GAAgBd,CAAC,CAACe,SAAlB;AACA,UAAKC,YAAL,GAAoBhB,CAAC,CAACiB,YAAtB;AAZe;AAalB;;;;wCAEmB;AAGhB,UAAMC,QAAQ,GAAG,KAAKd,KAAL,CAAWe,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AACA,UAAMd,eAAe,GAAGW,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAxB;AAEA,UAAMf,kBAAkB,GAAGS,QAAQ,CAACI,OAAT,CAAiBG,4BAAjB,CAA8CD,SAA9C,EAA3B;AAEA,UAAME,eAAe,GAAGR,QAAQ,CAACI,OAAT,CAAiBK,YAAjB,CAA8BH,SAA9B,EAAxB;AACA,UAAMd,qBAAqB,GAAGQ,QAAQ,CAACI,OAAT,CAAiBG,4BAAjB,CAA8CD,SAA9C,EAA9B;AACA,UAAMb,wBAAwB,GAAGO,QAAQ,CAACI,OAAT,CAAiBM,2BAAjB,CAA6CJ,SAA7C,EAAjC;AAEA,UAAMK,QAAQ,GAAG,KAAKzB,KAAL,CAAW0B,YAAX,CAAwBV,SAAxB,CAAkCC,4BAAnD;AAEA,UAAIU,SAAS,GAAGF,QAAQ,CAACF,YAAT,CAAsBD,eAAtB,CAAhB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,SAAzB;AAEAA,MAAAA,SAAS,GAAIA,SAAD,GAAcG,MAAM,CAACL,QAAQ,CAACF,YAAT,CAAsBD,eAAtB,EAAuCS,KAAxC,CAApB,GAAqE,GAAjF;AACA,UAAM3B,mBAAmB,GAAG,EAA5B;;AAEA,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,SAArB,EAAgCK,CAAC,EAAjC,EAAqC;AACjC5B,QAAAA,mBAAmB,CAAC6B,IAApB,CAAyBnB,QAAQ,CAACI,OAAT,CAAiBgB,WAAjB,CAA6Bd,SAA7B,CAAuCY,CAAvC,CAAzB;AACH;;AAED,WAAKG,QAAL,CAAc;AAAEhC,QAAAA,eAAe,EAAfA,eAAF;AAAmBC,QAAAA,mBAAmB,EAAnBA,mBAAnB;AAAwCC,QAAAA,kBAAkB,EAAlBA,kBAAxC;AAA4DC,QAAAA,qBAAqB,EAArBA,qBAA5D;AAAmFC,QAAAA,wBAAwB,EAAxBA;AAAnF,OAAd;AACH;;;6CAEwB;AACrB,UAAI6B,KAAK,GAAGtC,KAAK,CAACuC,WAAN,CAAkB,KAAKrC,KAAL,CAAW0B,YAA7B,EAA2C,KAAKzB,KAAL,CAAWG,mBAAtD,EAA2E,KAAKH,KAAL,CAAWE,eAAtF,CAAZ;AACA,UAAImC,OAAO,GAAG,EAAd;AAEAF,MAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClBF,QAAAA,OAAO,CAACL,IAAR,CAAa;AAAEQ,UAAAA,GAAG,EAAED,IAAI,CAACE,EAAZ;AAAgBX,UAAAA,KAAK,EAAES,IAAI,CAACE,EAA5B;AAAgCC,UAAAA,IAAI,gBAASH,IAAI,CAACE,EAAd,6BAAmCF,IAAI,CAACI,WAAxC;AAApC,SAAb;AACH,OAFD;AAGA,aAAON,OAAP;AACH;;;mDAE8B;AAC3B,UAAMb,QAAQ,GAAG,KAAKzB,KAAL,CAAW0B,YAAX,CAAwBV,SAAxB,CAAkCC,4BAAnD;AACA,UAAM4B,KAAK,GAAGpB,QAAQ,CAACJ,4BAAT,CAAsC,KAAKpB,KAAL,CAAWK,qBAAjD,CAAd;AACA,UAAMwC,QAAQ,GAAG,EAAjB;AAGH;;;sDACiC,CACjC;;;6BAEQ;AAAA;;AACL,UAAIC,WAAW,GAAG,KAAKC,sBAAL,EAAlB;AACA,UAAIC,iBAAiB,GAAG,KAAKC,4BAAL,EAAxB;AACA,UAAIC,oBAAoB,GAAG,KAAKC,+BAAL,EAA3B;AAEA,aACI;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,aAAtB;AAAoC,QAAA,QAAQ,EACxC,kBAACC,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACnB,QAAL,CAAc;AAAEjC,YAAAA,YAAY,EAAEoD,IAAI,CAACvB;AAArB,WAAd;AACH,SAHL;AAIE,QAAA,KAAK,MAJP;AAIQ,QAAA,SAAS,MAJjB;AAIkB,QAAA,OAAO,EAAEgB,WAJ3B;AAIwC,QAAA,KAAK,EAAE,KAAK9C,KAAL,CAAWC,YAJ1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EASI;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,uBAAtB;AAA8C,QAAA,QAAQ,EAClD,kBAACmD,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACnB,QAAL,CAAc;AAAEoB,YAAAA,eAAe,EAAED,IAAI,CAACvB;AAAxB,WAAd;AACH,SAHL;AAGO,QAAA,KAAK,MAHZ;AAGa,QAAA,SAAS,MAHtB;AAGuB,QAAA,OAAO,EAAEoB,oBAHhC;AAGsD,QAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWsD,eAHxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,EAwBI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxBJ,CADJ;AA8BH;;;;EAlG8B7D,KAAK,CAAC8D,S;;AAuGzC,eAAe1D,oBAAf","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\"\n        }\n        this.decisionTypes = c.DECISIONTYPES;\n        this.operator = c.OPERATORS;\n        this.gatewayTypes = c.GATEWAYTPYES\n    }\n\n    componentDidMount() {\n\n\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n\n        const getPayloadsDataKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const getIntPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n        const getStringPayloadCountKey = contract.methods.getGlobalStringPayloadCount.cacheCall();\n\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        console.log(\"taskcount\", taskCount);\n\n        taskCount = (taskCount) ? Number(ccmState.getTaskCount[getTaskCountKey].value) : 100;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys, getPayloadsDataKey, getIntPayloadCountKey, getStringPayloadCountKey });\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n    getIntPayloadDropdownOptions() {\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        const count = ccmState.getGlobalIntegerPayloadCount[this.state.getIntPayloadCountKey];\n        const payloads = [];\n\n\n    }\n    getStringPayloadDropdownOptions() {\n    }\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n        let intPayloadOptions = this.getIntPayloadDropdownOptions();\n        let stringPayloadOptions = this.getStringPayloadDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedPayload: data.value });\n                        }} fluid selection options={stringPayloadOptions} value={this.state.selectedPayload} />\n                </label>\n                {/* \n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label> */}\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}