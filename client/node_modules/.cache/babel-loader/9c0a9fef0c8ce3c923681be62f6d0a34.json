{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKeyGetTasks: null,\n      dataKey: null,\n      tasksStatus: [],\n      testkey: null,\n      dataKeysTaskData: []\n    };\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      var cells = [];\n\n      if (tasksObject) {\n        var tasks = tasksObject.value;\n\n        for (var index = 0; index < tasks.length; index++) {\n          cells.push(React.createElement(Table.Row, {\n            key: tasks[i],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, tasks[i])));\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      var dataKey = contract.methods.getTasks.cacheCall();\n      var taskIds = ContractCollaborationManager.getTasks[this.state.dataKey].value;\n      dataKeysTaskData = [];\n      taskIds.forEach(function (taskId) {\n        dataKeysTaskData.push(contract.methods.getTaskById.cacheCall(taskId));\n      });\n      this.setState({\n        dataKeysTaskData: dataKeysTaskData\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getTasks.cacheCall();\n      var getTaskByIdDataKey = contract.methods.getTaskById.cacheCall(0); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey,\n        getTaskByIdDataKey: getTaskByIdDataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","TaskTableComponent","props","state","stackId","dataKeyGetTasks","dataKey","tasksStatus","testkey","dataKeysTaskData","tasksObject","ContractCollaborationManager","drizzleState","contracts","drizzle","contract","cells","tasks","value","index","length","push","i","prevProps","methods","getTasks","cacheCall","taskIds","forEach","taskId","getTaskById","setState","getTaskByIdDataKey","newCells","createTableContent","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKeyGetTasks: null,\n            dataKey: null,\n            tasksStatus: [],\n            testkey: null,\n            dataKeysTaskData: []\n        }\n    }\n    createTableContent(tasksObject) {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        const cells = []\n        if (tasksObject) {\n            const tasks = tasksObject.value;\n\n            for (let index = 0; index < tasks.length; index++) {\n                cells.push(<Table.Row key={tasks[i]}><Table.Cell>{tasks[i]}</Table.Cell></Table.Row>);\n            }\n        }\n        return (cells);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        const dataKey = contract.methods.getTasks.cacheCall();\n        const taskIds = ContractCollaborationManager.getTasks[this.state.dataKey].value;\n\n        dataKeysTaskData = [];\n        taskIds.forEach(taskId => {\n            dataKeysTaskData.push(contract.methods.getTaskById.cacheCall(taskId))\n        });\n\n\n        this.setState({\n            dataKeysTaskData: dataKeysTaskData\n        });\n    }\n\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getTasks.cacheCall();\n        const getTaskByIdDataKey = contract.methods.getTaskById.cacheCall(0);\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey, getTaskByIdDataKey });\n    }\n\n    render() {\n\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newCells = this.createTableContent(tasksObject);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}