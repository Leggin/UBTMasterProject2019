{"ast":null,"code":"import _regeneratorRuntime from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table, Icon, Popup } from 'semantic-ui-react';\nimport * as c from './Constants.js';\nimport Tasks from \"./Tasks\";\nimport \"./TaskTableComponent.css\";\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: [],\n      taskOptions: [],\n      intPayloads: [],\n      stringPayloads: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (Number(taskType.value) === Number(id)) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"getDecisionEnumById\",\n    value: function getDecisionEnumById(id) {\n      return c.DECISIONTYPES_INT[id];\n    }\n  }, {\n    key: \"getGatewayEnumById\",\n    value: function getGatewayEnumById(id) {\n      return c.GATEWAYTYPES_INT[id];\n    }\n  }, {\n    key: \"getOperatorEnumById\",\n    value: function getOperatorEnumById(id) {\n      return c.OPERATORTYPES_INT[id];\n    }\n  }, {\n    key: \"formatTaskIds\",\n    value: function formatTaskIds(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return React.createElement(Icon, {\n          name: \"checkmark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Icon, {\n        name: \"attention\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getDecisionOptions\",\n    value: function getDecisionOptions(taskData) {\n      console.log(this.state.intPayloads[Number(taskData.operands.global)]);\n      console.log(this.state.stringPayloads[Number(taskData.operands.global)]);\n      return React.createElement(Popup, {\n        key: taskData.id,\n        trigger: React.createElement(Table.Row, {\n          negative: !taskData.status,\n          positive: taskData.status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, taskData.id), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, taskData.description), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, this.getTaskEnumById(taskData.tasktype)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, taskData.resource), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, this.formatTaskIds(taskData.requirements)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, this.formatTaskStatus(taskData.status)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"true\")),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Decision Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Competitors\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Decision Completed\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Gateway Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Global Payload ID\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Operator\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Local Value\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.getDecisionEnumById(taskData.decisionType)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, taskData.competitors.length > 0 ? this.formatTaskIds(taskData.competitors) : \"---\"), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, taskData.decisionCompleted ? \"true\" : \"false\"), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.getGatewayEnumById(taskData.gatewayType)), Number(taskData.decisionType) === 0 && React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.stringPayloads[Number(taskData.operands.global)]), Number(taskData.decisionType) === 1 && React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.state.intPayloads[Number(taskData.operands.global)]), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.getOperatorEnumById(taskData.operator)), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, taskData.operands.local)))));\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(taskData) {\n      console.log(\"this is taskdata\", taskData);\n\n      if (taskData.decisionType) {\n        return this.getDecisionOptions(taskData);\n      } else {\n        return React.createElement(Table.Row, {\n          key: taskData.id,\n          negative: !taskData.status,\n          positive: taskData.status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, taskData.id), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, taskData.description), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, this.getTaskEnumById(taskData.tasktype)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, taskData.resource), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, this.formatTaskIds(taskData.requirements)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, this.formatTaskStatus(taskData.status)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"false\"));\n      }\n    }\n  }, {\n    key: \"taskDataCallback\",\n    value: function taskDataCallback(index, taskData) {\n      var options = this.state.taskOptions;\n      options.push(this.getOptions(taskData));\n      this.setState({\n        taskOptions: options\n      });\n    }\n  }, {\n    key: \"createTableContentPromise\",\n    value: function () {\n      var _createTableContentPromise = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var contract;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.setGlobalPayloadValues();\n\n              case 2:\n                contract = this.props.drizzle.contracts.ContractCollaborationManager;\n                Tasks.getAllTasksWithDecisionPromise(contract, this.taskDataCallback.bind(this));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createTableContentPromise() {\n        return _createTableContentPromise.apply(this, arguments);\n      }\n\n      return createTableContentPromise;\n    }()\n  }, {\n    key: \"setGlobalPayloadValues\",\n    value: function () {\n      var _setGlobalPayloadValues = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var contract, intPayloads, stringPayloads, intPayloadCount, stringPayloadCount, i, _i;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                contract = this.props.drizzle.contracts.ContractCollaborationManager;\n                intPayloads = [];\n                stringPayloads = [];\n                _context2.next = 5;\n                return contract.methods.getGlobalIntegerPayloadCount().call();\n\n              case 5:\n                intPayloadCount = _context2.sent;\n                _context2.next = 8;\n                return contract.methods.getGlobalStringPayloadCount().call();\n\n              case 8:\n                stringPayloadCount = _context2.sent;\n                i = 0;\n\n              case 10:\n                if (!(i < intPayloadCount)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                _context2.t0 = intPayloads;\n                _context2.next = 14;\n                return contract.methods.getGlobalIntPayloadValueById(i).call();\n\n              case 14:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              case 16:\n                i++;\n                _context2.next = 10;\n                break;\n\n              case 19:\n                _i = 0;\n\n              case 20:\n                if (!(_i < stringPayloadCount)) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                _context2.t2 = stringPayloads;\n                _context2.next = 24;\n                return contract.methods.getGlobalStringPayloadValueById(_i).call();\n\n              case 24:\n                _context2.t3 = _context2.sent;\n\n                _context2.t2.push.call(_context2.t2, _context2.t3);\n\n              case 26:\n                _i++;\n                _context2.next = 20;\n                break;\n\n              case 29:\n                console.log(intPayloads, stringPayloads);\n                this.setState({\n                  intPayloads: intPayloads,\n                  stringPayloads: stringPayloads\n                });\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setGlobalPayloadValues() {\n        return _setGlobalPayloadValues.apply(this, arguments);\n      }\n\n      return setGlobalPayloadValues;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createTableContentPromise();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"task-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Decision Type\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.state.taskOptions)));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","Icon","Popup","c","Tasks","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","taskOptions","intPayloads","stringPayloads","first","id","res","TASKTYPES","forEach","taskType","Number","value","text","DECISIONTYPES_INT","GATEWAYTYPES_INT","OPERATORTYPES_INT","reqs","reqString","req","slice","length","status","taskData","console","log","operands","global","description","getTaskEnumById","tasktype","resource","formatTaskIds","requirements","formatTaskStatus","getDecisionEnumById","decisionType","competitors","decisionCompleted","getGatewayEnumById","gatewayType","getOperatorEnumById","operator","local","getDecisionOptions","index","options","push","getOptions","setState","setGlobalPayloadValues","contract","drizzle","contracts","ContractCollaborationManager","getAllTasksWithDecisionPromise","taskDataCallback","bind","methods","getGlobalIntegerPayloadCount","call","intPayloadCount","getGlobalStringPayloadCount","stringPayloadCount","i","getGlobalIntPayloadValueById","getGlobalStringPayloadValueById","createTableContentPromise","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table, Icon, Popup } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nimport Tasks from \"./Tasks\"\nimport \"./TaskTableComponent.css\"\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: [],\n            taskOptions: [],\n            intPayloads: [],\n            stringPayloads: [],\n        }\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (Number(taskType.value) === Number(id)) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    getDecisionEnumById(id) {\n        return c.DECISIONTYPES_INT[id];\n    }\n\n    getGatewayEnumById(id) {\n        return c.GATEWAYTYPES_INT[id];\n    }\n\n    getOperatorEnumById(id) {\n        return c.OPERATORTYPES_INT[id];\n    }\n\n    formatTaskIds(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return <Icon name='checkmark' />\n        }\n        return <Icon name='attention' />\n    }\n\n    getDecisionOptions(taskData) {\n        console.log(this.state.intPayloads[Number(taskData.operands.global)]);\n\n        console.log(this.state.stringPayloads[Number(taskData.operands.global)]);\n\n        return (\n            <Popup key={taskData.id} trigger={\n                <Table.Row negative={!taskData.status} positive={taskData.status}>\n                    <Table.Cell>{taskData.id}</Table.Cell>\n                    <Table.Cell>{taskData.description}</Table.Cell>\n                    <Table.Cell>{this.getTaskEnumById(taskData.tasktype)}</Table.Cell>\n                    <Table.Cell>{taskData.resource}</Table.Cell>\n                    <Table.Cell>{this.formatTaskIds(taskData.requirements)}</Table.Cell>\n                    <Table.Cell>{this.formatTaskStatus(taskData.status)}</Table.Cell>\n                    <Table.Cell>{\"true\"}</Table.Cell>\n                </Table.Row>\n            }>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row >\n                            <Table.HeaderCell>Decision Type</Table.HeaderCell>\n                            <Table.HeaderCell>Competitors</Table.HeaderCell>\n                            <Table.HeaderCell>Decision Completed</Table.HeaderCell>\n                            <Table.HeaderCell>Gateway Type</Table.HeaderCell>\n                            <Table.HeaderCell>Global Payload ID</Table.HeaderCell>\n                            <Table.HeaderCell>Operator</Table.HeaderCell>\n                            <Table.HeaderCell>Local Value</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        <Table.Row >\n                            <Table.Cell>{this.getDecisionEnumById(taskData.decisionType)}</Table.Cell>\n                            <Table.Cell>{(taskData.competitors.length > 0) ? this.formatTaskIds(taskData.competitors) : \"---\"}</Table.Cell>\n                            <Table.Cell>{(taskData.decisionCompleted) ? \"true\" : \"false\"}</Table.Cell>\n                            <Table.Cell>{this.getGatewayEnumById(taskData.gatewayType)}</Table.Cell>\n                            {(Number(taskData.decisionType) === 0) && <Table.Cell>{this.state.stringPayloads[Number(taskData.operands.global)]}</Table.Cell>}\n                            {(Number(taskData.decisionType) === 1) && <Table.Cell>{this.state.intPayloads[Number(taskData.operands.global)]}</Table.Cell>}\n                            <Table.Cell>{this.getOperatorEnumById(taskData.operator)}</Table.Cell>\n                            <Table.Cell>{taskData.operands.local}</Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n                </Table>\n            </Popup>\n        );\n    }\n\n    getOptions(taskData) {\n        console.log(\"this is taskdata\", taskData);\n\n        if (taskData.decisionType) {\n            return this.getDecisionOptions(taskData);\n        } else {\n            return (\n                <Table.Row key={taskData.id} negative={!taskData.status} positive={taskData.status}>\n                    <Table.Cell>{taskData.id}</Table.Cell>\n                    <Table.Cell>{taskData.description}</Table.Cell>\n                    <Table.Cell>{this.getTaskEnumById(taskData.tasktype)}</Table.Cell>\n                    <Table.Cell>{taskData.resource}</Table.Cell>\n                    <Table.Cell>{this.formatTaskIds(taskData.requirements)}</Table.Cell>\n                    <Table.Cell>{this.formatTaskStatus(taskData.status)}</Table.Cell>\n                    <Table.Cell>{\"false\"}</Table.Cell>\n                </Table.Row>\n            );\n        }\n    }\n\n    taskDataCallback(index, taskData) {\n        let options = this.state.taskOptions;\n        options.push(this.getOptions(taskData));\n        this.setState({ taskOptions: options });\n    }\n\n    async createTableContentPromise() {\n        await this.setGlobalPayloadValues();\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        Tasks.getAllTasksWithDecisionPromise(contract, this.taskDataCallback.bind(this));\n    }\n\n    async setGlobalPayloadValues() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        let intPayloads = [];\n        let stringPayloads = [];\n\n        let intPayloadCount = await contract.methods.getGlobalIntegerPayloadCount().call();\n        let stringPayloadCount = await contract.methods.getGlobalStringPayloadCount().call();\n\n        for (let i = 0; i < intPayloadCount; i++) {\n            intPayloads.push(await contract.methods.getGlobalIntPayloadValueById(i).call());\n        }\n        for (let i = 0; i < stringPayloadCount; i++) {\n            stringPayloads.push(await contract.methods.getGlobalStringPayloadValueById(i).call());\n        }\n        console.log(intPayloads, stringPayloads);\n\n        this.setState({ intPayloads, stringPayloads });\n    }\n\n    componentDidMount() {\n        this.createTableContentPromise();\n    }\n\n    render() {\n        return (\n            <div className=\"task-table\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Task Id</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                            <Table.HeaderCell>Owner</Table.HeaderCell>\n                            <Table.HeaderCell>Requirements</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Decision Type</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n\n                        {this.state.taskOptions}\n\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}