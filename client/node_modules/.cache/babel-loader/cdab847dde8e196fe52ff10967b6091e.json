{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AccountSelectorComponent.js\";\nimport React from \"react\";\nimport { Dropdown } from 'semantic-ui-react';\n\nvar AccountSelectorComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountSelectorComponent, _React$Component);\n\n  function AccountSelectorComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AccountSelectorComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountSelectorComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      collaborator: null\n    };\n\n    _this.getTxStatus = function () {\n      // get the transaction states from the drizzle state\n      var transactionStack = _this.props.drizzleState.transactionStack; //console.log(this.props.drizzleState);\n      // get the transaction hash using our saved `stackId`\n\n      var txHash = transactionStack[_this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return \"Transaction status: \".concat(_this.props.drizzleState);\n    };\n\n    _this.getCollaboratorsDropDown = _this.getCollaboratorsDropDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AccountSelectorComponent, [{\n    key: \"getCollaboratorsDropDown\",\n    value: function getCollaboratorsDropDown(collaborators) {\n      var options = [{\n        key: -1,\n        text: \"None\",\n        value: \"None\"\n      }];\n\n      if (collaborators) {\n        for (var index = 0; index < collaborators.value.length; index++) {\n          options.push({\n            value: collaborators.value[index],\n            text: collaborators.value[index],\n            key: index\n          });\n        }\n      }\n\n      return options;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getCollaborators.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // get the contract state from drizzleState\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager; // using the saved `dataKey`, get the variable we're interested in\n\n      var collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n      var collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Use Wallet:\", ' ', React.createElement(Dropdown, {\n        inline: true,\n        options: collaboratorsOptions,\n        defaultValue: collaboratorsOptions[0].value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AccountSelectorComponent;\n}(React.Component);\n\nexport default AccountSelectorComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AccountSelectorComponent.js"],"names":["React","Dropdown","AccountSelectorComponent","props","state","stackId","collaborator","getTxStatus","transactionStack","drizzleState","txHash","getCollaboratorsDropDown","bind","collaborators","options","key","text","value","index","length","push","drizzle","contract","contracts","ContractCollaborationManager","dataKey","methods","getCollaborators","cacheCall","setState","collaboratorsOptions","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;;IAEMC,wB;;;;;AAMF,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kGAAMA,KAAN;AADe,UALnBC,KAKmB,GALX;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,YAAY,EAAE;AAFV,KAKW;;AAAA,UAKnBC,WALmB,GAKL,YAAM;AAChB;AADgB,UAERC,gBAFQ,GAEa,MAAKL,KAAL,CAAWM,YAFxB,CAERD,gBAFQ,EAGhB;AACA;;AACA,UAAME,MAAM,GAAGF,gBAAgB,CAAC,MAAKJ,KAAL,CAAWC,OAAZ,CAA/B,CALgB,CAOhB;;AACA,UAAI,CAACK,MAAL,EAAa,OAAO,IAAP,CARG,CAUhB;;AACA,2CAA8B,MAAKP,KAAL,CAAWM,YAAzC;AACH,KAjBkB;;AAEf,UAAKE,wBAAL,GAAgC,MAAKA,wBAAL,CAA8BC,IAA9B,uDAAhC;AAFe;AAGlB;;;;6CAgBwBC,a,EAAe;AACpC,UAAIC,OAAO,GAAG,CAAC;AAAEC,QAAAA,GAAG,EAAE,CAAC,CAAR;AAAWC,QAAAA,IAAI,EAAE,MAAjB;AAAyBC,QAAAA,KAAK,EAAE;AAAhC,OAAD,CAAd;;AACA,UAAIJ,aAAJ,EAAmB;AACf,aAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,aAAa,CAACI,KAAd,CAAoBE,MAAhD,EAAwDD,KAAK,EAA7D,EAAiE;AAC7DJ,UAAAA,OAAO,CAACM,IAAR,CAAa;AAAEH,YAAAA,KAAK,EAAEJ,aAAa,CAACI,KAAd,CAAoBC,KAApB,CAAT;AAAqCF,YAAAA,IAAI,EAAEH,aAAa,CAACI,KAAd,CAAoBC,KAApB,CAA3C;AAAuEH,YAAAA,GAAG,EAAEG;AAA5E,WAAb;AACH;AACJ;;AACD,aAAOJ,OAAP;AACH;;;wCAEmB;AAAA,UACRO,OADQ,GACI,KAAKlB,KADT,CACRkB,OADQ;AAEhB,UAAMC,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,4BAAnC,CAFgB,CAIhB;;AACA,UAAMC,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,gBAAjB,CAAkCC,SAAlC,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AACL;AADK,UAEGD,4BAFH,GAEoC,KAAKrB,KAAL,CAAWM,YAAX,CAAwBc,SAF5D,CAEGC,4BAFH,EAIL;;AACA,UAAMX,aAAa,GAAGW,4BAA4B,CAACG,gBAA7B,CAA8C,KAAKvB,KAAL,CAAWqB,OAAzD,CAAtB;AACA,UAAMK,oBAAoB,GAAG,KAAKnB,wBAAL,CAA8BE,aAA9B,CAA7B;AAEA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgB,GADhB,EAEI,oBAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAiB,QAAA,OAAO,EAAEiB,oBAA1B;AAAgD,QAAA,YAAY,EAAEA,oBAAoB,CAAC,CAAD,CAApB,CAAwBb,KAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EA7DkCjB,KAAK,CAAC+B,S;;AAgE7C,eAAe7B,wBAAf","sourcesContent":["import React from \"react\";\nimport { Dropdown } from 'semantic-ui-react'\n\nclass AccountSelectorComponent extends React.Component {\n    state = {\n        stackId: null,\n        collaborator: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.getCollaboratorsDropDown = this.getCollaboratorsDropDown.bind(this);\n    }\n\n    getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactionStack } = this.props.drizzleState;\n        //console.log(this.props.drizzleState);\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[this.state.stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${this.props.drizzleState}`;\n    }\n\n    getCollaboratorsDropDown(collaborators) {\n        let options = [{ key: -1, text: \"None\", value: \"None\" }]\n        if (collaborators) {\n            for (let index = 0; index < collaborators.value.length; index++) {\n                options.push({ value: collaborators.value[index], text: collaborators.value[index], key: index });\n            }\n        }\n        return options;\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getCollaborators.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n        // get the contract state from drizzleState\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n\n        // using the saved `dataKey`, get the variable we're interested in\n        const collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n        const collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n\n        return (\n            <span>\n                Use Wallet:{' '}\n                <Dropdown inline options={collaboratorsOptions} defaultValue={collaboratorsOptions[0].value} />\n            </span>\n        );\n    }\n}\n\nexport default AccountSelectorComponent;"]},"metadata":{},"sourceType":"module"}