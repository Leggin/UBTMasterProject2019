{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Tasks =\n/*#__PURE__*/\nfunction () {\n  function Tasks() {\n    _classCallCheck(this, Tasks);\n  }\n\n  _createClass(Tasks, null, [{\n    key: \"getTaskIds\",\n    value: function getTaskIds(drizzleState, getTasksDataKey) {\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[getTasksDataKey];\n\n      if (tasksObject) {\n        return tasksObject.value;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getAllTasks\",\n    value: function getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n      var tasks = [];\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n      if (taskIds) {\n        for (var index = 0; index < taskIds.length; index++) {\n          var tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n\n          if (tasksObject) {\n            tasks.push({\n              description: tasksObject.value.description,\n              tasktype: tasksObject.value.tasktype,\n              resource: tasksObject.value.resource,\n              requirements: tasksObject.value.requirements,\n              status: tasksObject.value.status,\n              id: index\n            });\n          }\n        }\n      }\n\n      return tasks;\n    }\n  }, {\n    key: \"getAllTasksPromise\",\n    value: function getAllTasksPromise(contract, taskCallback) {\n      contract.methods.getTaskIds().call().then(function (ids) {\n        var _loop = function _loop(index) {\n          contract.methods.getTaskById(index).call().then(function (task) {\n            var result = {\n              description: task.value.description,\n              tasktype: task.value.tasktype,\n              resource: task.value.resource,\n              requirements: task.value.requirements,\n              status: task.value.status,\n              id: index\n            };\n            taskCallback(index, result);\n          });\n        };\n\n        for (var index = 0; index < ids; index++) {\n          _loop(index);\n        }\n      });\n    }\n  }, {\n    key: \"getAllTasksWithDecision\",\n    value: function getAllTasksWithDecision(contract, drizzleState, getTaskByIdDataKeys, getTasksDataKey, decisionDataCallback) {\n      var tasks = [];\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n      if (taskIds) {\n        var _loop2 = function _loop2(index) {\n          var tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n\n          if (tasksObject) {\n            tasks.push({\n              description: tasksObject.value.description,\n              tasktype: tasksObject.value.tasktype,\n              resource: tasksObject.value.resource,\n              requirements: tasksObject.value.requirements,\n              status: tasksObject.value.status,\n              id: index\n            });\n            contract.methods.getIntegerDecision(index).call().then(function (decisionObject) {\n              decisionDataCallback(index, decisionObject);\n            });\n          }\n        };\n\n        for (var index = 0; index < taskIds.length; index++) {\n          _loop2(index);\n        }\n      }\n\n      return tasks;\n    }\n  }]);\n\n  return Tasks;\n}();\n\nexport default Tasks;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/Tasks.js"],"names":["Tasks","drizzleState","getTasksDataKey","ccmState","contracts","ContractCollaborationManager","tasksObject","getTasks","value","getTaskByIdDataKeys","tasks","taskIds","getTaskIds","index","length","getTaskById","push","description","tasktype","resource","requirements","status","id","contract","taskCallback","methods","call","then","ids","task","result","decisionDataCallback","getIntegerDecision","decisionObject"],"mappings":"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","sourcesContent":["class Tasks {\n\n    static getTaskIds(drizzleState, getTasksDataKey) {\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[getTasksDataKey];\n\n        if (tasksObject) {\n            return tasksObject.value;\n        }\n        return [];\n    }\n\n    static getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n        let tasks = [];\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n        if (taskIds) {\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n                if (tasksObject) {\n                    tasks.push({\n                        description: tasksObject.value.description,\n                        tasktype: tasksObject.value.tasktype,\n                        resource: tasksObject.value.resource,\n                        requirements: tasksObject.value.requirements,\n                        status: tasksObject.value.status,\n                        id: index,\n                    });\n                }\n            }\n        }\n        return tasks;\n    }\n\n    static getAllTasksPromise(contract, taskCallback) {\n\n        contract.methods.getTaskIds().call().then((ids) => {\n            for (let index = 0; index < ids; index++) {\n                contract.methods.getTaskById(index).call().then((task) => {\n                    let result = {\n                        description: task.value.description,\n                        tasktype: task.value.tasktype,\n                        resource: task.value.resource,\n                        requirements: task.value.requirements,\n                        status: task.value.status,\n                        id: index,\n                    };\n                    taskCallback(index, result);\n                });\n            }\n        });\n    }\n\n    static getAllTasksWithDecision(contract, drizzleState, getTaskByIdDataKeys, getTasksDataKey, decisionDataCallback) {\n        let tasks = [];\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n        if (taskIds) {\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n\n                if (tasksObject) {\n                    tasks.push({\n                        description: tasksObject.value.description,\n                        tasktype: tasksObject.value.tasktype,\n                        resource: tasksObject.value.resource,\n                        requirements: tasksObject.value.requirements,\n                        status: tasksObject.value.status,\n                        id: index,\n                    });\n                    contract.methods.getIntegerDecision(index).call().then((decisionObject) => {\n                        decisionDataCallback(index, decisionObject);\n                    });\n                }\n            }\n        }\n        return tasks;\n    }\n}\nexport default Tasks"]},"metadata":{},"sourceType":"module"}