{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Supervisor from \"./Supervisor\";\nimport Collaborators from \"./Collaborators\";\nimport CreateTask from \"./CreateTask\";\nimport TaskTable from \"./TaskTable\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      drizzleState: null,\n      drizzle: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var drizzle = this.props.drizzle; // subscribe to changes in the store\n\n      this.unsubscribe = drizzle.store.subscribe(function () {\n        // every time the store updates, grab the state from drizzle\n        var drizzleState = drizzle.store.getState(); // check to see if it's ready, if so, update local component state\n\n        if (drizzleState.drizzleStatus.initialized) {\n          _this2.setState({\n            loading: false,\n            drizzleState: drizzleState,\n            drizzle: drizzle\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) return \"Loading Drizzle...\";\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Supervisor, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(Collaborators, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(CreateTask, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(TaskTable, {\n        drizzle: this.props.drizzle,\n        drizzleState: this.state.drizzleState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/App.js"],"names":["React","Component","Supervisor","Collaborators","CreateTask","TaskTable","App","state","loading","drizzleState","drizzle","props","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","setState"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,YAAY,EAAE,IAA/B;AAAqCC,MAAAA,OAAO,EAAE;AAA9C,K;;;;;;wCAEY;AAAA;;AAAA,UACVA,OADU,GACE,KAAKC,KADP,CACVD,OADU,EAGlB;;AACA,WAAKE,WAAL,GAAmBF,OAAO,CAACG,KAAR,CAAcC,SAAd,CAAwB,YAAM;AAE/C;AACA,YAAML,YAAY,GAAGC,OAAO,CAACG,KAAR,CAAcE,QAAd,EAArB,CAH+C,CAK/C;;AACA,YAAIN,YAAY,CAACO,aAAb,CAA2BC,WAA/B,EAA4C;AAC1C,UAAA,MAAI,CAACC,QAAL,CAAc;AAAEV,YAAAA,OAAO,EAAE,KAAX;AAAkBC,YAAAA,YAAY,EAAZA,YAAlB;AAAgCC,YAAAA,OAAO,EAAPA;AAAhC,WAAd;AACD;AACF,OATkB,CAAnB;AAUD;;;2CAEsB;AACrB,WAAKE,WAAL;AACD;;;6BAEQ;AACP,UAAI,KAAKL,KAAL,CAAWC,OAAf,EAAwB,OAAO,oBAAP;AACxB,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAE,KAAKG,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,aAAD;AACE,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EASE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAaE,oBAAC,SAAD;AACE,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWD,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWE,YAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,CADF;AAoBD;;;;EA7CeR,S;;AAiDlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport Supervisor from \"./Supervisor\";\nimport Collaborators from \"./Collaborators\";\nimport CreateTask from \"./CreateTask\";\nimport TaskTable from \"./TaskTable\";\n\nclass App extends Component {\n  state = { loading: true, drizzleState: null, drizzle: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState, drizzle });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n        <Supervisor\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <Collaborators\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <CreateTask\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <TaskTable\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}