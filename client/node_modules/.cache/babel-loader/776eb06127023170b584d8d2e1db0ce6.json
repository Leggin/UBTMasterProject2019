{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/ChangeGlobalPayloadComponent.js\";\nimport React from \"react\";\nimport { Dropdown, Button, Input } from 'semantic-ui-react';\n\nvar ChangeGlobalPayloadComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChangeGlobalPayloadComponent, _React$Component);\n\n  function ChangeGlobalPayloadComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeGlobalPayloadComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeGlobalPayloadComponent).call(this, props));\n    _this.state = {\n      intPayloadOptions: [],\n      stringPayloadOptions: [],\n      isIntPayload: true,\n      newPayload: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ChangeGlobalPayloadComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n        var keys = [];\n\n        for (var i = 0; i < count; i++) {\n          keys.push(contract.methods.getGlobalIntPayloadValueById.cacheCall(i));\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions,\n          intPayloadKeys: keys\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        var keys = [];\n\n        for (var i = 0; i < count; i++) {\n          keys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions,\n          stringPayloadKeys: keys\n        });\n      });\n    }\n  }, {\n    key: \"changePayload\",\n    value: function changePayload() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n      if (this.state.isIntPayload) {\n        this.changeIntPayload(contract);\n      } else {\n        this.changeStringPayload(contract);\n      }\n    }\n  }, {\n    key: \"changeIntPayload\",\n    value: function changeIntPayload(contract) {\n      var payloadID = this.state.selectedIntPayload;\n      var newPayload = Number(this.state.newPayload);\n      console.log(\"oldID\", payloadID, \"newPayload:\", newPayload);\n      contract.methods.changeGlobalIntPayload.cacheSend(payloadID, newPayload, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"changeStringPayload\",\n    value: function changeStringPayload(contract) {\n      var newPayload = Number(this.state.newPayload);\n      var payloadID = this.state.selectedStringPayload;\n      console.log(\"oldID\", payloadID, \"newPayload:\", newPayload);\n      contract.methods.changeGlobalStringPayload.cacheSend(payloadID, newPayload, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"getIntPayloadOptions\",\n    value: function getIntPayloadOptions(ccmState) {\n      var payloadOptions = [];\n\n      for (var i = 0; i < this.state.intPayloadKeys; i++) {\n        var payload = ccmState.getGlobalIntPayloadValueById[this.state.intPayloadKeys[i]];\n\n        if (payload) {\n          payloadOptions.push({\n            key: i,\n            value: i,\n            text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n          });\n        }\n      }\n\n      return payloadOptions;\n    }\n  }, {\n    key: \"getStringPayloadOptions\",\n    value: function getStringPayloadOptions(ccmState) {\n      var payloadOptions = [];\n\n      for (var i = 0; i < this.state.stringPayloadKeys; i++) {\n        var payload = ccmState.getGlobalStringPayloadValueById[this.state.stringPayloadKeys[i]];\n\n        if (payload) {\n          payloadOptions.push({\n            key: i,\n            value: i,\n            text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n          });\n        }\n      }\n\n      return payloadOptions;\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var _this4 = this;\n\n      return React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isIntPayload ? 'blue' : null,\n        onClick: function onClick() {\n          _this4.setState({\n            isIntPayload: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Int\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isIntPayload ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this4.setState({\n            isIntPayload: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"String\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var intPayloadOptions = this.getIntPayloadOptions(ccmState);\n      var stringPayloadOptions = this.getStringPayloadOptions(ccmState);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.renderButtonGroup(), this.state.isIntPayload && React.createElement(Dropdown, {\n        placeholder: \"Select Global Integer Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), !this.state.isIntPayload && React.createElement(Dropdown, {\n        placeholder: \"Select Global String Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(Input, {\n        placeholder: \"New Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            newPayload: data.value\n          });\n        },\n        value: this.state.newPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.changePayload.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Change Payload\"));\n    }\n  }]);\n\n  return ChangeGlobalPayloadComponent;\n}(React.Component);\n\nexport default ChangeGlobalPayloadComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/ChangeGlobalPayloadComponent.js"],"names":["React","Dropdown","Button","Input","ChangeGlobalPayloadComponent","props","state","intPayloadOptions","stringPayloadOptions","isIntPayload","newPayload","contract","drizzle","contracts","ContractCollaborationManager","ccmState","drizzleState","setIntegerPayloadOptions","setStringPayloadOptions","methods","getGlobalIntegerPayloadCount","call","then","count","keys","i","push","getGlobalIntPayloadValueById","cacheCall","setState","intPayloadKeys","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","stringPayloadKeys","changeIntPayload","changeStringPayload","payloadID","selectedIntPayload","Number","console","log","changeGlobalIntPayload","cacheSend","from","defaultAccount","gas","selectedStringPayload","changeGlobalStringPayload","payloadOptions","payload","key","value","text","a","b","getIntPayloadOptions","getStringPayloadOptions","renderButtonGroup","event","data","changePayload","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Dropdown, Button, Input } from 'semantic-ui-react'\n\nclass ChangeGlobalPayloadComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            intPayloadOptions: [],\n            stringPayloadOptions: [],\n            isIntPayload: true,\n            newPayload: \"\",\n        }\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n            let keys = [];\n            for (let i = 0; i < count; i++) {\n                keys.push(contract.methods.getGlobalIntPayloadValueById.cacheCall(i));\n            }\n            this.setState({ intPayloadOptions, intPayloadKeys: keys });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n            let keys = [];\n            for (let i = 0; i < count; i++) {\n                keys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n            }\n            this.setState({ stringPayloadOptions, stringPayloadKeys: keys });\n        });\n    }\n\n    changePayload() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n        if (this.state.isIntPayload) {\n            this.changeIntPayload(contract)\n        } else {\n            this.changeStringPayload(contract);\n        }\n    }\n\n    changeIntPayload(contract) {\n        let payloadID = this.state.selectedIntPayload;\n        let newPayload = Number(this.state.newPayload);\n        console.log(\"oldID\", payloadID, \"newPayload:\", newPayload);\n\n        contract.methods.changeGlobalIntPayload.cacheSend(payloadID, newPayload, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n    }\n\n    changeStringPayload(contract) {\n        let newPayload = Number(this.state.newPayload);\n        let payloadID = this.state.selectedStringPayload;\n        console.log(\"oldID\", payloadID, \"newPayload:\", newPayload);\n\n        contract.methods.changeGlobalStringPayload.cacheSend(payloadID, newPayload, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    getIntPayloadOptions(ccmState) {\n        let payloadOptions = [];\n        for (let i = 0; i < this.state.intPayloadKeys; i++) {\n            let payload = ccmState.getGlobalIntPayloadValueById[this.state.intPayloadKeys[i]];\n            if (payload) {\n                payloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n            }\n        }\n        return payloadOptions;\n    }\n\n    getStringPayloadOptions(ccmState) {\n        let payloadOptions = [];\n        for (let i = 0; i < this.state.stringPayloadKeys; i++) {\n            let payload = ccmState.getGlobalStringPayloadValueById[this.state.stringPayloadKeys[i]];\n            if (payload) {\n                payloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n            }\n        }\n        return payloadOptions;\n    }\n\n    renderButtonGroup() {\n        return (<label>\n            <Button.Group>\n                <Button\n                    type=\"button\"\n                    color={this.state.isIntPayload ? 'blue' : null}\n                    onClick={() => {\n                        this.setState({ isIntPayload: true });\n                    }}>Int</Button>\n                <Button.Or />\n                <Button\n\n                    type=\"button\"\n                    color={!this.state.isIntPayload ? 'blue' : null}\n                    onClick={(a, b) => {\n                        this.setState({ isIntPayload: false });\n                    }}>String</Button>\n            </Button.Group>\n        </label>);\n    }\n\n    render() {\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let intPayloadOptions = this.getIntPayloadOptions(ccmState);\n        let stringPayloadOptions = this.getStringPayloadOptions(ccmState);\n        return (\n            <div>\n                {this.renderButtonGroup()}\n                {\n                    this.state.isIntPayload &&\n                    <Dropdown placeholder='Select Global Integer Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedIntPayload: data.value });\n                        }} floating selection options={intPayloadOptions} value={this.state.selectedIntPayload} />\n                }\n\n                {\n                    !this.state.isIntPayload &&\n                    < Dropdown placeholder='Select Global String Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedStringPayload: data.value });\n                        }} floating selection options={stringPayloadOptions} value={this.state.selectedStringPayload} />\n                }\n\n                <Input placeholder='New Payload' onChange={\n                    (event, data) => {\n                        this.setState({ newPayload: data.value });\n                    }} value={this.state.newPayload} />\n\n                <button type=\"button\" onClick={this.changePayload.bind(this)}>Change Payload</button>\n            </div>\n        );\n    }\n}\nexport default ChangeGlobalPayloadComponent"]},"metadata":{},"sourceType":"module"}