{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown, Button, Input, Divider, Header, Icon } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\",\n      intPayloadOptions: [],\n      stringPayloadOptions: [],\n      isIntDecision: true,\n      isExclusive: false,\n      localOperand: \"\",\n      selectedCompetitors: []\n    };\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalStringPayloadValueById[key];\n\n          if (payload) {\n            stringPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"Task: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"clearInput\",\n    value: function clearInput() {\n      this.setState({\n        selectedIntPayload: \"\",\n        selectedCompetitors: [],\n        selectedOperator: \"\",\n        selectedTask: \"\",\n        localOperand: \"\"\n      });\n    }\n  }, {\n    key: \"addDecision\",\n    value: function addDecision() {\n      try {\n        var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        var gatewayType = this.state.isExclusive ? c.GATEWAYTYPES.DBEXCL : c.GATEWAYTYPES.DBINCL;\n        var operator = this.state.selectedOperator;\n        var competitors = this.state.isExclusive ? this.state.selectedCompetitors : [];\n\n        if (this.state.isIntDecision) {\n          this.addIntDecision(contract, gatewayType, operator, competitors);\n        } else {\n          this.addStringDecision(contract, gatewayType, operator, competitors);\n        }\n\n        this.clearInput();\n      } catch (e) {\n        console.error(\"Error while adding Decision, \", e);\n      }\n    }\n  }, {\n    key: \"addIntDecision\",\n    value: function addIntDecision(contract, gatewayType, operator, competitors) {\n      var id = this.state.selectedTask;\n      var decisionType = c.DECISIONTYPES.INTDESC;\n      var operands = [this.state.selectedIntPayload, Number(this.state.localOperand)];\n      contract.methods.addIntDecisionToTaskId.cacheSend(id, gatewayType, decisionType, operator, operands, competitors, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"addStringDecision\",\n    value: function addStringDecision(contract, gatewayType, operator, competitors) {\n      var id = this.state.selectedTask;\n      var decisionType = c.DECISIONTYPES.STRDESC;\n      var operands = [this.state.selectedStringPayload, this.state.localOperand];\n      contract.methods.addStringDecisionToTaskId.cacheSend(id, gatewayType, decisionType, operator, operands, competitors, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var _this4 = this;\n\n      return React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick() {\n          _this4.setState({\n            isIntDecision: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Int\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this4.setState({\n            isIntDecision: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"String\")));\n    }\n  }, {\n    key: \"renderDecisionCore\",\n    value: function renderDecisionCore() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"decision-global-op-local\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"decision-global-op-local-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.renderButtonGroup(), this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Integer Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })), !this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global String Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: this.state.stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operator-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Operator\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedOperator: data.value\n          });\n        },\n        compact: true,\n        floating: true,\n        selection: true,\n        options: c.OPERATOROPTIONS,\n        value: this.state.selectedOperator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operand-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Local Value\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            localOperand: data.value\n          });\n        },\n        value: this.state.localOperand,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderCompetitors\",\n    value: function renderCompetitors() {\n      var _this6 = this;\n\n      var tasksObject = this.getTaskDropdownOptions();\n      return React.createElement(\"div\", {\n        className: \"add-decision-competitors-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"add-decision-competitors-inner-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isExclusive ? 'blue' : null,\n        onClick: function onClick() {\n          _this6.setState({\n            isExclusive: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Exclusive\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isExclusive ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this6.setState({\n            isExclusive: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"Inclusive\"))), React.createElement(\"div\", {\n        className: \"competitors-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, this.state.isExclusive && React.createElement(Dropdown, {\n        placeholder: \"Select Competitors\",\n        onChange: function onChange(event, data) {\n          _this6.setState({\n            selectedCompetitors: data.value\n          });\n        },\n        multiple: true,\n        selection: true,\n        options: tasksObject,\n        value: this.state.selectedCompetitors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var tasksObject = this.getTaskDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this7.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: tasksObject,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"tag\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }))), this.renderDecisionCore(), React.createElement(Divider, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"bar chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }))), this.renderCompetitors(), React.createElement(Divider, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"bar chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }))), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.addDecision.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"Add Decision\")));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Button","Input","Divider","Header","Icon","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","intPayloadOptions","stringPayloadOptions","isIntDecision","isExclusive","localOperand","selectedCompetitors","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","value","i","push","getTaskById","setIntegerPayloadOptions","setStringPayloadOptions","setState","call","then","count","key","getGlobalIntPayloadValueById","payload","text","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","tasks","getAllTasks","options","forEach","task","id","description","selectedIntPayload","selectedOperator","gatewayType","GATEWAYTYPES","DBEXCL","DBINCL","operator","competitors","addIntDecision","addStringDecision","clearInput","e","console","error","decisionType","DECISIONTYPES","INTDESC","operands","addIntDecisionToTaskId","cacheSend","from","defaultAccount","gas","STRDESC","selectedStringPayload","addStringDecisionToTaskId","a","b","renderButtonGroup","event","data","OPERATOROPTIONS","tasksObject","getTaskDropdownOptions","renderDecisionCore","renderCompetitors","addDecision","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown, Button, Input, Divider, Header, Icon } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\",\n            intPayloadOptions: [],\n            stringPayloadOptions: [],\n            isIntDecision: true,\n            isExclusive: false,\n            localOperand: \"\",\n            selectedCompetitors: [],\n        }\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n\n        });\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n                let payload = ccmState.getGlobalStringPayloadValueById[key];\n                if (payload) {\n                    stringPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `Task: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n    clearInput() {\n        this.setState({\n            selectedIntPayload: \"\",\n            selectedCompetitors: [],\n            selectedOperator: \"\",\n            selectedTask: \"\",\n            localOperand: \"\"\n        });\n    }\n\n    addDecision() {\n        try {\n            const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n            let gatewayType = (this.state.isExclusive) ? c.GATEWAYTYPES.DBEXCL : c.GATEWAYTYPES.DBINCL;\n            let operator = this.state.selectedOperator;\n            let competitors = (this.state.isExclusive) ? this.state.selectedCompetitors : [];\n\n            if (this.state.isIntDecision) {\n                this.addIntDecision(contract, gatewayType, operator, competitors);\n            }\n            else {\n                this.addStringDecision(contract, gatewayType, operator, competitors);\n            }\n            this.clearInput();\n        } catch (e) {\n            console.error(\"Error while adding Decision, \", e);\n\n        }\n    }\n\n    addIntDecision(contract, gatewayType, operator, competitors) {\n        let id = this.state.selectedTask;\n        let decisionType = c.DECISIONTYPES.INTDESC;\n        let operands = [this.state.selectedIntPayload, Number(this.state.localOperand)];\n\n        contract.methods.addIntDecisionToTaskId.cacheSend(id, gatewayType, decisionType, operator, operands, competitors, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    addStringDecision(contract, gatewayType, operator, competitors) {\n        let id = this.state.selectedTask;\n        let decisionType = c.DECISIONTYPES.STRDESC;\n        let operands = [this.state.selectedStringPayload, this.state.localOperand];\n\n        contract.methods.addStringDecisionToTaskId.cacheSend(id, gatewayType, decisionType, operator, operands, competitors, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    renderButtonGroup() {\n        return (<label>\n            <Button.Group>\n                <Button\n                    type=\"button\"\n                    color={this.state.isIntDecision ? 'blue' : null}\n                    onClick={() => {\n                        this.setState({ isIntDecision: true });\n                    }}>Int</Button>\n                <Button.Or />\n                <Button\n\n                    type=\"button\"\n                    color={!this.state.isIntDecision ? 'blue' : null}\n                    onClick={(a, b) => {\n                        this.setState({ isIntDecision: false });\n                    }}>String</Button>\n            </Button.Group>\n        </label>);\n    }\n\n    renderDecisionCore() {\n        return (<div className=\"decision-global-op-local\">\n            <div className=\"decision-global-op-local-inner\">\n                {this.renderButtonGroup()}\n\n                {this.state.isIntDecision && <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Integer Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedIntPayload: data.value });\n                        }} floating selection options={this.state.intPayloadOptions} value={this.state.selectedIntPayload} />\n                </label>}\n\n                {!this.state.isIntDecision && <label className=\"select-payload-label\">\n                    < Dropdown placeholder='Select Global String Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedStringPayload: data.value });\n                        }} floating selection options={this.state.stringPayloadOptions} value={this.state.selectedStringPayload} />\n                </label >}\n\n                <label className=\"select-operator-label\">\n                    <Dropdown placeholder='Operator' onChange={\n                        (event, data) => {\n                            this.setState({ selectedOperator: data.value });\n                        }} compact floating selection options={c.OPERATOROPTIONS} value={this.state.selectedOperator} />\n                </label>\n\n                <label className=\"select-operand-label\">\n                    <Input placeholder='Local Value' onChange={\n                        (event, data) => {\n                            this.setState({ localOperand: data.value });\n                        }} value={this.state.localOperand} />\n                </label>\n            </div>\n        </div>);\n    }\n\n    renderCompetitors() {\n        let tasksObject = this.getTaskDropdownOptions();\n\n        return (\n            <div className=\"add-decision-competitors-container\">\n                <div className=\"add-decision-competitors-inner-container\">\n                    <div>\n                        <Button.Group>\n                            <Button\n                                type=\"button\"\n                                color={this.state.isExclusive ? 'blue' : null}\n                                onClick={() => {\n                                    this.setState({ isExclusive: true });\n                                }}>Exclusive</Button>\n                            <Button.Or />\n                            <Button\n\n                                type=\"button\"\n                                color={!this.state.isExclusive ? 'blue' : null}\n                                onClick={(a, b) => {\n                                    this.setState({ isExclusive: false });\n                                }}>Inclusive</Button>\n                        </Button.Group>\n                    </div>\n                    <div className=\"competitors-dropdown\">\n                        {this.state.isExclusive && <Dropdown\n                            placeholder='Select Competitors'\n                            onChange={\n                                (event, data) => {\n                                    this.setState({ selectedCompetitors: data.value });\n                                }\n                            } multiple selection\n                            options={tasksObject}\n                            value={this.state.selectedCompetitors} />\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        let tasksObject = this.getTaskDropdownOptions();\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={tasksObject} value={this.state.selectedTask} />\n                </label>\n                <Divider horizontal>\n                    <Header as='h4'>\n                        <Icon name='tag' />\n\n                    </Header>\n                </Divider>\n\n\n                {this.renderDecisionCore()}\n                <Divider horizontal>\n                    <Header as='h4'>\n                        <Icon name='bar chart' />\n\n\n                    </Header>\n                </Divider>\n                {this.renderCompetitors()}\n                <Divider horizontal>\n                    <Header as='h4'>\n                        <Icon name='bar chart' />\n\n                    </Header>\n                </Divider>\n\n                <label >\n                    <button type=\"button\" onClick={this.addDecision.bind(this)}>Add Decision</button>\n                </label>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}