{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport * as c from './Constants.js';\nimport Tasks from \"./Tasks\";\nimport \"./TaskTableComponent.css\";\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: [],\n      TasksHandler: null\n    };\n    _this.Tasks = null;\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (Number(taskType.value) === Number(id)) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"formatTaskRequirements\",\n    value: function formatTaskRequirements(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return \"Completed\";\n      }\n\n      return \"Not Completed\";\n    }\n  }, {\n    key: \"createTableContent\",\n    value: function createTableContent() {\n      var _this2 = this;\n\n      var cells = [];\n      console.log(this.state.TasksHandler);\n\n      if (this.state.TasksHandler) {\n        var tasks = this.state.TasksHandler.getAllTasks();\n        tasks.forEach(function (task) {\n          cells.push(React.createElement(Table.Row, {\n            key: task.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, task.id), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, task.description), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, _this2.getTaskEnumById(task.tasktype)), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, task.stateowner), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, _this2.formatTaskRequirements(task.requirements)), React.createElement(Table.Cell, {\n            error: !task.status,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          }, _this2.formatTaskStatus(task.status))));\n        });\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        TasksHandler: new Tasks(this.props.drizzleState, this.props.drizzle)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var newCells = this.createTableContent();\n      return React.createElement(\"div\", {\n        className: \"task-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, newCells)));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","c","Tasks","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","TasksHandler","first","id","res","TASKTYPES","forEach","taskType","Number","value","text","reqs","reqString","req","slice","length","status","cells","console","log","tasks","getAllTasks","task","push","description","getTaskEnumById","tasktype","stateowner","formatTaskRequirements","requirements","formatTaskStatus","setState","drizzleState","drizzle","newCells","createTableContent","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAO,KAAKC,CAAZ,MAAmB,gBAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,0BAAP;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE,IADR;AAETC,MAAAA,SAAS,EAAE,EAFF;AAGTC,MAAAA,mBAAmB,EAAE,EAHZ;AAITC,MAAAA,YAAY,EAAE;AAJL,KAAb;AAMA,UAAKP,KAAL,GAAa,IAAb;AACA,UAAKQ,KAAL,GAAa,IAAb;AATe;AAUlB;;;;oCAEeC,E,EAAI;AAChB,UAAIC,GAAJ;AACAX,MAAAA,CAAC,CAACY,SAAF,CAAYC,OAAZ,CAAoB,UAAAC,QAAQ,EAAI;AAC5B,YAAIC,MAAM,CAACD,QAAQ,CAACE,KAAV,CAAN,KAA2BD,MAAM,CAACL,EAAD,CAArC,EAA2C;AACvCC,UAAAA,GAAG,GAAGG,QAAQ,CAACG,IAAf;AACH;AACJ,OAJD;AAKA,aAAON,GAAP;AACH;;;2CAEsBO,I,EAAM;AACzB,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACL,OAAL,CAAa,UAAAO,GAAG,EAAI;AAChBD,QAAAA,SAAS,IAAIC,GAAG,GAAG,IAAnB;AACH,OAFD;AAGA,aAAOD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmBF,SAAS,CAACG,MAAV,GAAmB,CAAtC,CAAP;AACH;;;qCAEgBC,M,EAAQ;AACrB,UAAIA,MAAJ,EAAY;AACR,eAAO,WAAP;AACH;;AACD,aAAO,eAAP;AACH;;;yCAEoB;AAAA;;AACjB,UAAIC,KAAK,GAAG,EAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAL,CAAWI,YAAvB;;AAEA,UAAI,KAAKJ,KAAL,CAAWI,YAAf,EAA6B;AACzB,YAAImB,KAAK,GAAG,KAAKvB,KAAL,CAAWI,YAAX,CAAwBoB,WAAxB,EAAZ;AACAD,QAAAA,KAAK,CAACd,OAAN,CAAc,UAAAgB,IAAI,EAAI;AAClBL,UAAAA,KAAK,CAACM,IAAN,CAAW,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAED,IAAI,CAACnB,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACP,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAamB,IAAI,CAACnB,EAAlB,CADO,EAEP,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAamB,IAAI,CAACE,WAAlB,CAFO,EAGP,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,MAAI,CAACC,eAAL,CAAqBH,IAAI,CAACI,QAA1B,CAAb,CAHO,EAIP,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaJ,IAAI,CAACK,UAAlB,CAJO,EAKP,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,MAAI,CAACC,sBAAL,CAA4BN,IAAI,CAACO,YAAjC,CAAb,CALO,EAMP,oBAAC,KAAD,CAAO,IAAP;AAAY,YAAA,KAAK,EAAE,CAACP,IAAI,CAACN,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmC,MAAI,CAACc,gBAAL,CAAsBR,IAAI,CAACN,MAA3B,CAAnC,CANO,CAAX;AAQH,SATD;AAUH;;AACD,aAAQC,KAAR;AAEH;;;wCAEmB;AAChB,WAAKc,QAAL,CAAc;AAAE9B,QAAAA,YAAY,EAAE,IAAIP,KAAJ,CAAU,KAAKE,KAAL,CAAWoC,YAArB,EAAmC,KAAKpC,KAAL,CAAWqC,OAA9C;AAAhB,OAAd;AACH;;;6BAEQ;AACL,UAAMC,QAAQ,GAAG,KAAKC,kBAAL,EAAjB;AAEA,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,EAGI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAII,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ,EAMI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,CADJ,CADJ,EAYI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKD,QAFL,CAZJ,CADJ,CADJ;AAsBH;;;;EAzF4B3C,KAAK,CAAC6C,S;;AA4FvC,eAAezC,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nimport Tasks from \"./Tasks\"\nimport \"./TaskTableComponent.css\"\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: [],\n            TasksHandler: null,\n        }\n        this.Tasks = null;\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (Number(taskType.value) === Number(id)) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    formatTaskRequirements(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return \"Completed\"\n        }\n        return \"Not Completed\"\n    }\n\n    createTableContent() {\n        let cells = [];\n        console.log(this.state.TasksHandler);\n\n        if (this.state.TasksHandler) {\n            let tasks = this.state.TasksHandler.getAllTasks();\n            tasks.forEach(task => {\n                cells.push(<Table.Row key={task.id}>\n                    <Table.Cell>{task.id}</Table.Cell>\n                    <Table.Cell>{task.description}</Table.Cell>\n                    <Table.Cell>{this.getTaskEnumById(task.tasktype)}</Table.Cell>\n                    <Table.Cell>{task.stateowner}</Table.Cell>\n                    <Table.Cell>{this.formatTaskRequirements(task.requirements)}</Table.Cell>\n                    <Table.Cell error={!task.status} >{this.formatTaskStatus(task.status)}</Table.Cell>\n                </Table.Row>);\n            });\n        }\n        return (cells);\n\n    }\n\n    componentDidMount() {\n        this.setState({ TasksHandler: new Tasks(this.props.drizzleState, this.props.drizzle) });\n    }\n\n    render() {\n        const newCells = this.createTableContent();\n\n        return (\n            <div className=\"task-table\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Task Id</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                            <Table.HeaderCell>Owner</Table.HeaderCell>\n                            <Table.HeaderCell>Requirements</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n\n                        {newCells}\n\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}