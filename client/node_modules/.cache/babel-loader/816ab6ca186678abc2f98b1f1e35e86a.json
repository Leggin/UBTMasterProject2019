{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var cells = [];\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n      if (tasksObject) {\n        var taskIds = tasksObject.value;\n\n        for (var index = 0; index < taskIds.length; index++) {\n          var _tasksObject = ccmState.getTaskById[index];\n          console.log(_tasksObject);\n          cells.push(React.createElement(Table.Row, {\n            key: taskIds[index],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, taskIds[index])));\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33];\n      var getTaskByIdDataKeys = [];\n      ids.forEach(function (id) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n      });\n      console.log(getTaskByIdDataKeys);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","first","tasksObject","cells","ccmState","drizzleState","contracts","ContractCollaborationManager","taskIds","value","index","length","getTaskById","console","log","push","contract","drizzle","methods","getTasks","cacheCall","ids","forEach","id","setState","newCells","createTableContent","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: []\n        }\n        this.first = true;\n    }\n    createTableContent(tasksObject) {\n        const cells = []\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        if (tasksObject) {\n            const taskIds = tasksObject.value;\n\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[index];\n                console.log(tasksObject);\n\n                cells.push(<Table.Row key={taskIds[index]}><Table.Cell>{taskIds[index]}</Table.Cell></Table.Row>);\n            }\n        }\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n\n        let ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,]\n        const getTaskByIdDataKeys = []\n        ids.forEach(id => {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n        });\n        console.log(getTaskByIdDataKeys);\n\n\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys });\n    }\n\n\n    render() {\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n\n        const newCells = this.createTableContent(tasksObject);\n\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}