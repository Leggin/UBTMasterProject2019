{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\",\n      intPayloadOptions: []\n    };\n    _this.decisionTypes = c.DECISIONTYPES;\n    _this.operator = c.OPERATORS;\n    _this.gatewayTypes = c.GATEWAYTPYES;\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: payload.value,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n          contract.methods.getGlobalStringPayloadCount().call().then(function (count) {});\n          var payload = ccmState.getGlobalStringPayloadValueById[key];\n\n          if (payload) {\n            stringPayloadOptions.push({\n              key: i,\n              value: payload.value,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"getStringPayloadKeys\",\n    value: function getStringPayloadKeys(contract, ccmState, countKey) {\n      var stringPayloadKeys = [];\n      var count = ccmState.getGlobalStringPayloadCount[countKey];\n      count = count ? count.value : 5;\n\n      for (var i = 0; i < count; i++) {\n        stringPayloadKeys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n      }\n\n      return stringPayloadKeys;\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"setIntpayloads\",\n    value: function setIntpayloads() {\n      var _this4 = this;\n\n      if (this.state.intPayloadKeys) {\n        var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        this.setState({\n          intPayloads: []\n        });\n\n        var _loop = function _loop(i) {\n          contract.methods.getGlobalIntPayloadValueById(i).call().then(function (payload) {\n            _this4.setState({\n              intPayloads: _this4.state.intPayloads.push({\n                payload: payload,\n                id: i\n              })\n            });\n          });\n        };\n\n        for (var i = 0; i < this.state.intPayloadKeys.length; i++) {\n          _loop(i);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Add Decision\"));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","intPayloadOptions","decisionTypes","DECISIONTYPES","operator","OPERATORS","gatewayTypes","GATEWAYTPYES","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","value","i","push","getTaskById","setIntegerPayloadOptions","setState","call","then","count","key","getGlobalIntPayloadValueById","payload","text","getGlobalStringPayloadCount","stringPayloadOptions","getGlobalStringPayloadValueById","countKey","stringPayloadKeys","tasks","getAllTasks","options","forEach","task","id","description","intPayloadKeys","intPayloads","length","taskOptions","getTaskDropdownOptions","event","data","selectedPayload","handleCreateTask","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\",\n            intPayloadOptions: []\n        }\n        this.decisionTypes = c.DECISIONTYPES;\n        this.operator = c.OPERATORS;\n        this.gatewayTypes = c.GATEWAYTPYES\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n\n        });\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n                contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n\n\n                });\n                let payload = ccmState.getGlobalStringPayloadValueById[key];\n                if (payload) {\n                    stringPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    getStringPayloadKeys(contract, ccmState, countKey) {\n        let stringPayloadKeys = [];\n        let count = ccmState.getGlobalStringPayloadCount[countKey];\n        count = (count) ? count.value : 5;\n        for (let i = 0; i < count; i++) {\n            stringPayloadKeys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n        }\n\n        return stringPayloadKeys;\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n\n    setIntpayloads() {\n        if (this.state.intPayloadKeys) {\n            const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n            this.setState({ intPayloads: [] });\n            for (let i = 0; i < this.state.intPayloadKeys.length; i++) {\n                contract.methods.getGlobalIntPayloadValueById(i).call().then((payload) => {\n                    this.setState({ intPayloads: this.state.intPayloads.push({ payload, id: i }) })\n                });\n\n            }\n        }\n    }\n\n\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedPayload: data.value });\n                        }} fluid selection options={this.state.intPayloadOptions} value={this.state.selectedPayload} />\n                </label>\n                {/* \n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label> */}\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}