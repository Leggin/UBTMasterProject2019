{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table, Icon } from 'semantic-ui-react';\nimport * as c from './Constants.js';\nimport Tasks from \"./Tasks\";\nimport \"./TaskTableComponent.css\";\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: [],\n      getIntegerDecisionKeys: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (Number(taskType.value) === Number(id)) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"formatTaskRequirements\",\n    value: function formatTaskRequirements(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return React.createElement(Icon, {\n          name: \"checkmark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Icon, {\n        name: \"attention\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"createTableContent\",\n    value: function createTableContent() {\n      var _this2 = this;\n\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var cells = [];\n      var tasks = Tasks.getAllTasksWithDecision(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey, this.getIntegerDecisionKeys);\n      tasks.forEach(function (task) {\n        //console.log(\"TASKRESOURCE: \", task.resource);\n        cells.push(React.createElement(Table.Row, {\n          key: task.id,\n          negative: !task.status,\n          positive: task.status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, task.id), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, task.description), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, _this2.getTaskEnumById(task.tasktype)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, task.resource), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, _this2.formatTaskRequirements(task.requirements)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, _this2.formatTaskStatus(task.status)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, task.decisionLocal)));\n      });\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n      var getTaskByIdDataKeys = [];\n      var getIntegerDecisionKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        console.log(contract.methods.getIntegerDecision.cacheCall(i));\n        getIntegerDecisionKeys.push(contract.methods.getIntegerDecision.cacheCall(i));\n      }\n\n      console.log(getIntegerDecisionKeys);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        getIntegerDecisionKeys: getIntegerDecisionKeys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var newCells = this.createTableContent();\n      return React.createElement(\"div\", {\n        className: \"task-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Local Decision Value\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, newCells)));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","Icon","c","Tasks","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","getIntegerDecisionKeys","first","id","res","TASKTYPES","forEach","taskType","Number","value","text","reqs","reqString","req","slice","length","status","contract","drizzle","contracts","ContractCollaborationManager","cells","tasks","getAllTasksWithDecision","drizzleState","task","push","description","getTaskEnumById","tasktype","resource","formatTaskRequirements","requirements","formatTaskStatus","decisionLocal","ccmState","methods","getTasks","cacheCall","getTaskCountKey","getTaskCount","taskCount","i","getTaskById","console","log","getIntegerDecision","setState","newCells","createTableContent","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table, Icon } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nimport Tasks from \"./Tasks\"\nimport \"./TaskTableComponent.css\"\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: [],\n            getIntegerDecisionKeys: [],\n        }\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (Number(taskType.value) === Number(id)) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    formatTaskRequirements(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return <Icon name='checkmark' />\n        }\n        return <Icon name='attention' />\n    }\n\n    createTableContent() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n        let cells = [];\n\n        let tasks = Tasks.getAllTasksWithDecision(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey, this.getIntegerDecisionKeys);\n        tasks.forEach(task => {\n            //console.log(\"TASKRESOURCE: \", task.resource);\n            cells.push(<Table.Row key={task.id} negative={!task.status} positive={task.status}>\n                <Table.Cell>{task.id}</Table.Cell>\n                <Table.Cell>{task.description}</Table.Cell>\n                <Table.Cell>{this.getTaskEnumById(task.tasktype)}</Table.Cell>\n                <Table.Cell>{task.resource}</Table.Cell>\n                <Table.Cell>{this.formatTaskRequirements(task.requirements)}</Table.Cell>\n                <Table.Cell  >{this.formatTaskStatus(task.status)}</Table.Cell>\n                <Table.Cell  >{task.decisionLocal}</Table.Cell>\n\n            </Table.Row>);\n        });\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n        const getTaskByIdDataKeys = [];\n        const getIntegerDecisionKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n            console.log(contract.methods.getIntegerDecision.cacheCall(i));\n\n            getIntegerDecisionKeys.push(contract.methods.getIntegerDecision.cacheCall(i))\n        }\n        console.log(getIntegerDecisionKeys);\n\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys, getIntegerDecisionKeys });\n    }\n\n    render() {\n        const newCells = this.createTableContent();\n\n        return (\n            <div className=\"task-table\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Task Id</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                            <Table.HeaderCell>Owner</Table.HeaderCell>\n                            <Table.HeaderCell>Requirements</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Local Decision Value</Table.HeaderCell>\n\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n\n                        {newCells}\n\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}