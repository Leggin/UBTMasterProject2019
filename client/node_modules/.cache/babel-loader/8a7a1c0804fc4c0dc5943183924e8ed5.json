{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTable.js\";\nimport React from \"react\";\n\nvar TaskTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTable, _React$Component);\n\n  function TaskTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dataKey: null\n    };\n    return _this;\n  }\n\n  _createClass(TaskTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getTasks.cacheCall(); // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasks = ContractCollaborationManager.getTasks[this.state.dataKey];\n      console.log(tasks && tasks.value); //console.log(tasks);\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Tasks existing -> \", tasks && tasks.value));\n    }\n  }]);\n\n  return TaskTable;\n}(React.Component);\n\nexport default TaskTable;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTable.js"],"names":["React","TaskTable","state","dataKey","drizzle","props","contract","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","setState","drizzleState","tasks","console","log","value","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE;AADL,K;;;;;;wCAIY;AAAA,UACRC,OADQ,GACI,KAAKC,KADT,CACRD,OADQ;AAEhB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFgB,CAGhB;;AACA,UAAML,OAAO,GAAGG,QAAQ,CAACG,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAhB,CAJgB,CAMhB;;AACA,WAAKC,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AAAA,UAEGK,4BAFH,GAEoC,KAAKH,KAAL,CAAWQ,YAAX,CAAwBN,SAF5D,CAEGC,4BAFH;AAGL,UAAMM,KAAK,GAAGN,4BAA4B,CAACE,QAA7B,CAAsC,KAAKR,KAAL,CAAWC,OAAjD,CAAd;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,IAAIA,KAAK,CAACG,KAA3B,EAJK,CAKL;;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuBH,KAAK,IAAIA,KAAK,CAACG,KADtC,CADJ,CADJ;AAOH;;;;EA7BmBjB,KAAK,CAACkB,S;;AAgC9B,eAAejB,SAAf","sourcesContent":["import React from \"react\";\n\nclass TaskTable extends React.Component {\n\n    state = {\n        dataKey: null\n    };\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getTasks.cacheCall();\n\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasks = ContractCollaborationManager.getTasks[this.state.dataKey];\n        console.log(tasks && tasks.value);\n        //console.log(tasks);\n        return (\n            <div>\n                <p>\n                    Tasks existing -> {tasks && tasks.value}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default TaskTable;\n"]},"metadata":{},"sourceType":"module"}