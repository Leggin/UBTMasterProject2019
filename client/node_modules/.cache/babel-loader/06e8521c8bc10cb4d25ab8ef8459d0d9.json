{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown, Button, Input } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\",\n      intPayloadOptions: [],\n      stringPayloadOptions: [{\n        key: 1,\n        value: 2,\n        text: \"ID: 0| Payload: \".concat(3)\n      }],\n      isIntDecision: true,\n      isExclusive: false,\n      localOperand: \"\",\n      selectedCompetitors: []\n    };\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i); // contract.methods.getGlobalStringPayloadValueById(i).call().then((payload) => {\n          //     console.log(\"payload!!!\", payload);\n          //     let a = []\n          //     a = a.concat(this.state.stringPayloadOptions);\n          //     console.log(\"asdfasdfasdfasdf\", a);\n          //     a = a.push({ key: payload, value: payload, text: `ID: ${i}| Payload: ${payload}` });\n          //     this.setState({ stringPayloadOptions: a });\n          //     //this.setState({ stringPayloadOptions: this.state.stringPayloadOptions.push({ key: payload, value: payload, text: `ID: 0| Payload: ${payload}` }) });\n          // });\n\n          var payload = ccmState.getGlobalStringPayloadValueById[key];\n\n          if (payload) {\n            stringPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"addDecision\",\n    value: function addDecision() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var gatewayType = this.state.isExclusive ? c.GATEWAYTYPES.DBEXCL : c.GATEWAYTYPES.DBINCL;\n      console.log(\"is escl\", this.state.isExclusive);\n      var operator = this.state.selectedOperator;\n      var competitors = this.state.isExclusive ? this.state.selectedCompetitors : [];\n\n      if (this.state.isIntDecision) {\n        this.addIntDecision(contract, gatewayType, operator, competitors);\n      } else {\n        this.addStringDecision(contract, gatewayType, operator, competitors);\n      }\n    }\n  }, {\n    key: \"addIntDecision\",\n    value: function addIntDecision(contract, gatewayType, operator, competitors) {\n      var id = this.state.selectedTask;\n      var decisionType = c.DECISIONTYPES.INTDESC;\n      var operands = [this.state.selectedIntPayload, this.state.localOperand];\n      console.log(id, gatewayType, decisionType, operands, operator, competitors);\n      console.log(\"PARTYPATRP\"); // contract.methods.addIntDecisionToTaskId.cacheSend({\n      //     from: this.props.defaultAccount,\n      //     gas: 600000\n      // });\n    }\n  }, {\n    key: \"addStringDecision\",\n    value: function addStringDecision(contract, gatewayType, operator, competitors) {\n      var id;\n      var decisionType = c.DECISIONTYPES.STRDESC;\n      var operands = [this.state.selectedStringPayload, this.state.localOperand]; // contract.methods.addStringDecisionToTaskId.cacheSend({\n      //     from: this.props.defaultAccount,\n      //     gas: 600000\n      // });\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var _this4 = this;\n\n      return React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick() {\n          _this4.setState({\n            isIntDecision: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Int\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this4.setState({\n            isIntDecision: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"String\")));\n    }\n  }, {\n    key: \"renderDecisionCore\",\n    value: function renderDecisionCore() {\n      var _this5 = this;\n\n      return React.createElement(\"div\", {\n        className: \"decision-global-op-local\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.renderButtonGroup(), this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Int Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), !this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global String Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operator-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Operator\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedOperator: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: c.OPERATOROPTIONS,\n        value: this.state.selectedOperator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operand-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Local Value\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            localOperand: data.value\n          });\n        },\n        value: this.state.localOperand,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderCompetitors\",\n    value: function renderCompetitors() {\n      var _this6 = this;\n\n      var tasksObject = this.getTaskDropdownOptions();\n      return React.createElement(\"div\", {\n        className: \"add-decision-competitors-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isExclusive ? 'blue' : null,\n        onClick: function onClick() {\n          _this6.setState({\n            isExclusive: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Exclusive\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isExclusive ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this6.setState({\n            isExclusive: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"Inclusive\")), React.createElement(\"div\", {\n        className: \"competitors-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, this.state.isExclusive && React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this6.setState({\n            selectedCompetitors: data.value\n          });\n        },\n        multiple: true,\n        selection: true,\n        floating: true,\n        options: tasksObject,\n        value: this.state.selectedCompetitors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var tasksObject = this.getTaskDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this7.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: tasksObject,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })), this.renderDecisionCore(), this.renderCompetitors(), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.addDecision.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"Add Decision\")));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Button","Input","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","intPayloadOptions","stringPayloadOptions","key","value","text","isIntDecision","isExclusive","localOperand","selectedCompetitors","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","i","push","getTaskById","setIntegerPayloadOptions","setStringPayloadOptions","setState","call","then","count","getGlobalIntPayloadValueById","payload","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","tasks","getAllTasks","options","forEach","task","id","description","gatewayType","GATEWAYTYPES","DBEXCL","DBINCL","console","log","operator","selectedOperator","competitors","addIntDecision","addStringDecision","decisionType","DECISIONTYPES","INTDESC","operands","selectedIntPayload","STRDESC","selectedStringPayload","a","b","renderButtonGroup","event","data","OPERATOROPTIONS","tasksObject","getTaskDropdownOptions","renderDecisionCore","renderCompetitors","addDecision","bind","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,gBAAnB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,KAA3B,QAAwC,mBAAxC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAGMC,oB;;;;;AACF,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,IADL;AAETC,MAAAA,eAAe,EAAE,EAFR;AAGTC,MAAAA,mBAAmB,EAAE,EAHZ;AAITC,MAAAA,kBAAkB,EAAE,EAJX;AAKTC,MAAAA,qBAAqB,EAAE,EALd;AAMTC,MAAAA,wBAAwB,EAAE,EANjB;AAOTC,MAAAA,iBAAiB,EAAE,EAPV;AAQTC,MAAAA,oBAAoB,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,KAAK,EAAE,CAAjB;AAAoBC,QAAAA,IAAI,4BAAqB,CAArB;AAAxB,OAAD,CARb;AASTC,MAAAA,aAAa,EAAE,IATN;AAUTC,MAAAA,WAAW,EAAE,KAVJ;AAWTC,MAAAA,YAAY,EAAE,EAXL;AAYTC,MAAAA,mBAAmB,EAAE;AAZZ,KAAb;AAFe;AAgBlB;;;;wCAEmB;AAChB,UAAMC,QAAQ,GAAG,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AACA,UAAMjB,eAAe,GAAGc,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAxB;AACA,UAAMC,kBAAkB,GAAGP,QAAQ,CAACI,OAAT,CAAiBI,4BAAjB,CAA8CF,SAA9C,EAA3B;AAEA,UAAMG,eAAe,GAAGT,QAAQ,CAACI,OAAT,CAAiBM,YAAjB,CAA8BJ,SAA9B,EAAxB;AACA,UAAMK,QAAQ,GAAG,KAAK5B,KAAL,CAAW6B,YAAX,CAAwBV,SAAxB,CAAkCC,4BAAnD;AAEA,UAAIU,SAAS,GAAGF,QAAQ,CAACD,YAAT,CAAsBD,eAAtB,CAAhB;AACAI,MAAAA,SAAS,GAAIA,SAAD,GAAcC,MAAM,CAACD,SAAS,CAACnB,KAAX,CAApB,GAAwC,GAApD;AACA,UAAMP,mBAAmB,GAAG,EAA5B;;AAEA,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,SAArB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC5B,QAAAA,mBAAmB,CAAC6B,IAApB,CAAyBhB,QAAQ,CAACI,OAAT,CAAiBa,WAAjB,CAA6BX,SAA7B,CAAuCS,CAAvC,CAAzB;AACH;;AACD,WAAKG,wBAAL,CAA8BlB,QAA9B,EAAwCW,QAAxC;AACA,WAAKQ,uBAAL,CAA6BnB,QAA7B,EAAuCW,QAAvC;AACA,WAAKS,QAAL,CAAc;AACVlC,QAAAA,eAAe,EAAfA,eADU;AAEVC,QAAAA,mBAAmB,EAAnBA,mBAFU;AAGVoB,QAAAA,kBAAkB,EAAlBA;AAHU,OAAd;AAMH;;;6CAEwBP,Q,EAAUW,Q,EAAU;AAAA;;AACzCX,MAAAA,QAAQ,CAACI,OAAT,CAAiBI,4BAAjB,GAAgDa,IAAhD,GAAuDC,IAAvD,CAA4D,UAACC,KAAD,EAAW;AACnE,YAAIhC,iBAAiB,GAAG,EAAxB;;AAEA,aAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAApB,EAA2BR,CAAC,EAA5B,EAAgC;AAC5B,cAAItB,GAAG,GAAGO,QAAQ,CAACI,OAAT,CAAiBoB,4BAAjB,CAA8ClB,SAA9C,CAAwDS,CAAxD,CAAV;AAEA,cAAIU,OAAO,GAAGd,QAAQ,CAACa,4BAAT,CAAsC/B,GAAtC,CAAd;;AACA,cAAIgC,OAAJ,EAAa;AACTlC,YAAAA,iBAAiB,CAACyB,IAAlB,CAAuB;AAAEvB,cAAAA,GAAG,EAAEsB,CAAP;AAAUrB,cAAAA,KAAK,EAAEqB,CAAjB;AAAoBpB,cAAAA,IAAI,gBAASoB,CAAT,yBAAyBU,OAAO,CAAC/B,KAAjC;AAAxB,aAAvB;AACH;AACJ;;AACD,QAAA,MAAI,CAAC0B,QAAL,CAAc;AAAE7B,UAAAA,iBAAiB,EAAjBA;AAAF,SAAd;AACH,OAZD;AAaH;;;4CAEuBS,Q,EAAUW,Q,EAAU;AAAA;;AACxCX,MAAAA,QAAQ,CAACI,OAAT,CAAiBsB,2BAAjB,GAA+CL,IAA/C,GAAsDC,IAAtD,CAA2D,UAACC,KAAD,EAAW;AAClE,YAAI/B,oBAAoB,GAAG,EAA3B;;AACA,QAAA,MAAI,CAAC4B,QAAL,CAAc;AAAE5B,UAAAA,oBAAoB,EAApBA;AAAF,SAAd;;AAEA,aAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAApB,EAA2BR,CAAC,EAA5B,EAAgC;AAC5B,cAAItB,GAAG,GAAGO,QAAQ,CAACI,OAAT,CAAiBuB,+BAAjB,CAAiDrB,SAAjD,CAA2DS,CAA3D,CAAV,CAD4B,CAG5B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,cAAIU,OAAO,GAAGd,QAAQ,CAACgB,+BAAT,CAAyClC,GAAzC,CAAd;;AACA,cAAIgC,OAAJ,EAAa;AACTjC,YAAAA,oBAAoB,CAACwB,IAArB,CAA0B;AAAEvB,cAAAA,GAAG,EAAEsB,CAAP;AAAUrB,cAAAA,KAAK,EAAEqB,CAAjB;AAAoBpB,cAAAA,IAAI,gBAASoB,CAAT,yBAAyBU,OAAO,CAAC/B,KAAjC;AAAxB,aAA1B;AACH;AACJ;;AACD,QAAA,MAAI,CAAC0B,QAAL,CAAc;AAAE5B,UAAAA,oBAAoB,EAApBA;AAAF,SAAd;AACH,OA1BD;AA2BH;;;6CAEwB;AACrB,UAAIoC,KAAK,GAAG/C,KAAK,CAACgD,WAAN,CAAkB,KAAK9C,KAAL,CAAW6B,YAA7B,EAA2C,KAAK5B,KAAL,CAAWG,mBAAtD,EAA2E,KAAKH,KAAL,CAAWE,eAAtF,CAAZ;AACA,UAAI4C,OAAO,GAAG,EAAd;AAEAF,MAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClBF,QAAAA,OAAO,CAACd,IAAR,CAAa;AAAEvB,UAAAA,GAAG,EAAEuC,IAAI,CAACC,EAAZ;AAAgBvC,UAAAA,KAAK,EAAEsC,IAAI,CAACC,EAA5B;AAAgCtC,UAAAA,IAAI,gBAASqC,IAAI,CAACC,EAAd,6BAAmCD,IAAI,CAACE,WAAxC;AAApC,SAAb;AACH,OAFD;AAGA,aAAOJ,OAAP;AACH;;;kCAEa;AACV,UAAM9B,QAAQ,GAAG,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AAEA,UAAIgC,WAAW,GAAI,KAAKnD,KAAL,CAAWa,WAAZ,GAA2BpB,CAAC,CAAC2D,YAAF,CAAeC,MAA1C,GAAmD5D,CAAC,CAAC2D,YAAF,CAAeE,MAApF;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKxD,KAAL,CAAWa,WAAlC;AAEA,UAAI4C,QAAQ,GAAG,KAAKzD,KAAL,CAAW0D,gBAA1B;AAEA,UAAIC,WAAW,GAAI,KAAK3D,KAAL,CAAWa,WAAZ,GAA2B,KAAKb,KAAL,CAAWe,mBAAtC,GAA4D,EAA9E;;AAGA,UAAI,KAAKf,KAAL,CAAWY,aAAf,EAA8B;AAC1B,aAAKgD,cAAL,CAAoB5C,QAApB,EAA8BmC,WAA9B,EAA2CM,QAA3C,EAAqDE,WAArD;AACH,OAFD,MAGK;AACD,aAAKE,iBAAL,CAAuB7C,QAAvB,EAAiCmC,WAAjC,EAA8CM,QAA9C,EAAwDE,WAAxD;AACH;AACJ;;;mCAEc3C,Q,EAAUmC,W,EAAaM,Q,EAAUE,W,EAAa;AACzD,UAAIV,EAAE,GAAG,KAAKjD,KAAL,CAAWC,YAApB;AACA,UAAI6D,YAAY,GAAGrE,CAAC,CAACsE,aAAF,CAAgBC,OAAnC;AACA,UAAIC,QAAQ,GAAG,CAAC,KAAKjE,KAAL,CAAWkE,kBAAZ,EAAgC,KAAKlE,KAAL,CAAWc,YAA3C,CAAf;AAEAyC,MAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ,EAAgBE,WAAhB,EAA6BW,YAA7B,EAA2CG,QAA3C,EAAqDR,QAArD,EAA+DE,WAA/D;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EANyD,CAQzD;AACA;AACA;AACA;AACH;;;sCAEiBxC,Q,EAAUmC,W,EAAaM,Q,EAAUE,W,EAAa;AAC5D,UAAIV,EAAJ;AACA,UAAIa,YAAY,GAAGrE,CAAC,CAACsE,aAAF,CAAgBI,OAAnC;AACA,UAAIF,QAAQ,GAAG,CAAC,KAAKjE,KAAL,CAAWoE,qBAAZ,EAAmC,KAAKpE,KAAL,CAAWc,YAA9C,CAAf,CAH4D,CAM5D;AACA;AACA;AACA;AACH;;;wCAEmB;AAAA;;AAChB,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWY,aAAX,GAA2B,MAA3B,GAAoC,IAH/C;AAII,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACwB,QAAL,CAAc;AAAExB,YAAAA,aAAa,EAAE;AAAjB,WAAd;AACH,SANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAQI,oBAAC,MAAD,CAAQ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,EASI,oBAAC,MAAD;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,KAAK,EAAE,CAAC,KAAKZ,KAAL,CAAWY,aAAZ,GAA4B,MAA5B,GAAqC,IAHhD;AAII,QAAA,OAAO,EAAE,iBAACyD,CAAD,EAAIC,CAAJ,EAAU;AACf,UAAA,MAAI,CAAClC,QAAL,CAAc;AAAExB,YAAAA,aAAa,EAAE;AAAjB,WAAd;AACH,SANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,CADI,CAAR;AAmBH;;;yCAEoB;AAAA;;AACjB,aAAQ;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,KAAK2D,iBAAL,EADG,EAGH,KAAKvE,KAAL,CAAWY,aAAX,IAA4B;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACzB,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,2BAAtB;AAAkD,QAAA,QAAQ,EACtD,kBAAC4D,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAE8B,YAAAA,kBAAkB,EAAEO,IAAI,CAAC/D;AAA3B,WAAd;AACH,SAHL;AAGO,QAAA,KAAK,MAHZ;AAGa,QAAA,SAAS,MAHtB;AAGuB,QAAA,OAAO,EAAE,KAAKV,KAAL,CAAWO,iBAH3C;AAG8D,QAAA,KAAK,EAAE,KAAKP,KAAL,CAAWkE,kBAHhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADyB,CAHzB,EAUH,CAAC,KAAKlE,KAAL,CAAWY,aAAZ,IAA6B;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAC1B,oBAAE,QAAF;AAAW,QAAA,WAAW,EAAC,8BAAvB;AAAsD,QAAA,QAAQ,EAC1D,kBAAC4D,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAEgC,YAAAA,qBAAqB,EAAEK,IAAI,CAAC/D;AAA9B,WAAd;AACH,SAHL;AAGO,QAAA,KAAK,MAHZ;AAGa,QAAA,SAAS,MAHtB;AAGuB,QAAA,OAAO,EAAE,KAAKV,KAAL,CAAWQ,oBAH3C;AAGiE,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWoE,qBAHnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD0B,CAV1B,EAiBJ;AAAO,QAAA,SAAS,EAAC,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,iBAAtB;AAAwC,QAAA,QAAQ,EAC5C,kBAACI,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAEsB,YAAAA,gBAAgB,EAAEe,IAAI,CAAC/D;AAAzB,WAAd;AACH,SAHL;AAGO,QAAA,KAAK,MAHZ;AAGa,QAAA,SAAS,MAHtB;AAGuB,QAAA,OAAO,EAAEjB,CAAC,CAACiF,eAHlC;AAGmD,QAAA,KAAK,EAAE,KAAK1E,KAAL,CAAW0D,gBAHrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAjBI,EAwBJ;AAAO,QAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,WAAW,EAAC,aAAnB;AAAiC,QAAA,QAAQ,EACrC,kBAACc,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAEtB,YAAAA,YAAY,EAAE2D,IAAI,CAAC/D;AAArB,WAAd;AACH,SAHL;AAGO,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWc,YAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAxBI,CAAR;AA+BH;;;wCAEmB;AAAA;;AAChB,UAAI6D,WAAW,GAAG,KAAKC,sBAAL,EAAlB;AAEA,aACI;AAAK,QAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,KAAK,EAAE,KAAK5E,KAAL,CAAWa,WAAX,GAAyB,MAAzB,GAAkC,IAF7C;AAGI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACuB,QAAL,CAAc;AAAEvB,YAAAA,WAAW,EAAE;AAAf,WAAd;AACH,SALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAOI,oBAAC,MAAD,CAAQ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAQI,oBAAC,MAAD;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,KAAK,EAAE,CAAC,KAAKb,KAAL,CAAWa,WAAZ,GAA0B,MAA1B,GAAmC,IAH9C;AAII,QAAA,OAAO,EAAE,iBAACwD,CAAD,EAAIC,CAAJ,EAAU;AACf,UAAA,MAAI,CAAClC,QAAL,CAAc;AAAEvB,YAAAA,WAAW,EAAE;AAAf,WAAd;AACH,SANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBARJ,CADJ,EAkBI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKb,KAAL,CAAWa,WAAX,IAA0B,oBAAC,QAAD;AACvB,QAAA,WAAW,EAAC,aADW;AAEvB,QAAA,QAAQ,EACJ,kBAAC2D,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAErB,YAAAA,mBAAmB,EAAE0D,IAAI,CAAC/D;AAA5B,WAAd;AACH,SALkB;AAMrB,QAAA,QAAQ,MANa;AAMZ,QAAA,SAAS,MANG;AAMF,QAAA,QAAQ,MANN;AAOvB,QAAA,OAAO,EAAEiE,WAPc;AAQvB,QAAA,KAAK,EAAE,KAAK3E,KAAL,CAAWe,mBARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD/B,CAlBJ,CADJ;AAiCH;;;6BAEQ;AAAA;;AACL,UAAI4D,WAAW,GAAG,KAAKC,sBAAL,EAAlB;AACA,aACI;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,aAAtB;AAAoC,QAAA,QAAQ,EACxC,kBAACJ,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACrC,QAAL,CAAc;AAAEnC,YAAAA,YAAY,EAAEwE,IAAI,CAAC/D;AAArB,WAAd;AACH,SAHL;AAIE,QAAA,KAAK,MAJP;AAIQ,QAAA,SAAS,MAJjB;AAIkB,QAAA,OAAO,EAAEiE,WAJ3B;AAIwC,QAAA,KAAK,EAAE,KAAK3E,KAAL,CAAWC,YAJ1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EASK,KAAK4E,kBAAL,EATL,EAWK,KAAKC,iBAAL,EAXL,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAbJ,CADJ;AAsBH;;;;EAvQ8BxF,KAAK,CAACyF,S;;AA4QzC,eAAenF,oBAAf","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown, Button, Input } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\",\n            intPayloadOptions: [],\n            stringPayloadOptions: [{ key: 1, value: 2, text: `ID: 0| Payload: ${3}` }],\n            isIntDecision: true,\n            isExclusive: false,\n            localOperand: \"\",\n            selectedCompetitors: [],\n        }\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n\n        });\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n\n                // contract.methods.getGlobalStringPayloadValueById(i).call().then((payload) => {\n                //     console.log(\"payload!!!\", payload);\n\n                //     let a = []\n                //     a = a.concat(this.state.stringPayloadOptions);\n                //     console.log(\"asdfasdfasdfasdf\", a);\n\n                //     a = a.push({ key: payload, value: payload, text: `ID: ${i}| Payload: ${payload}` });\n                //     this.setState({ stringPayloadOptions: a });\n                //     //this.setState({ stringPayloadOptions: this.state.stringPayloadOptions.push({ key: payload, value: payload, text: `ID: 0| Payload: ${payload}` }) });\n\n                // });\n\n                let payload = ccmState.getGlobalStringPayloadValueById[key];\n                if (payload) {\n                    stringPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n    addDecision() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n        let gatewayType = (this.state.isExclusive) ? c.GATEWAYTYPES.DBEXCL : c.GATEWAYTYPES.DBINCL;\n        console.log(\"is escl\", this.state.isExclusive);\n\n        let operator = this.state.selectedOperator;\n\n        let competitors = (this.state.isExclusive) ? this.state.selectedCompetitors : [];\n\n\n        if (this.state.isIntDecision) {\n            this.addIntDecision(contract, gatewayType, operator, competitors);\n        }\n        else {\n            this.addStringDecision(contract, gatewayType, operator, competitors);\n        }\n    }\n\n    addIntDecision(contract, gatewayType, operator, competitors) {\n        let id = this.state.selectedTask;\n        let decisionType = c.DECISIONTYPES.INTDESC;\n        let operands = [this.state.selectedIntPayload, this.state.localOperand];\n\n        console.log(id, gatewayType, decisionType, operands, operator, competitors);\n        console.log(\"PARTYPATRP\");\n\n        // contract.methods.addIntDecisionToTaskId.cacheSend({\n        //     from: this.props.defaultAccount,\n        //     gas: 600000\n        // });\n    }\n\n    addStringDecision(contract, gatewayType, operator, competitors) {\n        let id;\n        let decisionType = c.DECISIONTYPES.STRDESC;\n        let operands = [this.state.selectedStringPayload, this.state.localOperand];\n\n\n        // contract.methods.addStringDecisionToTaskId.cacheSend({\n        //     from: this.props.defaultAccount,\n        //     gas: 600000\n        // });\n    }\n\n    renderButtonGroup() {\n        return (<label>\n            <Button.Group>\n                <Button\n\n                    type=\"button\"\n                    color={this.state.isIntDecision ? 'blue' : null}\n                    onClick={() => {\n                        this.setState({ isIntDecision: true });\n                    }}>Int</Button>\n                <Button.Or />\n                <Button\n\n                    type=\"button\"\n                    color={!this.state.isIntDecision ? 'blue' : null}\n                    onClick={(a, b) => {\n                        this.setState({ isIntDecision: false });\n                    }}>String</Button>\n            </Button.Group>\n        </label>);\n    }\n\n    renderDecisionCore() {\n        return (<div className=\"decision-global-op-local\">\n            {this.renderButtonGroup()}\n\n            {this.state.isIntDecision && <label className=\"select-payload-label\">\n                <Dropdown placeholder='Select Global Int Payload' onChange={\n                    (event, data) => {\n                        this.setState({ selectedIntPayload: data.value });\n                    }} fluid selection options={this.state.intPayloadOptions} value={this.state.selectedIntPayload} />\n            </label>}\n\n            {!this.state.isIntDecision && <label className=\"select-payload-label\">\n                < Dropdown placeholder='Select Global String Payload' onChange={\n                    (event, data) => {\n                        this.setState({ selectedStringPayload: data.value });\n                    }} fluid selection options={this.state.stringPayloadOptions} value={this.state.selectedStringPayload} />\n            </label >}\n\n            <label className=\"select-operator-label\">\n                <Dropdown placeholder='Select Operator' onChange={\n                    (event, data) => {\n                        this.setState({ selectedOperator: data.value });\n                    }} fluid selection options={c.OPERATOROPTIONS} value={this.state.selectedOperator} />\n            </label>\n\n            <label className=\"select-operand-label\">\n                <Input placeholder='Local Value' onChange={\n                    (event, data) => {\n                        this.setState({ localOperand: data.value });\n                    }} value={this.state.localOperand} />\n            </label>\n        </div>);\n    }\n\n    renderCompetitors() {\n        let tasksObject = this.getTaskDropdownOptions();\n\n        return (\n            <div className=\"add-decision-competitors-container\">\n                <Button.Group>\n                    <Button\n                        type=\"button\"\n                        color={this.state.isExclusive ? 'blue' : null}\n                        onClick={() => {\n                            this.setState({ isExclusive: true });\n                        }}>Exclusive</Button>\n                    <Button.Or />\n                    <Button\n\n                        type=\"button\"\n                        color={!this.state.isExclusive ? 'blue' : null}\n                        onClick={(a, b) => {\n                            this.setState({ isExclusive: false });\n                        }}>Inclusive</Button>\n                </Button.Group>\n\n                <div className=\"competitors-dropdown\">\n                    {this.state.isExclusive && <Dropdown\n                        placeholder='Select Task'\n                        onChange={\n                            (event, data) => {\n                                this.setState({ selectedCompetitors: data.value });\n                            }\n                        } multiple selection floating\n                        options={tasksObject}\n                        value={this.state.selectedCompetitors} />\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        let tasksObject = this.getTaskDropdownOptions();\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={tasksObject} value={this.state.selectedTask} />\n                </label>\n\n                {this.renderDecisionCore()}\n\n                {this.renderCompetitors()}\n\n                <label >\n                    <button type=\"button\" onClick={this.addDecision.bind(this)}>Add Decision</button>\n                </label>\n\n\n\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}