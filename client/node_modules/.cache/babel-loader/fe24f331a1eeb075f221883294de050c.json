{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKeyGetTasks: null,\n      dataKey: null,\n      tasksStatus: [],\n      testkey: null\n    };\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var cells = [];\n\n      if (tasksObject) {\n        var taskIds = tasksObject.value;\n\n        for (var index = 0; index < taskIds.length; index++) {\n          cells.push(React.createElement(Table.Row, {\n            key: taskIds[index],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22\n            },\n            __self: this\n          }, taskIds[index])));\n        }\n      }\n\n      console.log(\"createTables\");\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getTasks.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","TaskTableComponent","props","state","stackId","dataKeyGetTasks","dataKey","tasksStatus","testkey","tasksObject","cells","taskIds","value","index","length","push","console","log","contract","drizzle","contracts","ContractCollaborationManager","drizzleState","methods","getTasks","cacheCall","setState","newCells","createTableContent","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,eAAe,EAAE,IAFR;AAGTC,MAAAA,OAAO,EAAE,IAHA;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,OAAO,EAAE;AALA,KAAb;AAFe;AASlB;;;;uCACkBC,W,EAAa;AAC5B,UAAMC,KAAK,GAAG,EAAd;;AACA,UAAID,WAAJ,EAAiB;AACb,YAAME,OAAO,GAAGF,WAAW,CAACG,KAA5B;;AAEA,aAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,OAAO,CAACG,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;AACjDH,UAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAEJ,OAAO,CAACE,KAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAgC,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaF,OAAO,CAACE,KAAD,CAApB,CAAhC,CAAX;AACH;AACJ;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA,aAAQP,KAAR;AACH;;;wCAEmB;AAChB,UAAMQ,QAAQ,GAAG,KAAKhB,KAAL,CAAWiB,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AADgB,UAERA,4BAFQ,GAEyB,KAAKnB,KAAL,CAAWoB,YAAX,CAAwBF,SAFjD,CAERC,4BAFQ,EAIhB;;AACA,UAAMf,OAAO,GAAGY,QAAQ,CAACK,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKC,QAAL,CAAc;AAAEpB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AAAA,UAEGe,4BAFH,GAEoC,KAAKnB,KAAL,CAAWoB,YAAX,CAAwBF,SAF5D,CAEGC,4BAFH;AAGL,UAAMZ,WAAW,GAAGY,4BAA4B,CAACG,QAA7B,CAAsC,KAAKrB,KAAL,CAAWG,OAAjD,CAApB;AACA,UAAMqB,QAAQ,GAAG,KAAKC,kBAAL,CAAwBnB,WAAxB,CAAjB;AACA,aACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,CADJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKkB,QAFL,CAPJ,CADJ;AAeH;;;;EA1D4B5B,KAAK,CAAC8B,S;;AA6DvC,eAAe5B,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKeyGetTasks: null,\n            dataKey: null,\n            tasksStatus: [],\n            testkey: null,\n        }\n    }\n    createTableContent(tasksObject) {\n        const cells = []\n        if (tasksObject) {\n            const taskIds = tasksObject.value;\n\n            for (let index = 0; index < taskIds.length; index++) {\n                cells.push(<Table.Row key={taskIds[index]}><Table.Cell>{taskIds[index]}</Table.Cell></Table.Row>);\n            }\n        }\n        console.log(\"createTables\");\n\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getTasks.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newCells = this.createTableContent(tasksObject);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}