{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AccountSelectorComponent.js\";\nimport React from \"react\";\nimport { Dropdown, Icon } from 'semantic-ui-react';\n\nvar AccountSelectorComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountSelectorComponent, _React$Component);\n\n  function AccountSelectorComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AccountSelectorComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountSelectorComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      collaborator: null\n    };\n\n    _this.getTxStatus = function () {\n      // get the transaction states from the drizzle state\n      var transactionStack = _this.props.drizzleState.transactionStack; // get the transaction hash using our saved `stackId`\n\n      var txHash = transactionStack[_this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return \"Transaction status: \".concat(_this.props.drizzleState);\n    };\n\n    _this.getCollaboratorsDropDown = _this.getCollaboratorsDropDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setupUseCase = _this.setupUseCase.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AccountSelectorComponent, [{\n    key: \"getCollaboratorsDropDown\",\n    value: function getCollaboratorsDropDown(collaborators) {\n      var options = [{\n        key: -1,\n        text: \"None\",\n        value: \"None\"\n      }];\n\n      if (collaborators) {\n        for (var index = 0; index < collaborators.value.length; index++) {\n          options.push({\n            value: collaborators.value[index],\n            text: collaborators.value[index],\n            key: index\n          });\n        }\n      }\n\n      return options;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getCollaborators.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n      document.addEventListener(\"keydown\", this.setupUseCase, false);\n    }\n  }, {\n    key: \"setupUseCase\",\n    value: function setupUseCase() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var drizzleState = this.props.drizzleState;\n      console.log(drizzleState.accounts); // await contract.methods.getGlobalIntegerPayloadCount().call();\n\n      contract.methods.addCollaborator.cacheSend(drizzleState.accounts[0], \"Lufthansa\", {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.addCollaborator.cacheSend(drizzleState.accounts[9], \"Customer Max\", {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      var supervisor = drizzleState.accounts[0];\n      var taskType = 0;\n      contract.methods.createTask.cacheSend(\"board passengers\", supervisor, taskType, [], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"release fuel\", supervisor, taskType, [0], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"get rid of passengers with incetive\", supervisor, taskType, [0], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"stop releasing fuel\", supervisor, taskType, [1], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"stop sending out incentives\", supervisor, taskType, [2], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"extra safety check by engineer\", supervisor, taskType, [0, 4], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"safety check or nothing\", supervisor, 2, [3, 5], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n      contract.methods.createTask.cacheSend(\"ready for take-off\", supervisor, taskType, [6], {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // get the contract state from drizzleState\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager; // using the saved `dataKey`, get the variable we're interested in\n\n      var collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n      var collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        inverted: true,\n        color: \"black\",\n        name: \"group\",\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), \" Select Process Collaborators:\", ' ', React.createElement(Dropdown, {\n        inline: true,\n        options: collaboratorsOptions,\n        defaultValue: collaboratorsOptions[0].value,\n        onChange: function onChange(event, data) {\n          _this2.props.onAccountChanged(data.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AccountSelectorComponent;\n}(React.Component);\n\nexport default AccountSelectorComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AccountSelectorComponent.js"],"names":["React","Dropdown","Icon","AccountSelectorComponent","props","state","stackId","collaborator","getTxStatus","transactionStack","drizzleState","txHash","getCollaboratorsDropDown","bind","setupUseCase","collaborators","options","key","text","value","index","length","push","drizzle","contract","contracts","ContractCollaborationManager","dataKey","methods","getCollaborators","cacheCall","setState","document","addEventListener","console","log","accounts","addCollaborator","cacheSend","from","defaultAccount","gas","supervisor","taskType","createTask","collaboratorsOptions","event","data","onAccountChanged","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Dropdown, Icon } from 'semantic-ui-react'\n\nclass AccountSelectorComponent extends React.Component {\n    state = {\n        stackId: null,\n        collaborator: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.getCollaboratorsDropDown = this.getCollaboratorsDropDown.bind(this);\n        this.setupUseCase = this.setupUseCase.bind(this);\n\n    }\n\n    getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactionStack } = this.props.drizzleState;\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[this.state.stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${this.props.drizzleState}`;\n    }\n\n    getCollaboratorsDropDown(collaborators) {\n        let options = [{ key: -1, text: \"None\", value: \"None\" }]\n        if (collaborators) {\n            for (let index = 0; index < collaborators.value.length; index++) {\n                options.push({ value: collaborators.value[index], text: collaborators.value[index], key: index });\n            }\n        }\n        return options;\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getCollaborators.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n        document.addEventListener(\"keydown\", this.setupUseCase, false);\n\n    }\n    setupUseCase() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const drizzleState = this.props.drizzleState;\n        console.log(drizzleState.accounts);\n        // await contract.methods.getGlobalIntegerPayloadCount().call();\n\n        contract.methods.addCollaborator.cacheSend(drizzleState.accounts[0], \"Lufthansa\", {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n        contract.methods.addCollaborator.cacheSend(drizzleState.accounts[9], \"Customer Max\", {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n        let supervisor = drizzleState.accounts[0];\n        let taskType = 0;\n        contract.methods.createTask.cacheSend(\"board passengers\", supervisor, taskType, [], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n        contract.methods.createTask.cacheSend(\"release fuel\", supervisor, taskType, [0], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n        contract.methods.createTask.cacheSend(\"get rid of passengers with incetive\", supervisor, taskType, [0], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n        contract.methods.createTask.cacheSend(\"stop releasing fuel\", supervisor, taskType, [1], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n        contract.methods.createTask.cacheSend(\"stop sending out incentives\", supervisor, taskType, [2], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n        contract.methods.createTask.cacheSend(\"extra safety check by engineer\", supervisor, taskType, [0, 4], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n        contract.methods.createTask.cacheSend(\"safety check or nothing\", supervisor, 2, [3, 5], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n        contract.methods.createTask.cacheSend(\"ready for take-off\", supervisor, taskType, [6], {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n    }\n\n    render() {\n        // get the contract state from drizzleState\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n\n        // using the saved `dataKey`, get the variable we're interested in\n        const collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n        const collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n\n        return (\n            <span>\n                <Icon inverted color=\"black\" name='group' size='large' /> Select Process Collaborators:{' '}\n                <Dropdown inline options={collaboratorsOptions} defaultValue={collaboratorsOptions[0].value} onChange={(event, data) => {\n                    this.props.onAccountChanged(data.value)\n\n                }} />\n            </span>\n        );\n    }\n}\n\nexport default AccountSelectorComponent;"]},"metadata":{},"sourceType":"module"}