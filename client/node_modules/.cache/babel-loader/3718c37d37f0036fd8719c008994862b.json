{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTable.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKeyGetTasks: null,\n      dataKey: null,\n      tasksStatus: [],\n      testkey: null //this.createTableContent = this.createTableContent.bind(this);\n\n    };\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var cells = [];\n\n      if (tasksObject) {\n        var tasks = tasksObject.value;\n\n        for (var i = 0; i < tasks.length; i++) {\n          cells.push(React.createElement(Table.Row, {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, tasks[i])));\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; //console.log(drizzle);\n      // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getTasks.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTable.js"],"names":["React","Table","TaskTableComponent","props","state","stackId","dataKeyGetTasks","dataKey","tasksStatus","testkey","tasksObject","cells","tasks","value","i","length","push","drizzle","contract","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","setState","drizzleState","newCells","createTableContent","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,eAAe,EAAE,IAFR;AAGTC,MAAAA,OAAO,EAAE,IAHA;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,OAAO,EAAE,IALA,CAOb;;AAPa,KAAb;AAFe;AAUlB;;;;uCACkBC,W,EAAa;AAE5B,UAAMC,KAAK,GAAG,EAAd;;AACA,UAAID,WAAJ,EAAiB;AACb,YAAME,KAAK,GAAGF,WAAW,CAACG,KAA1B;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCH,UAAAA,KAAK,CAACK,IAAN,CAAW,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAEF,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmB,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaF,KAAK,CAACE,CAAD,CAAlB,CAAnB,CAAX;AACH;AAEJ;;AACD,aAAQH,KAAR;AACH;;;wCAGmB;AAAA,UACRM,OADQ,GACI,KAAKd,KADT,CACRc,OADQ;AAEhB,UAAMC,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,4BAAnC,CAFgB,CAGhB;AACA;;AACA,UAAMb,OAAO,GAAGW,QAAQ,CAACG,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKC,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AAAA,UAEGa,4BAFH,GAEoC,KAAKjB,KAAL,CAAWsB,YAAX,CAAwBN,SAF5D,CAEGC,4BAFH;AAGL,UAAMV,WAAW,GAAGU,4BAA4B,CAACE,QAA7B,CAAsC,KAAKlB,KAAL,CAAWG,OAAjD,CAApB;AACA,UAAMmB,QAAQ,GAAG,KAAKC,kBAAL,CAAwBjB,WAAxB,CAAjB;AACA,aACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,CADJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKgB,QAFL,CAPJ,CADJ;AAeH;;;;EA3D4B1B,KAAK,CAAC4B,S;;AA8DvC,eAAe1B,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKeyGetTasks: null,\n            dataKey: null,\n            tasksStatus: [],\n            testkey: null\n        }\n        //this.createTableContent = this.createTableContent.bind(this);\n    }\n    createTableContent(tasksObject) {\n\n        const cells = []\n        if (tasksObject) {\n            const tasks = tasksObject.value;\n            for (let i = 0; i < tasks.length; i++) {\n                cells.push(<Table.Row key={i}><Table.Cell>{tasks[i]}</Table.Cell></Table.Row>);\n            }\n\n        }\n        return (cells);\n    }\n\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        //console.log(drizzle);\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getTasks.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newCells = this.createTableContent(tasksObject);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}