{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/UserViewComponent.js\";\nimport React from \"react\";\nimport { Step, Icon } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar UserViewComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserViewComponent, _React$Component);\n\n  function UserViewComponent(props) {\n    var _this;\n\n    _classCallCheck(this, UserViewComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserViewComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKey: null,\n      taskToCompleteId: null,\n      getTaskByIdDataKeys: null,\n      getTasksDataKey: null,\n      userAddress: null\n    };\n    return _this;\n  }\n\n  _createClass(UserViewComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var address = this.props.drizzleState.accounts[9];\n      this.setState({\n        userAddress: address\n      });\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys\n      });\n    }\n  }, {\n    key: \"getTasks\",\n    value: function getTasks() {\n      var unfullfilledtasks = [];\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey); //console.log(\"getTasks\");\n\n      for (var task in tasks) {\n        if (tasks[task].resource === this.state.userAddress) {\n          //console.log(\"key: \", task, \"text:\", task + \":\\t\" + tasks[task].description, \"value: \", tasks[task]);\n          //console.log(\"XXXXXX: \", tasks[task]);\n          unfullfilledtasks.push(tasks[task]);\n        }\n      }\n\n      console.log(unfullfilledtasks);\n      return unfullfilledtasks;\n    }\n  }, {\n    key: \"getUserSteps\",\n    value: function getUserSteps(userTasks) {\n      var stepsArray = [];\n\n      for (var userTask in userTasks) {\n        stepsArray.push(React.createElement(Step, {\n          key: userTask,\n          completed: userTasks[userTask].status,\n          ordered: userTasks[userTask].status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, React.createElement(Step.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(Step.Title, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, userTasks[userTask].description))));\n      }\n\n      return stepsArray;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var steps = this.getUserSteps(this.getTasks());\n      return React.createElement(Step.Group, {\n        ordered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, steps);\n    }\n  }]);\n\n  return UserViewComponent;\n}(React.Component);\n\nexport default UserViewComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/UserViewComponent.js"],"names":["React","Step","Icon","Tasks","UserViewComponent","props","state","stackId","dataKey","taskToCompleteId","getTaskByIdDataKeys","getTasksDataKey","userAddress","address","drizzleState","accounts","setState","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","getTaskCountKey","getTaskCount","ccmState","taskCount","Number","value","i","push","getTaskById","unfullfilledtasks","tasks","getAllTasks","task","resource","console","log","userTasks","stepsArray","userTask","status","description","steps","getUserSteps","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAEMC,iB;;;;;AAEF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,OAAO,EAAE,IAFA;AAGTC,MAAAA,gBAAgB,EAAE,IAHT;AAITC,MAAAA,mBAAmB,EAAE,IAJZ;AAKTC,MAAAA,eAAe,EAAE,IALR;AAMTC,MAAAA,WAAW,EAAE;AANJ,KAAb;AAFe;AAUlB;;;;wCAGmB;AAChB,UAAIC,OAAO,GAAG,KAAKR,KAAL,CAAWS,YAAX,CAAwBC,QAAxB,CAAiC,CAAjC,CAAd;AACA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,WAAW,EAAEC;AAAf,OAAd;AAEA,UAAMI,QAAQ,GAAG,KAAKZ,KAAL,CAAWa,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AACA,UAAMT,eAAe,GAAGM,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0BC,SAA1B,EAAxB;AACA,UAAMC,eAAe,GAAGP,QAAQ,CAACI,OAAT,CAAiBI,YAAjB,CAA8BF,SAA9B,EAAxB;AACA,UAAMG,QAAQ,GAAG,KAAKrB,KAAL,CAAWS,YAAX,CAAwBK,SAAxB,CAAkCC,4BAAnD;AAEA,UAAIO,SAAS,GAAGD,QAAQ,CAACD,YAAT,CAAsBD,eAAtB,CAAhB;AACAG,MAAAA,SAAS,GAAIA,SAAD,GAAcC,MAAM,CAACF,QAAQ,CAACD,YAAT,CAAsBD,eAAtB,EAAuCK,KAAxC,CAApB,GAAqEF,SAAjF;AACA,UAAMjB,mBAAmB,GAAG,EAA5B;;AAEA,WAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,SAArB,EAAgCG,CAAC,EAAjC,EAAqC;AACjCpB,QAAAA,mBAAmB,CAACqB,IAApB,CAAyBd,QAAQ,CAACI,OAAT,CAAiBW,WAAjB,CAA6BT,SAA7B,CAAuCO,CAAvC,CAAzB;AACH;;AACD,WAAKd,QAAL,CAAc;AAAEL,QAAAA,eAAe,EAAfA,eAAF;AAAmBD,QAAAA,mBAAmB,EAAnBA;AAAnB,OAAd;AACH;;;+BAGU;AACP,UAAIuB,iBAAiB,GAAG,EAAxB;AACA,UAAIC,KAAK,GAAG/B,KAAK,CAACgC,WAAN,CAAkB,KAAK9B,KAAL,CAAWS,YAA7B,EAA2C,KAAKR,KAAL,CAAWI,mBAAtD,EAA2E,KAAKJ,KAAL,CAAWK,eAAtF,CAAZ,CAFO,CAGP;;AACA,WAAK,IAAIyB,IAAT,IAAiBF,KAAjB,EAAwB;AACpB,YAAIA,KAAK,CAACE,IAAD,CAAL,CAAYC,QAAZ,KAAyB,KAAK/B,KAAL,CAAWM,WAAxC,EAAqD;AACjD;AACA;AACAqB,UAAAA,iBAAiB,CAACF,IAAlB,CAAuBG,KAAK,CAACE,IAAD,CAA5B;AACH;AACJ;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYN,iBAAZ;AACA,aAAOA,iBAAP;AACH;;;iCACYO,S,EAAW;AACpB,UAAIC,UAAU,GAAG,EAAjB;;AACA,WAAK,IAAIC,QAAT,IAAqBF,SAArB,EAAgC;AAC5BC,QAAAA,UAAU,CAACV,IAAX,CAAgB,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEW,QAAX;AAAqB,UAAA,SAAS,EAAEF,SAAS,CAACE,QAAD,CAAT,CAAoBC,MAApD;AAA4D,UAAA,OAAO,EAAEH,SAAS,CAACE,QAAD,CAAT,CAAoBC,MAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACZ,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaH,SAAS,CAACE,QAAD,CAAT,CAAoBE,WAAjC,CADJ,CADY,CAAhB;AAKH;;AACD,aAAOH,UAAP;AACH;;;6BAEQ;AAEL,UAAII,KAAK,GAAG,KAAKC,YAAL,CAAkB,KAAKxB,QAAL,EAAlB,CAAZ;AACA,aACI,oBAAC,IAAD,CAAM,KAAN;AAAY,QAAA,OAAO,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKuB,KADL,CADJ;AAKH;;;;EArE2B7C,KAAK,CAAC+C,S;;AAyEtC,eAAe3C,iBAAf","sourcesContent":["import React from \"react\";\nimport { Step, Icon } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\";\n\nclass UserViewComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKey: null,\n            taskToCompleteId: null,\n            getTaskByIdDataKeys: null,\n            getTasksDataKey: null,\n            userAddress: null\n        }\n    }\n\n\n    componentDidMount() {\n        let address = this.props.drizzleState.accounts[9];\n        this.setState({ userAddress: address })\n\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys });\n    }\n\n\n    getTasks() {\n        let unfullfilledtasks = []\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        //console.log(\"getTasks\");\n        for (let task in tasks) {\n            if (tasks[task].resource === this.state.userAddress) {\n                //console.log(\"key: \", task, \"text:\", task + \":\\t\" + tasks[task].description, \"value: \", tasks[task]);\n                //console.log(\"XXXXXX: \", tasks[task]);\n                unfullfilledtasks.push(tasks[task]);\n            }\n        }\n        console.log(unfullfilledtasks)\n        return unfullfilledtasks;\n    }\n    getUserSteps(userTasks) {\n        let stepsArray = []\n        for (let userTask in userTasks) {\n            stepsArray.push(<Step key={userTask} completed={userTasks[userTask].status} ordered={userTasks[userTask].status}>\n                <Step.Content>\n                    <Step.Title>{userTasks[userTask].description}</Step.Title>\n                </Step.Content>\n            </Step>)\n        }\n        return stepsArray;\n    }\n\n    render() {\n\n        let steps = this.getUserSteps(this.getTasks())\n        return (\n            <Step.Group ordered>\n                {steps}\n            </Step.Group>\n        )\n    }\n\n}\n\nexport default UserViewComponent;"]},"metadata":{},"sourceType":"module"}