{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/Collaborators.js\";\nimport React from \"react\";\nimport { Input, Dropdown } from 'semantic-ui-react';\nimport './Collaborator.css';\n\nvar Collaborators =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Collaborators, _React$Component);\n\n  function Collaborators(props) {\n    var _this;\n\n    _classCallCheck(this, Collaborators);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collaborators).call(this, props));\n    _this.state = {\n      stackId: null,\n      collaborator: null\n    };\n\n    _this.setValue = function (value) {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      console.log(_this.state.collaborator); // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.addCollaborator.cacheSend(_this.state.collaborator, \"HARTCODE\", {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.getTxStatus = function () {\n      // get the transaction states from the drizzle state\n      var transactionStack = _this.props.drizzleState.transactionStack; //console.log(this.props.drizzleState);\n      // get the transaction hash using our saved `stackId`\n\n      var txHash = transactionStack[_this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return \"Transaction status: \".concat(_this.props.drizzleState);\n    };\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setValue = _this.setValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getCollaboratorsDropDown = _this.getCollaboratorsDropDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Collaborators, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        collaborator: event.target.value\n      });\n    }\n  }, {\n    key: \"getCollaboratorsDropDown\",\n    value: function getCollaboratorsDropDown(collaborators) {\n      var options = [];\n\n      if (collaborators) {\n        collaborators.value.forEach(function (collaborator) {\n          options.push({\n            text: collaborator\n          });\n        });\n      }\n\n      return options;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getCollaborators.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // get the contract state from drizzleState\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager; // using the saved `dataKey`, get the variable we're interested in\n\n      var collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n      var collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n      return React.createElement(\"div\", {\n        className: \"add-collaborater-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.setValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Add Collborator\"), React.createElement(Input, {\n        placeholder: \"Collaborator\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Dropdown, {\n        inline: true,\n        options: collaboratorsOptions,\n        defaultValue: function defaultValue(collaborators) {\n          if (collaborators) {\n            console.log(collaboratorsOptions[0].text);\n            return collaboratorsOptions[0].text;\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Collaborators;\n}(React.Component);\n\nexport default Collaborators;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/Collaborators.js"],"names":["React","Input","Dropdown","Collaborators","props","state","stackId","collaborator","setValue","value","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","console","log","methods","addCollaborator","cacheSend","from","accounts","gas","setState","getTxStatus","transactionStack","txHash","handleChange","bind","getCollaboratorsDropDown","event","target","collaborators","options","forEach","push","text","dataKey","getCollaborators","cacheCall","collaboratorsOptions","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Input, Dropdown } from 'semantic-ui-react'\nimport './Collaborator.css';\n\nclass Collaborators extends React.Component {\n    state = {\n        stackId: null,\n        collaborator: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.setValue = this.setValue.bind(this);\n        this.getCollaboratorsDropDown = this.getCollaboratorsDropDown.bind(this);\n    }\n\n    handleChange(event) {\n\n        this.setState({ collaborator: event.target.value });\n    }\n\n\n    setValue = value => {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        console.log(this.state.collaborator);\n        // let drizzle know we want to call the `set` method with `value`\n\n        const stackId = contract.methods.addCollaborator.cacheSend(this.state.collaborator, \"HARTCODE\", {\n            from: drizzleState.accounts[0],\n            gas: 600000\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    getTxStatus = () => {\n        // get the transaction states from the drizzle state\n        const { transactionStack } = this.props.drizzleState;\n        //console.log(this.props.drizzleState);\n        // get the transaction hash using our saved `stackId`\n        const txHash = transactionStack[this.state.stackId];\n\n        // if transaction hash does not exist, don't display anything\n        if (!txHash) return null;\n\n        // otherwise, return the transaction status\n        return `Transaction status: ${this.props.drizzleState}`;\n    }\n\n    getCollaboratorsDropDown(collaborators) {\n        let options = []\n        if (collaborators) {\n            collaborators.value.forEach(collaborator => {\n                options.push({ text: collaborator });\n            });\n        }\n        return options;\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getCollaborators.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n        // get the contract state from drizzleState\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n\n        // using the saved `dataKey`, get the variable we're interested in\n        const collaborators = ContractCollaborationManager.getCollaborators[this.state.dataKey];\n        const collaboratorsOptions = this.getCollaboratorsDropDown(collaborators);\n\n        return (\n            <div className=\"add-collaborater-container\">\n                <button type=\"button\" onClick={this.setValue}>\n                    Add Collborator\n                 </button>\n\n                <Input placeholder=\"Collaborator\" onChange={this.handleChange} />\n                <Dropdown inline options={collaboratorsOptions} defaultValue={(collaborators) => {\n                    if (collaborators) {\n                        console.log(collaboratorsOptions[0].text);\n\n                        return collaboratorsOptions[0].text;\n                    }\n                }\n                } />\n                {/* <p>\n                    Collaborators are: {collaborators && collaborators.value}\n                </p> */}\n            </div>\n        );\n    }\n}\n\nexport default Collaborators;"]},"metadata":{},"sourceType":"module"}