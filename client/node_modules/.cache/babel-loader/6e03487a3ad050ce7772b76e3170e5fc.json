{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table, Icon, Popup } from 'semantic-ui-react';\nimport * as c from './Constants.js';\nimport Tasks from \"./Tasks\";\nimport \"./TaskTableComponent.css\";\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: [],\n      taskOptions: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (Number(taskType.value) === Number(id)) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"formatTaskIds\",\n    value: function formatTaskIds(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return React.createElement(Icon, {\n          name: \"checkmark\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Icon, {\n        name: \"attention\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"getDecisionOptions\",\n    value: function getDecisionOptions(taskData) {\n      console.log(taskData);\n\n      if (taskData.decisionType) {\n        return React.createElement(Popup, {\n          trigger: React.createElement(Table.Row, {\n            key: taskData.id,\n            negative: !taskData.status,\n            positive: taskData.status,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 51\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, taskData.id), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, taskData.description), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, this.getTaskEnumById(taskData.tasktype)), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, taskData.resource), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, this.formatTaskIds(taskData.requirements)), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, this.formatTaskStatus(taskData.status)), React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, \"true\")),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(Table, {\n          celled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(Table.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          key: Math.ceil(Math.random() * 10000),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Decision Type\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"Competitors\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Decision Completed\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, \"Gateway Type\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, \"Operator\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"Global Payload ID\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"Local Value\"))), React.createElement(Table.Body, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          key: Math.ceil(Math.random() * 10000),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, taskData.decisionType), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, taskData.competitors === [] ? this.formatTaskIds(taskData.competitors) : \"---\"), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, taskData.decisionCompleted), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, taskData.gatewayType), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, taskData.operator), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, taskData.integerOperants.idtoglobalintegerpayload), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, taskData.integerOperants.local)))));\n      } else {\n        return React.createElement(Table.Row, {\n          key: taskData.id,\n          negative: !taskData.status,\n          positive: taskData.status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, taskData.id), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, taskData.description), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, this.getTaskEnumById(taskData.tasktype)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, taskData.resource), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, this.formatTaskIds(taskData.requirements)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, this.formatTaskStatus(taskData.status)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"false\"));\n      }\n    }\n  }, {\n    key: \"taskDataCallback\",\n    value: function taskDataCallback(index, taskData) {\n      var options = this.state.taskOptions;\n      options.push(this.getDecisionOptions(taskData));\n      this.setState({\n        taskOptions: options\n      });\n    }\n  }, {\n    key: \"createTableContentPromise\",\n    value: function createTableContentPromise() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      Tasks.getAllTasksWithDecisionPromise(contract, this.taskDataCallback.bind(this));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createTableContentPromise();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"task-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Decision Type\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, this.state.taskOptions)));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","Icon","Popup","c","Tasks","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","taskOptions","first","id","res","TASKTYPES","forEach","taskType","Number","value","text","reqs","reqString","req","slice","length","status","taskData","console","log","decisionType","description","getTaskEnumById","tasktype","resource","formatTaskIds","requirements","formatTaskStatus","Math","ceil","random","competitors","decisionCompleted","gatewayType","operator","integerOperants","idtoglobalintegerpayload","local","index","options","push","getDecisionOptions","setState","contract","drizzle","contracts","ContractCollaborationManager","getAllTasksWithDecisionPromise","taskDataCallback","bind","createTableContentPromise","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAmC,mBAAnC;AACA,OAAO,KAAKC,CAAZ,MAAmB,gBAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,0BAAP;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE,IADR;AAETC,MAAAA,SAAS,EAAE,EAFF;AAGTC,MAAAA,mBAAmB,EAAE,EAHZ;AAITC,MAAAA,WAAW,EAAE;AAJJ,KAAb;AAMA,UAAKC,KAAL,GAAa,IAAb;AARe;AASlB;;;;oCAEeC,E,EAAI;AAChB,UAAIC,GAAJ;AACAX,MAAAA,CAAC,CAACY,SAAF,CAAYC,OAAZ,CAAoB,UAAAC,QAAQ,EAAI;AAC5B,YAAIC,MAAM,CAACD,QAAQ,CAACE,KAAV,CAAN,KAA2BD,MAAM,CAACL,EAAD,CAArC,EAA2C;AACvCC,UAAAA,GAAG,GAAGG,QAAQ,CAACG,IAAf;AACH;AACJ,OAJD;AAKA,aAAON,GAAP;AACH;;;kCAEaO,I,EAAM;AAChB,UAAIC,SAAS,GAAG,EAAhB;AACAD,MAAAA,IAAI,CAACL,OAAL,CAAa,UAAAO,GAAG,EAAI;AAChBD,QAAAA,SAAS,IAAIC,GAAG,GAAG,IAAnB;AACH,OAFD;AAGA,aAAOD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmBF,SAAS,CAACG,MAAV,GAAmB,CAAtC,CAAP;AACH;;;qCAEgBC,M,EAAQ;AACrB,UAAIA,MAAJ,EAAY;AACR,eAAO,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,aAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;uCAEkBC,Q,EAAU;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAEA,UAAIA,QAAQ,CAACG,YAAb,EAA2B;AACvB,eACI,oBAAC,KAAD;AAAO,UAAA,OAAO,EACV,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAEH,QAAQ,CAACd,EAAzB;AAA6B,YAAA,QAAQ,EAAE,CAACc,QAAQ,CAACD,MAAjD;AAAyD,YAAA,QAAQ,EAAEC,QAAQ,CAACD,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaC,QAAQ,CAACd,EAAtB,CADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAac,QAAQ,CAACI,WAAtB,CAFJ,EAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,KAAKC,eAAL,CAAqBL,QAAQ,CAACM,QAA9B,CAAb,CAHJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaN,QAAQ,CAACO,QAAtB,CAJJ,EAKI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,KAAKC,aAAL,CAAmBR,QAAQ,CAACS,YAA5B,CAAb,CALJ,EAMI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,KAAKC,gBAAL,CAAsBV,QAAQ,CAACD,MAA/B,CAAb,CANJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAa,MAAb,CAPJ,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWI,oBAAC,KAAD;AAAO,UAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEY,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,KAA1B,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,EAGI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHJ,EAII,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJJ,EAKI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,EAMI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BANJ,EAOI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPJ,CADJ,CADJ,EAYI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEF,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,KAA1B,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAab,QAAQ,CAACG,YAAtB,CADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAcH,QAAQ,CAACc,WAAT,KAAyB,EAA1B,GAAgC,KAAKN,aAAL,CAAmBR,QAAQ,CAACc,WAA5B,CAAhC,GAA2E,KAAxF,CAFJ,EAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAad,QAAQ,CAACe,iBAAtB,CAHJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaf,QAAQ,CAACgB,WAAtB,CAJJ,EAKI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAahB,QAAQ,CAACiB,QAAtB,CALJ,EAMI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAajB,QAAQ,CAACkB,eAAT,CAAyBC,wBAAtC,CANJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAanB,QAAQ,CAACkB,eAAT,CAAyBE,KAAtC,CAPJ,CADJ,CAZJ,CAXJ,CADJ;AAsCH,OAvCD,MAuCO;AACH,eACI,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAEpB,QAAQ,CAACd,EAAzB;AAA6B,UAAA,QAAQ,EAAE,CAACc,QAAQ,CAACD,MAAjD;AAAyD,UAAA,QAAQ,EAAEC,QAAQ,CAACD,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaC,QAAQ,CAACd,EAAtB,CADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAac,QAAQ,CAACI,WAAtB,CAFJ,EAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAa,KAAKC,eAAL,CAAqBL,QAAQ,CAACM,QAA9B,CAAb,CAHJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaN,QAAQ,CAACO,QAAtB,CAJJ,EAKI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAa,KAAKC,aAAL,CAAmBR,QAAQ,CAACS,YAA5B,CAAb,CALJ,EAMI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAa,KAAKC,gBAAL,CAAsBV,QAAQ,CAACD,MAA/B,CAAb,CANJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAa,OAAb,CAPJ,CADJ;AAWH;AACJ;;;qCAEgBsB,K,EAAOrB,Q,EAAU;AAC9B,UAAIsB,OAAO,GAAG,KAAK1C,KAAL,CAAWI,WAAzB;AACAsC,MAAAA,OAAO,CAACC,IAAR,CAAa,KAAKC,kBAAL,CAAwBxB,QAAxB,CAAb;AACA,WAAKyB,QAAL,CAAc;AAAEzC,QAAAA,WAAW,EAAEsC;AAAf,OAAd;AACH;;;gDAE2B;AACxB,UAAMI,QAAQ,GAAG,KAAK/C,KAAL,CAAWgD,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AACApD,MAAAA,KAAK,CAACqD,8BAAN,CAAqCJ,QAArC,EAA+C,KAAKK,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAA/C;AACH;;;wCAEmB;AAChB,WAAKC,yBAAL;AACH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,EAGI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAII,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ,EAMI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,EAOI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPJ,CADJ,CADJ,EAeI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKrD,KAAL,CAAWI,WAFhB,CAfJ,CADJ,CADJ;AAyBH;;;;EAxI4BZ,KAAK,CAAC8D,S;;AA2IvC,eAAexD,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table, Icon, Popup } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nimport Tasks from \"./Tasks\"\nimport \"./TaskTableComponent.css\"\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: [],\n            taskOptions: [],\n        }\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (Number(taskType.value) === Number(id)) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    formatTaskIds(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return <Icon name='checkmark' />\n        }\n        return <Icon name='attention' />\n    }\n\n    getDecisionOptions(taskData) {\n        console.log(taskData);\n\n        if (taskData.decisionType) {\n            return (\n                <Popup trigger={\n                    <Table.Row key={taskData.id} negative={!taskData.status} positive={taskData.status}>\n                        <Table.Cell>{taskData.id}</Table.Cell>\n                        <Table.Cell>{taskData.description}</Table.Cell>\n                        <Table.Cell>{this.getTaskEnumById(taskData.tasktype)}</Table.Cell>\n                        <Table.Cell>{taskData.resource}</Table.Cell>\n                        <Table.Cell>{this.formatTaskIds(taskData.requirements)}</Table.Cell>\n                        <Table.Cell>{this.formatTaskStatus(taskData.status)}</Table.Cell>\n                        <Table.Cell>{\"true\"}</Table.Cell>\n                    </Table.Row>\n                }>\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row key={Math.ceil(Math.random() * 10000)}>\n                                <Table.HeaderCell>Decision Type</Table.HeaderCell>\n                                <Table.HeaderCell>Competitors</Table.HeaderCell>\n                                <Table.HeaderCell>Decision Completed</Table.HeaderCell>\n                                <Table.HeaderCell>Gateway Type</Table.HeaderCell>\n                                <Table.HeaderCell>Operator</Table.HeaderCell>\n                                <Table.HeaderCell>Global Payload ID</Table.HeaderCell>\n                                <Table.HeaderCell>Local Value</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row key={Math.ceil(Math.random() * 10000)}>\n                                <Table.Cell>{taskData.decisionType}</Table.Cell>\n                                <Table.Cell>{(taskData.competitors === []) ? this.formatTaskIds(taskData.competitors) : \"---\"}</Table.Cell>\n                                <Table.Cell>{taskData.decisionCompleted}</Table.Cell>\n                                <Table.Cell>{taskData.gatewayType}</Table.Cell>\n                                <Table.Cell>{taskData.operator}</Table.Cell>\n                                <Table.Cell>{taskData.integerOperants.idtoglobalintegerpayload}</Table.Cell>\n                                <Table.Cell>{taskData.integerOperants.local}</Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n                </Popup>\n            );\n        } else {\n            return (\n                <Table.Row key={taskData.id} negative={!taskData.status} positive={taskData.status}>\n                    <Table.Cell>{taskData.id}</Table.Cell>\n                    <Table.Cell>{taskData.description}</Table.Cell>\n                    <Table.Cell>{this.getTaskEnumById(taskData.tasktype)}</Table.Cell>\n                    <Table.Cell>{taskData.resource}</Table.Cell>\n                    <Table.Cell>{this.formatTaskIds(taskData.requirements)}</Table.Cell>\n                    <Table.Cell>{this.formatTaskStatus(taskData.status)}</Table.Cell>\n                    <Table.Cell>{\"false\"}</Table.Cell>\n                </Table.Row>\n            );\n        }\n    }\n\n    taskDataCallback(index, taskData) {\n        let options = this.state.taskOptions;\n        options.push(this.getDecisionOptions(taskData));\n        this.setState({ taskOptions: options });\n    }\n\n    createTableContentPromise() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        Tasks.getAllTasksWithDecisionPromise(contract, this.taskDataCallback.bind(this));\n    }\n\n    componentDidMount() {\n        this.createTableContentPromise();\n    }\n\n    render() {\n        return (\n            <div className=\"task-table\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Task Id</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                            <Table.HeaderCell>Owner</Table.HeaderCell>\n                            <Table.HeaderCell>Requirements</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Decision Type</Table.HeaderCell>\n\n\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n\n                        {this.state.taskOptions}\n\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}