{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Tasks =\n/*#__PURE__*/\nfunction () {\n  function Tasks(drizzleState, getTasksDataKey, getTaskByIdDataKeys) {\n    _classCallCheck(this, Tasks);\n\n    this.drizzleState = drizzleState;\n    this.getTasksDataKey = getTasksDataKey;\n    this.getTaskByIdDataKeys = getTaskByIdDataKeys;\n  }\n\n  _createClass(Tasks, null, [{\n    key: \"getTaskIds\",\n    value: function getTaskIds(drizzleState, getTasksDataKey) {\n      var ccmState = this.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[this.getTasksDataKey];\n\n      if (tasksObject) {\n        return tasksObject.value;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getAllTasks\",\n    value: function getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n      var tasks = [];\n      var ccmState = this.drizzleState.contracts.ContractCollaborationManager;\n      var taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n      if (taskIds) {\n        for (var index = 0; index < taskIds.length; index++) {\n          var tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n\n          if (tasksObject) {\n            tasks.push({\n              description: tasksObject.value.description,\n              tasktype: tasksObject.value.tasktype,\n              stateowner: tasksObject.value.stateowner,\n              requirements: tasksObject.value.requirements,\n              status: tasksObject.value.status,\n              id: index\n            });\n          }\n        }\n      }\n\n      return tasks;\n    }\n  }]);\n\n  return Tasks;\n}();\n\nexport default Tasks;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/Tasks.js"],"names":["Tasks","drizzleState","getTasksDataKey","getTaskByIdDataKeys","ccmState","contracts","ContractCollaborationManager","tasksObject","getTasks","value","tasks","taskIds","getTaskIds","index","length","getTaskById","push","description","tasktype","stateowner","requirements","status","id"],"mappings":";;;IAAMA,K;;;AACF,iBAAYC,YAAZ,EAA0BC,eAA1B,EAA2CC,mBAA3C,EAAgE;AAAA;;AAC5D,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACH;;;;+BACiBF,Y,EAAcC,e,EAAiB;AAC7C,UAAME,QAAQ,GAAG,KAAKH,YAAL,CAAkBI,SAAlB,CAA4BC,4BAA7C;AACA,UAAMC,WAAW,GAAGH,QAAQ,CAACI,QAAT,CAAkB,KAAKN,eAAvB,CAApB;;AAEA,UAAIK,WAAJ,EAAiB;AACb,eAAOA,WAAW,CAACE,KAAnB;AACH;;AACD,aAAO,EAAP;AACH;;;gCAEkBR,Y,EAAcE,mB,EAAqBD,e,EAAiB;AACnE,UAAIQ,KAAK,GAAG,EAAZ;AACA,UAAMN,QAAQ,GAAG,KAAKH,YAAL,CAAkBI,SAAlB,CAA4BC,4BAA7C;AACA,UAAMK,OAAO,GAAG,KAAKC,UAAL,CAAgBX,YAAhB,EAA8BC,eAA9B,CAAhB;;AAEA,UAAIS,OAAJ,EAAa;AACT,aAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,OAAO,CAACG,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;AACjD,cAAMN,WAAW,GAAGH,QAAQ,CAACW,WAAT,CAAqBZ,mBAAmB,CAACU,KAAD,CAAxC,CAApB;;AACA,cAAIN,WAAJ,EAAiB;AACbG,YAAAA,KAAK,CAACM,IAAN,CAAW;AACPC,cAAAA,WAAW,EAAEV,WAAW,CAACE,KAAZ,CAAkBQ,WADxB;AAEPC,cAAAA,QAAQ,EAAEX,WAAW,CAACE,KAAZ,CAAkBS,QAFrB;AAGPC,cAAAA,UAAU,EAAEZ,WAAW,CAACE,KAAZ,CAAkBU,UAHvB;AAIPC,cAAAA,YAAY,EAAEb,WAAW,CAACE,KAAZ,CAAkBW,YAJzB;AAKPC,cAAAA,MAAM,EAAEd,WAAW,CAACE,KAAZ,CAAkBY,MALnB;AAMPC,cAAAA,EAAE,EAAET;AANG,aAAX;AAQH;AACJ;AACJ;;AACD,aAAOH,KAAP;AACH;;;;;;AAEL,eAAeV,KAAf","sourcesContent":["class Tasks {\n    constructor(drizzleState, getTasksDataKey, getTaskByIdDataKeys) {\n        this.drizzleState = drizzleState;\n        this.getTasksDataKey = getTasksDataKey;\n        this.getTaskByIdDataKeys = getTaskByIdDataKeys;\n    }\n    static getTaskIds(drizzleState, getTasksDataKey) {\n        const ccmState = this.drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[this.getTasksDataKey];\n\n        if (tasksObject) {\n            return tasksObject.value;\n        }\n        return [];\n    }\n\n    static getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n        let tasks = [];\n        const ccmState = this.drizzleState.contracts.ContractCollaborationManager;\n        const taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n        if (taskIds) {\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n                if (tasksObject) {\n                    tasks.push({\n                        description: tasksObject.value.description,\n                        tasktype: tasksObject.value.tasktype,\n                        stateowner: tasksObject.value.stateowner,\n                        requirements: tasksObject.value.requirements,\n                        status: tasksObject.value.status,\n                        id: index,\n                    });\n                }\n            }\n        }\n        return tasks;\n    }\n}\nexport default Tasks"]},"metadata":{},"sourceType":"module"}