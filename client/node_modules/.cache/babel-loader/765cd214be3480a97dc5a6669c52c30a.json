{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null\n    };\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var cells = [];\n\n      if (tasksObject) {\n        var taskIds = tasksObject.value;\n\n        for (var index = 0; index < taskIds.length; index++) {\n          console.log(this.props.drizzle.contracts.ContractCollaborationManager.methods.getTaskById.cacheCall(taskIds[index]));\n          cells.push(React.createElement(Table.Row, {\n            key: taskIds[index],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19\n            },\n            __self: this\n          }, taskIds[index])));\n        }\n      }\n\n      console.log(\"createTables\");\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      console.log(contract.methods.getTaskById.cacheCall(0));\n      this.setState({\n        getTasksDataKey: getTasksDataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.getTasksDataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","TaskTableComponent","props","state","getTasksDataKey","tasksObject","cells","taskIds","value","index","length","console","log","drizzle","contracts","ContractCollaborationManager","methods","getTaskById","cacheCall","push","contract","getTasks","setState","drizzleState","newCells","createTableContent","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AADR,KAAb;AAFe;AAKlB;;;;uCACkBC,W,EAAa;AAC5B,UAAMC,KAAK,GAAG,EAAd;;AACA,UAAID,WAAJ,EAAiB;AACb,YAAME,OAAO,GAAGF,WAAW,CAACG,KAA5B;;AAEA,aAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,OAAO,CAACG,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;AACjDE,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWW,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA7B,CAA0DC,OAA1D,CAAkEC,WAAlE,CAA8EC,SAA9E,CAAwFX,OAAO,CAACE,KAAD,CAA/F,CAAZ;AACAH,UAAAA,KAAK,CAACa,IAAN,CAAW,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAEZ,OAAO,CAACE,KAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAgC,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaF,OAAO,CAACE,KAAD,CAApB,CAAhC,CAAX;AACH;AACJ;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,aAAQN,KAAR;AACH;;;wCAEmB;AAChB,UAAMc,QAAQ,GAAG,KAAKlB,KAAL,CAAWW,OAAX,CAAmBC,SAAnB,CAA6BC,4BAA9C;AACA,UAAMX,eAAe,GAAGgB,QAAQ,CAACJ,OAAT,CAAiBK,QAAjB,CAA0BH,SAA1B,EAAxB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACJ,OAAT,CAAiBC,WAAjB,CAA6BC,SAA7B,CAAuC,CAAvC,CAAZ;AAEA,WAAKI,QAAL,CAAc;AAAElB,QAAAA,eAAe,EAAfA;AAAF,OAAd;AACH;;;6BAEQ;AAAA,UACGW,4BADH,GACoC,KAAKb,KAAL,CAAWqB,YAAX,CAAwBT,SAD5D,CACGC,4BADH;AAEL,UAAMV,WAAW,GAAGU,4BAA4B,CAACM,QAA7B,CAAsC,KAAKlB,KAAL,CAAWC,eAAjD,CAApB;AACA,UAAMoB,QAAQ,GAAG,KAAKC,kBAAL,CAAwBpB,WAAxB,CAAjB;AACA,aACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,CADJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKmB,QAFL,CAPJ,CADJ;AAeH;;;;EAjD4BzB,KAAK,CAAC2B,S;;AAoDvC,eAAezB,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n        }\n    }\n    createTableContent(tasksObject) {\n        const cells = []\n        if (tasksObject) {\n            const taskIds = tasksObject.value;\n\n            for (let index = 0; index < taskIds.length; index++) {\n                console.log(this.props.drizzle.contracts.ContractCollaborationManager.methods.getTaskById.cacheCall(taskIds[index]));\n                cells.push(<Table.Row key={taskIds[index]}><Table.Cell>{taskIds[index]}</Table.Cell></Table.Row>);\n            }\n        }\n        console.log(\"createTables\");\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        console.log(contract.methods.getTaskById.cacheCall(0));\n\n        this.setState({ getTasksDataKey });\n    }\n\n    render() {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.getTasksDataKey];\n        const newCells = this.createTableContent(tasksObject);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}