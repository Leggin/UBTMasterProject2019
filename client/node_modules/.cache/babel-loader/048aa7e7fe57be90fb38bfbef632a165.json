{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown, Button, Input } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\",\n      intPayloadOptions: [],\n      stringPayloadOptions: [{\n        key: 1,\n        value: 2,\n        text: \"ID: 0| Payload: \".concat(3)\n      }],\n      isIntDecision: true,\n      localOperand: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: payload.value,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i); // contract.methods.getGlobalStringPayloadValueById(i).call().then((payload) => {\n          //     console.log(\"payload!!!\", payload);\n          //     let a = []\n          //     a = a.concat(this.state.stringPayloadOptions);\n          //     console.log(\"asdfasdfasdfasdf\", a);\n          //     a = a.push({ key: payload, value: payload, text: `ID: ${i}| Payload: ${payload}` });\n          //     this.setState({ stringPayloadOptions: a });\n          //     //this.setState({ stringPayloadOptions: this.state.stringPayloadOptions.push({ key: payload, value: payload, text: `ID: 0| Payload: ${payload}` }) });\n          // });\n\n          var payload = ccmState.getGlobalStringPayloadValueById[key];\n\n          if (payload) {\n            stringPayloadOptions.push({\n              key: i,\n              value: payload.value,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"addDecision\",\n    value: function addDecision() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n      if (this.state.isIntDecision) {\n        this.addIntDecision(contract);\n      } else {\n        this.addStringDecision(contract);\n      }\n    }\n  }, {\n    key: \"addIntDecision\",\n    value: function addIntDecision(contract) {\n      //uint _id, GatewayType _gatewaytype, DecisionType _type, \n      //Operator _op, IntegerOperants memory _intoperants, uint[] memory _competitors\n      contract.methods.addIntDecisionToTaskId.cacheSend({\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"addStringDecision\",\n    value: function addStringDecision(contract) {\n      contract.methods.addStringDecisionToTaskId.cacheSend({\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var _this4 = this;\n\n      var bg = React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick() {\n          _this4.setState({\n            isIntDecision: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Int\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isIntDecision ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this4.setState({\n            isIntDecision: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"String\")));\n      return bg;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"decision-global-op-local\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, this.renderButtonGroup(), this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Int Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      })), !this.state.isIntDecision && React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global String Payload\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operator-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Operator\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            selectedOperator: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: c.OPERATORS,\n        value: this.state.selectedOperator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-operand-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Input, {\n        placeholder: \"Local Value\",\n        onChange: function onChange(event, data) {\n          _this5.setState({\n            localOperand: data.value\n          });\n        },\n        value: this.state.localOperand,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.addDecision.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Add Decision\"))));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Button","Input","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","intPayloadOptions","stringPayloadOptions","key","value","text","isIntDecision","localOperand","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","i","push","getTaskById","setIntegerPayloadOptions","setStringPayloadOptions","setState","call","then","count","getGlobalIntPayloadValueById","payload","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","tasks","getAllTasks","options","forEach","task","id","description","addIntDecision","addStringDecision","addIntDecisionToTaskId","cacheSend","from","defaultAccount","gas","addStringDecisionToTaskId","bg","a","b","taskOptions","getTaskDropdownOptions","event","data","renderButtonGroup","selectedIntPayload","selectedStringPayload","selectedOperator","OPERATORS","addDecision","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown, Button, Input } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\",\n            intPayloadOptions: [],\n            stringPayloadOptions: [{ key: 1, value: 2, text: `ID: 0| Payload: ${3}` }],\n            isIntDecision: true,\n            localOperand: \"\",\n        }\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n\n        });\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n\n                // contract.methods.getGlobalStringPayloadValueById(i).call().then((payload) => {\n                //     console.log(\"payload!!!\", payload);\n\n                //     let a = []\n                //     a = a.concat(this.state.stringPayloadOptions);\n                //     console.log(\"asdfasdfasdfasdf\", a);\n\n                //     a = a.push({ key: payload, value: payload, text: `ID: ${i}| Payload: ${payload}` });\n                //     this.setState({ stringPayloadOptions: a });\n                //     //this.setState({ stringPayloadOptions: this.state.stringPayloadOptions.push({ key: payload, value: payload, text: `ID: 0| Payload: ${payload}` }) });\n\n                // });\n\n                let payload = ccmState.getGlobalStringPayloadValueById[key];\n                if (payload) {\n                    stringPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n    addDecision() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n        if (this.state.isIntDecision) {\n            this.addIntDecision(contract);\n        }\n        else {\n            this.addStringDecision(contract);\n        }\n    }\n\n    addIntDecision(contract) {\n        //uint _id, GatewayType _gatewaytype, DecisionType _type, \n        //Operator _op, IntegerOperants memory _intoperants, uint[] memory _competitors\n        contract.methods.addIntDecisionToTaskId.cacheSend({\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    addStringDecision(contract) {\n        contract.methods.addStringDecisionToTaskId.cacheSend({\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    renderButtonGroup() {\n        let bg = (<label>\n            <Button.Group>\n                <Button\n\n                    type=\"button\"\n                    color={this.state.isIntDecision ? 'blue' : null}\n                    onClick={() => {\n                        this.setState({ isIntDecision: true });\n                    }}>Int</Button>\n                <Button.Or />\n                <Button\n\n                    type=\"button\"\n                    color={!this.state.isIntDecision ? 'blue' : null}\n                    onClick={(a, b) => {\n                        this.setState({ isIntDecision: false });\n                    }}>String</Button>\n            </Button.Group>\n        </label>);\n        return bg;\n    }\n\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <div className=\"decision-global-op-local\">\n                    {this.renderButtonGroup()}\n\n                    {this.state.isIntDecision && <label className=\"select-payload-label\">\n                        <Dropdown placeholder='Select Global Int Payload' onChange={\n                            (event, data) => {\n                                this.setState({ selectedIntPayload: data.value });\n                            }} fluid selection options={this.state.intPayloadOptions} value={this.state.selectedIntPayload} />\n                    </label>}\n\n                    {!this.state.isIntDecision && <label className=\"select-payload-label\">\n                        < Dropdown placeholder='Select Global String Payload' onChange={\n                            (event, data) => {\n                                this.setState({ selectedStringPayload: data.value });\n                            }} fluid selection options={this.state.stringPayloadOptions} value={this.state.selectedStringPayload} />\n                    </label >}\n\n                    <label className=\"select-operator-label\">\n                        <Dropdown placeholder='Select Operator' onChange={\n                            (event, data) => {\n                                this.setState({ selectedOperator: data.value });\n                            }} fluid selection options={c.OPERATORS} value={this.state.selectedOperator} />\n                    </label>\n\n                    <label className=\"select-operand-label\">\n                        <Input placeholder='Local Value' onChange={\n                            (event, data) => {\n                                this.setState({ localOperand: data.value });\n                            }} value={this.state.localOperand} />\n                    </label>\n                    <label >\n                        <button type=\"button\" onClick={this.addDecision.bind(this)}>Add Decision</button>\n                    </label>\n\n                </div>\n\n                {/* <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button> */}\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}