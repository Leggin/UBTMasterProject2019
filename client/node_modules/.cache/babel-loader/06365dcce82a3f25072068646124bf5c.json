{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKeyGetTasks: null,\n      dataKey: null,\n      tasksStatus: [],\n      testkey: null\n    };\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var cells = [];\n\n      if (tasksObject) {\n        var tasks = tasksObject.value;\n        tasks.forEach(function (task) {\n          var getTaskByIdDataKey = contract.methods.getTaskById.cacheCall(task);\n          var tasksObject = ContractCollaborationManager.getTasks[getTaskByIdDataKey];\n          cells.push(React.createElement(Table.Row, {\n            key: task,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, React.createElement(Table.Cell, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, task)));\n        });\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getTasks.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Task Id\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","TaskTableComponent","props","state","stackId","dataKeyGetTasks","dataKey","tasksStatus","testkey","tasksObject","ContractCollaborationManager","drizzleState","contracts","cells","tasks","value","forEach","task","getTaskByIdDataKey","contract","methods","getTaskById","cacheCall","getTasks","push","drizzle","setState","newCells","createTableContent","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;IAEMC,kB;;;;;AAEF,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,IADA;AAETC,MAAAA,eAAe,EAAE,IAFR;AAGTC,MAAAA,OAAO,EAAE,IAHA;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,OAAO,EAAE;AALA,KAAb;AAFe;AASlB;;;;uCACkBC,W,EAAa;AAAA,UACpBC,4BADoB,GACa,KAAKR,KAAL,CAAWS,YAAX,CAAwBC,SADrC,CACpBF,4BADoB;AAE5B,UAAMG,KAAK,GAAG,EAAd;;AACA,UAAIJ,WAAJ,EAAiB;AACb,YAAMK,KAAK,GAAGL,WAAW,CAACM,KAA1B;AAEAD,QAAAA,KAAK,CAACE,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClB,cAAMC,kBAAkB,GAAGC,QAAQ,CAACC,OAAT,CAAiBC,WAAjB,CAA6BC,SAA7B,CAAuCL,IAAvC,CAA3B;AACA,cAAMR,WAAW,GAAGC,4BAA4B,CAACa,QAA7B,CAAsCL,kBAAtC,CAApB;AAEAL,UAAAA,KAAK,CAACW,IAAN,CAAW,oBAAC,KAAD,CAAO,GAAP;AAAW,YAAA,GAAG,EAAEP,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAsB,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAaA,IAAb,CAAtB,CAAX;AACH,SALD;AAMH;;AACD,aAAQJ,KAAR;AACH;;;wCAGmB;AAAA,UACRY,OADQ,GACI,KAAKvB,KADT,CACRuB,OADQ;AAEhB,UAAMN,QAAQ,GAAGM,OAAO,CAACb,SAAR,CAAkBF,4BAAnC,CAFgB,CAGhB;;AACA,UAAMJ,OAAO,GAAGa,QAAQ,CAACC,OAAT,CAAiBG,QAAjB,CAA0BD,SAA1B,EAAhB,CAJgB,CAMhB;AACA;;AACA,WAAKI,QAAL,CAAc;AAAEpB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AAAA,UAEGI,4BAFH,GAEoC,KAAKR,KAAL,CAAWS,YAAX,CAAwBC,SAF5D,CAEGF,4BAFH;AAGL,UAAMD,WAAW,GAAGC,4BAA4B,CAACa,QAA7B,CAAsC,KAAKpB,KAAL,CAAWG,OAAjD,CAApB;AACA,UAAMqB,QAAQ,GAAG,KAAKC,kBAAL,CAAwBnB,WAAxB,CAAjB;AACA,aACI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ,CADJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKkB,QAFL,CAPJ,CADJ;AAeH;;;;EA5D4B5B,KAAK,CAAC8B,S;;AA+DvC,eAAe5B,kBAAf","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKeyGetTasks: null,\n            dataKey: null,\n            tasksStatus: [],\n            testkey: null\n        }\n    }\n    createTableContent(tasksObject) {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const cells = []\n        if (tasksObject) {\n            const tasks = tasksObject.value;\n\n            tasks.forEach(task => {\n                const getTaskByIdDataKey = contract.methods.getTaskById.cacheCall(task);\n                const tasksObject = ContractCollaborationManager.getTasks[getTaskByIdDataKey];\n\n                cells.push(<Table.Row key={task}><Table.Cell>{task}</Table.Cell></Table.Row>);\n            });\n        }\n        return (cells);\n    }\n\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getTasks.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newCells = this.createTableContent(tasksObject);\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}