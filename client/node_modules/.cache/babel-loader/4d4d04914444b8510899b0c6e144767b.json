{"ast":null,"code":"import _regeneratorRuntime from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Tasks =\n/*#__PURE__*/\nfunction () {\n  function Tasks() {\n    _classCallCheck(this, Tasks);\n  }\n\n  _createClass(Tasks, null, [{\n    key: \"getTaskIds\",\n    value: function getTaskIds(drizzleState, getTasksDataKey) {\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[getTasksDataKey];\n\n      if (tasksObject) {\n        return tasksObject.value;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getAllTasks\",\n    value: function getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n      var tasks = [];\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n      if (taskIds) {\n        for (var index = 0; index < taskIds.length; index++) {\n          var tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n\n          if (tasksObject) {\n            tasks.push({\n              description: tasksObject.value.description,\n              tasktype: tasksObject.value.tasktype,\n              resource: tasksObject.value.resource,\n              requirements: tasksObject.value.requirements,\n              status: tasksObject.value.status,\n              id: index\n            });\n          }\n        }\n      }\n\n      return tasks;\n    }\n  }, {\n    key: \"getAllTasksPromise\",\n    value: function getAllTasksPromise(contract, taskCallback) {\n      contract.methods.getTasks().call().then(function (taskIds) {\n        taskIds.forEach(function (taskId) {\n          contract.methods.getTaskById(taskId).call().then(function (task) {\n            var result = {\n              description: task.description,\n              tasktype: task.tasktype,\n              resource: task.resource,\n              requirements: task.requirements,\n              status: task.status,\n              id: taskId\n            };\n            taskCallback(taskId, result);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getAllTasksWithDecisionPromise\",\n    value: function () {\n      var _getAllTasksWithDecisionPromise = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(contract, taskCallback) {\n        var taskIds;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return contract.methods.getTasks().call();\n\n              case 2:\n                taskIds = _context2.sent;\n                taskIds.forEach(\n                /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(taskId) {\n                    var task, result, decisionExists, decisionData;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return contract.methods.getTaskById(taskId).call();\n\n                          case 2:\n                            task = _context.sent;\n                            result = {\n                              description: task.description,\n                              tasktype: task.tasktype,\n                              resource: task.resource,\n                              requirements: task.requirements,\n                              status: task.status,\n                              id: taskId\n                            };\n                            _context.next = 6;\n                            return contract.methods.testIfDecisionExists(taskId).call();\n\n                          case 6:\n                            decisionExists = _context.sent;\n\n                            if (!decisionExists) {\n                              _context.next = 12;\n                              break;\n                            }\n\n                            _context.next = 10;\n                            return contract.methods.getIntegerDecision(taskId).call();\n\n                          case 10:\n                            decisionData = _context.sent;\n                            console.log(decisionData);\n\n                          case 12:\n                            taskCallback(taskId, result);\n\n                          case 13:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAllTasksWithDecisionPromise(_x, _x2) {\n        return _getAllTasksWithDecisionPromise.apply(this, arguments);\n      }\n\n      return getAllTasksWithDecisionPromise;\n    }()\n  }]);\n\n  return Tasks;\n}();\n\nexport default Tasks;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/Tasks.js"],"names":["Tasks","drizzleState","getTasksDataKey","ccmState","contracts","ContractCollaborationManager","tasksObject","getTasks","value","getTaskByIdDataKeys","tasks","taskIds","getTaskIds","index","length","getTaskById","push","description","tasktype","resource","requirements","status","id","contract","taskCallback","methods","call","then","forEach","taskId","task","result","testIfDecisionExists","decisionExists","getIntegerDecision","decisionData","console","log"],"mappings":"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","sourcesContent":["class Tasks {\n\n    static getTaskIds(drizzleState, getTasksDataKey) {\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[getTasksDataKey];\n\n        if (tasksObject) {\n            return tasksObject.value;\n        }\n        return [];\n    }\n\n    static getAllTasks(drizzleState, getTaskByIdDataKeys, getTasksDataKey) {\n        let tasks = [];\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const taskIds = this.getTaskIds(drizzleState, getTasksDataKey);\n\n        if (taskIds) {\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[getTaskByIdDataKeys[index]];\n                if (tasksObject) {\n                    tasks.push({\n                        description: tasksObject.value.description,\n                        tasktype: tasksObject.value.tasktype,\n                        resource: tasksObject.value.resource,\n                        requirements: tasksObject.value.requirements,\n                        status: tasksObject.value.status,\n                        id: index,\n                    });\n                }\n            }\n        }\n        return tasks;\n    }\n\n    static getAllTasksPromise(contract, taskCallback) {\n        contract.methods.getTasks().call().then((taskIds) => {\n            taskIds.forEach(taskId => {\n                contract.methods.getTaskById(taskId).call().then((task) => {\n                    let result = {\n                        description: task.description,\n                        tasktype: task.tasktype,\n                        resource: task.resource,\n                        requirements: task.requirements,\n                        status: task.status,\n                        id: taskId,\n                    }\n                    taskCallback(taskId, result);\n                });\n            });\n        });\n    }\n\n    static async getAllTasksWithDecisionPromise(contract, taskCallback) {\n        let taskIds = await contract.methods.getTasks().call();\n\n        taskIds.forEach(async taskId => {\n            let task = await contract.methods.getTaskById(taskId).call();\n\n            let result = {\n                description: task.description,\n                tasktype: task.tasktype,\n                resource: task.resource,\n                requirements: task.requirements,\n                status: task.status,\n                id: taskId,\n            }\n            let decisionExists = await contract.methods.testIfDecisionExists(taskId).call();\n            if (decisionExists) {\n                let decisionData = await contract.methods.getIntegerDecision(taskId).call();\n                console.log(decisionData);\n            }\n            taskCallback(taskId, result);\n        });\n    }\n}\nexport default Tasks"]},"metadata":{},"sourceType":"module"}