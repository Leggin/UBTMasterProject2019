{"ast":null,"code":"import _defineProperty from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTask.js\";\nimport React from \"react\";\nimport Multiselect from 'multiselect-dropdown-react';\n\nvar CreateTask =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateTask, _React$Component);\n\n  function CreateTask(props) {\n    var _this;\n\n    _classCallCheck(this, CreateTask);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateTask).call(this, props));\n\n    _this.handleCreateTask = function () {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.createTask.cacheSend(_this.state.activity, _this.state.address, _this.state.tasktype, _this.state.requirements, {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); //console.log(this.state.requirements);\n      // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.state = {\n      stackId: null,\n      taskTypes: [\"Task\", \"Parallel\", \"OR\", \"EXCLUSIVE\"],\n      activity: '',\n      address: '',\n      tasktype: '',\n      requirements: [],\n      dataKey: null,\n      tasks: null,\n      reqoptions: []\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleRequirements = _this.handleRequirements.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.handleCreateTask = this.handleCreateTask.bind(this);\n\n    return _this;\n  }\n\n  _createClass(CreateTask, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      var dataKey = contract.methods.getTasks.cacheCall();\n      this.setState({\n        dataKey: dataKey\n      }); //console.log(drizzle.web3);\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(tasksObject) {\n      var optionlist = [];\n\n      if (tasksObject) {\n        for (var i = 0; i < tasksObject.value.length; i++) {\n          var option = {\n            value: parseInt(tasksObject.value[i]),\n            name: tasksObject.value[i] //console.log(option);\n\n          };\n          optionlist.push(option);\n        }\n      }\n\n      return optionlist;\n    }\n  }, {\n    key: \"handleRequirements\",\n    value: function handleRequirements(req) {\n      //console.log(req);\n      this.setState({\n        requirements: req\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value)); //console.log(this.state.reqoptions);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      console.log(\"Tasks are:\", tasksObject);\n      var options = this.updateOptions(tasksObject);\n      console.log(\"new options\", options);\n      var blub = [{\n        value: 10,\n        name: \"HARALD\"\n      }, {\n        value: 1120,\n        name: \"Schmidt\"\n      }];\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Create Task\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \" Activity\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"activity\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \" Address:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \" Tasktype:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"tasktype\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \" Requirements:\", React.createElement(Multiselect, {\n        options: optoins,\n        onSelectOptions: this.handleRequirements,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CreateTask;\n}(React.Component);\n\nexport default CreateTask;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTask.js"],"names":["React","Multiselect","CreateTask","props","handleCreateTask","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","stackId","methods","createTask","cacheSend","state","activity","address","tasktype","requirements","from","accounts","gas","setState","taskTypes","dataKey","tasks","reqoptions","handleChange","bind","handleRequirements","getTasks","cacheCall","tasksObject","optionlist","i","value","length","option","parseInt","name","push","req","evt","target","console","log","options","updateOptions","blub","optoins","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;IAEMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAgDnBC,gBAhDmB,GAgDA,YAAM;AAAA,wBACa,MAAKD,KADlB;AAAA,UACbE,OADa,eACbA,OADa;AAAA,UACJC,YADI,eACJA,YADI;AAErB,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFqB,CAIrB;;AACA,UAAMC,OAAO,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,UAAjB,CAA4BC,SAA5B,CAAsC,MAAKC,KAAL,CAAWC,QAAjD,EACZ,MAAKD,KAAL,CAAWE,OADC,EACQ,MAAKF,KAAL,CAAWG,QADnB,EAC6B,MAAKH,KAAL,CAAWI,YADxC,EACsD;AAC9DC,QAAAA,IAAI,EAAEb,YAAY,CAACc,QAAb,CAAsB,CAAtB,CADwD;AAE9DC,QAAAA,GAAG,EAAE;AAFyD,OADtD,CAAhB,CALqB,CAUrB;AACA;;AACA,YAAKC,QAAL,CAAc;AAAEZ,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH,KA7DkB;;AAEf,UAAKI,KAAL,GAAa;AACTJ,MAAAA,OAAO,EAAE,IADA;AAETa,MAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,IAArB,EAA2B,WAA3B,CAFF;AAGTR,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,OAAO,EAAE,EAJA;AAKTC,MAAAA,QAAQ,EAAE,EALD;AAMTC,MAAAA,YAAY,EAAE,EANL;AAOTM,MAAAA,OAAO,EAAE,IAPA;AAQTC,MAAAA,KAAK,EAAE,IARE;AASTC,MAAAA,UAAU,EAAE;AATH,KAAb;AAWA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBD,IAAxB,uDAA1B,CAde,CAef;;AAfe;AAgBlB;;;;wCAEmB;AAAA,UACRvB,OADQ,GACI,KAAKF,KADT,CACRE,OADQ;AAEhB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC;AACA,UAAMe,OAAO,GAAGjB,QAAQ,CAACI,OAAT,CAAiBmB,QAAjB,CAA0BC,SAA1B,EAAhB;AACA,WAAKT,QAAL,CAAc;AAAEE,QAAAA,OAAO,EAAPA;AAAF,OAAd,EAJgB,CAKhB;AACH;;;kCAEaQ,W,EAAa;AACvB,UAAMC,UAAU,GAAG,EAAnB;;AACA,UAAID,WAAJ,EAAiB;AACb,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,KAAZ,CAAkBC,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AAC/C,cAAIG,MAAM,GAAG;AAAEF,YAAAA,KAAK,EAAEG,QAAQ,CAACN,WAAW,CAACG,KAAZ,CAAkBD,CAAlB,CAAD,CAAjB;AAAyCK,YAAAA,IAAI,EAAEP,WAAW,CAACG,KAAZ,CAAkBD,CAAlB,CAA/C,CACb;;AADa,WAAb;AAEAD,UAAAA,UAAU,CAACO,IAAX,CAAgBH,MAAhB;AACH;AACJ;;AAED,aAAOJ,UAAP;AACH;;;uCACkBQ,G,EAAK;AACpB;AACA,WAAKnB,QAAL,CAAc;AAAEJ,QAAAA,YAAY,EAAEuB;AAAhB,OAAd;AACH;;;iCAEYC,G,EAAK;AACd,WAAKpB,QAAL,qBAAiBoB,GAAG,CAACC,MAAJ,CAAWJ,IAA5B,EAAmCG,GAAG,CAACC,MAAJ,CAAWR,KAA9C,GADc,CAEd;AACH;;;6BAiBQ;AAAA,UACG1B,4BADH,GACoC,KAAKN,KAAL,CAAWG,YAAX,CAAwBE,SAD5D,CACGC,4BADH;AAEL,UAAMuB,WAAW,GAAGvB,4BAA4B,CAACqB,QAA7B,CAAsC,KAAKhB,KAAL,CAAWU,OAAjD,CAApB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bb,WAA1B;AAEA,UAAMc,OAAO,GAAG,KAAKC,aAAL,CAAmBf,WAAnB,CAAhB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,OAA3B;AAEA,UAAME,IAAI,GAAG,CAAC;AAAEb,QAAAA,KAAK,EAAE,EAAT;AAAaI,QAAAA,IAAI,EAAE;AAAnB,OAAD,EAAgC;AAAEJ,QAAAA,KAAK,EAAE,IAAT;AAAeI,QAAAA,IAAI,EAAE;AAArB,OAAhC,CAAb;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKnC,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACK;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AAAmC,QAAA,QAAQ,EAAE,KAAKuB,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,CALJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACK;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,SAAxB;AAAkC,QAAA,QAAQ,EAAE,KAAKA,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,CARJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACK;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AAAmC,QAAA,QAAQ,EAAE,KAAKA,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADL,CAXJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACG,oBAAC,WAAD;AAAa,QAAA,OAAO,EAAEsB,OAAtB;AAA+B,QAAA,eAAe,EAAE,KAAKpB,kBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAdJ,CADJ;AAoBH;;;;EA9FoB7B,KAAK,CAACkD,S;;AAiG/B,eAAehD,UAAf","sourcesContent":["import React from \"react\";\nimport Multiselect from 'multiselect-dropdown-react';\n\nclass CreateTask extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            taskTypes: [\"Task\", \"Parallel\", \"OR\", \"EXCLUSIVE\"],\n            activity: '',\n            address: '',\n            tasktype: '',\n            requirements: [],\n            dataKey: null,\n            tasks: null,\n            reqoptions: []\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleRequirements = this.handleRequirements.bind(this);\n        //this.handleCreateTask = this.handleCreateTask.bind(this);\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        const dataKey = contract.methods.getTasks.cacheCall();\n        this.setState({ dataKey });\n        //console.log(drizzle.web3);\n    }\n\n    updateOptions(tasksObject) {\n        const optionlist = []\n        if (tasksObject) {\n            for (var i = 0; i < tasksObject.value.length; i++) {\n                let option = { value: parseInt(tasksObject.value[i]), name: tasksObject.value[i] }\n                //console.log(option);\n                optionlist.push(option)\n            }\n        }\n\n        return optionlist;\n    }\n    handleRequirements(req) {\n        //console.log(req);\n        this.setState({ requirements: req });\n    }\n\n    handleChange(evt) {\n        this.setState({ [evt.target.name]: evt.target.value });\n        //console.log(this.state.reqoptions);\n    }\n\n    handleCreateTask = () => {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to call the `set` method with `value`\n        const stackId = contract.methods.createTask.cacheSend(this.state.activity,\n            this.state.address, this.state.tasktype, this.state.requirements, {\n                from: drizzleState.accounts[0],\n                gas: 600000\n            });\n        //console.log(this.state.requirements);\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    render() {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        console.log(\"Tasks are:\", tasksObject);\n\n        const options = this.updateOptions(tasksObject);\n        console.log(\"new options\", options);\n\n        const blub = [{ value: 10, name: \"HARALD\" }, { value: 1120, name: \"Schmidt\" }];\n        return (\n            <form>\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Create Task\n                 </button>\n\n                <label> Activity\n                     <input type=\"text\" name=\"activity\" onChange={this.handleChange} />\n                </label>\n                <label> Address:\n                     <input type=\"text\" name=\"address\" onChange={this.handleChange} />\n                </label>\n                <label> Tasktype:\n                     <input type=\"text\" name=\"tasktype\" onChange={this.handleChange} />\n                </label>\n                <label> Requirements:\n                   <Multiselect options={optoins} onSelectOptions={this.handleRequirements} />\n                </label>\n            </form>\n        );\n    }\n}\n\nexport default CreateTask;\n"]},"metadata":{},"sourceType":"module"}