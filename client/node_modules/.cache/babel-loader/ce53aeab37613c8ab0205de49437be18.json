{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\",\n      intPayloadOptions: [],\n      stringPayloadOptions: []\n    };\n    _this.decisionTypes = c.DECISIONTYPES;\n    _this.operator = c.OPERATORS;\n    _this.gatewayTypes = c.GATEWAYTPYES;\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: payload.value,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        var _loop = function _loop(i) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n          contract.methods.getGlobalStringPayloadValueById(i).call().then(function (payload) {\n            _this3.setState({\n              stringPayloadOptions: _this3.state.stringPayloadOptions.push({\n                key: payload,\n                value: payload,\n                text: \"ID: \".concat(i, \" | Payload: \").concat(payload)\n              })\n            });\n          }); // let payload = ccmState.getGlobalStringPayloadValueById[key];\n          // if (payload) {\n          //     stringPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n          // }\n        };\n\n        for (var i = 0; i < count; i++) {\n          _loop(i);\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this4.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this4.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this4.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.state.stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Add Decision\"));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","intPayloadOptions","stringPayloadOptions","decisionTypes","DECISIONTYPES","operator","OPERATORS","gatewayTypes","GATEWAYTPYES","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","value","i","push","getTaskById","setIntegerPayloadOptions","setStringPayloadOptions","setState","call","then","count","key","getGlobalIntPayloadValueById","payload","text","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","tasks","getAllTasks","options","forEach","task","id","description","taskOptions","getTaskDropdownOptions","event","data","selectedIntPayload","selectedStringPayload","handleCreateTask","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\",\n            intPayloadOptions: [],\n            stringPayloadOptions: []\n        }\n        this.decisionTypes = c.DECISIONTYPES;\n        this.operator = c.OPERATORS;\n        this.gatewayTypes = c.GATEWAYTPYES\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n\n        });\n    }\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n\n                contract.methods.getGlobalStringPayloadValueById(i).call().then((payload) => {\n                    this.setState({ stringPayloadOptions: this.state.stringPayloadOptions.push({ key: payload, value: payload, text: `ID: ${i} | Payload: ${payload}` }) });\n\n                });\n\n                // let payload = ccmState.getGlobalStringPayloadValueById[key];\n                // if (payload) {\n                //     stringPayloadOptions.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n                // }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedIntPayload: data.value });\n                        }} fluid selection options={this.state.intPayloadOptions} value={this.state.selectedIntPayload} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedStringPayload: data.value });\n                        }} fluid selection options={this.state.stringPayloadOptions} value={this.state.selectedStringPayload} />\n                </label>\n                {/* \n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label> */}\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}