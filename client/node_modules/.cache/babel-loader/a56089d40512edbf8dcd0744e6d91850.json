{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/SupervisorComponent.js\";\nimport React from \"react\";\nimport { Icon, Label } from 'semantic-ui-react';\nimport \"SupervisorComponent.css\";\n\nvar SupervisorComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SupervisorComponent, _React$Component);\n\n  function SupervisorComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SupervisorComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SupervisorComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      dataKey: null\n    };\n    return _this;\n  }\n\n  _createClass(SupervisorComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods[\"supervisor\"].cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // get the contract state from drizzleState\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager; // using the saved `dataKey`, get the variable we're interested in\n\n      var supervisor = ContractCollaborationManager.supervisor[this.state.dataKey]; // if it exists, then we display its value\n\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Supervisor is:\", React.createElement(\"span\", {\n        className: \"label-span\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"mail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), \" \", supervisor && supervisor.value)));\n    }\n  }]);\n\n  return SupervisorComponent;\n}(React.Component);\n\nexport default SupervisorComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/SupervisorComponent.js"],"names":["React","Icon","Label","SupervisorComponent","state","dataKey","drizzle","props","contract","contracts","ContractCollaborationManager","methods","cacheCall","setState","drizzleState","supervisor","value","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,mBAA5B;AACA,OAAO,yBAAP;;IACMC,mB;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAX,K;;;;;;wCAEY;AAAA,UACRC,OADQ,GACI,KAAKC,KADT,CACRD,OADQ;AAEhB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFgB,CAIhB;;AACA,UAAML,OAAO,GAAGG,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AACL;AADK,UAEGK,4BAFH,GAEoC,KAAKH,KAAL,CAAWO,YAAX,CAAwBL,SAF5D,CAEGC,4BAFH,EAIL;;AACA,UAAMK,UAAU,GAAGL,4BAA4B,CAACK,UAA7B,CAAwC,KAAKX,KAAL,CAAWC,OAAnD,CAAnB,CALK,CAOL;;AACA,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACJ;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,OAC0BU,UAAU,IAAIA,UAAU,CAACC,KADnD,CADJ,CADI,CAAR;AAOH;;;;EA9B6BhB,KAAK,CAACiB,S;;AAiCxC,eAAed,mBAAf","sourcesContent":["import React from \"react\";\nimport { Icon, Label } from 'semantic-ui-react'\nimport \"SupervisorComponent.css\"\nclass SupervisorComponent extends React.Component {\n    state = { dataKey: null };\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods[\"supervisor\"].cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n        // get the contract state from drizzleState\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n\n        // using the saved `dataKey`, get the variable we're interested in\n        const supervisor = ContractCollaborationManager.supervisor[this.state.dataKey];\n\n        // if it exists, then we display its value\n        return (<p>Supervisor is:\n            <span className=\"label-span\">\n                <Label>\n                    <Icon name='mail' /> {supervisor && supervisor.value}\n                </Label>\n            </span>\n        </p>);\n    }\n}\n\nexport default SupervisorComponent;\n"]},"metadata":{},"sourceType":"module"}