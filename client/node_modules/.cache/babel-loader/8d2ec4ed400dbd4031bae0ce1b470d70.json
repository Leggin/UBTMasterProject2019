{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport * as c from './Constants.js';\nimport \"./TaskTableComponent.css\";\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (Number(taskType.value) === Number(id)) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"formatTaskRequirements\",\n    value: function formatTaskRequirements(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return \"Completed\";\n      }\n\n      return \"Not Completed\";\n    }\n  }, {\n    key: \"getAllTasks\",\n    value: function getAllTasks() {\n      var tasks = [];\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n\n      if (tasksObject) {\n        var taskIds = tasksObject.value;\n\n        for (var index = 0; index < taskIds.length; index++) {\n          var _tasksObject = ccmState.getTaskById[this.state.getTaskByIdDataKeys[index]];\n\n          if (_tasksObject) {\n            tasks.push({\n              description: _tasksObject.value.description,\n              tasktype: _tasksObject.value.tasktype,\n              stateowner: _tasksObject.value.stateowner,\n              requirements: _tasksObject.value.requirements,\n              status: _tasksObject.value.status,\n              id: index\n            });\n          }\n        }\n      }\n\n      return tasks;\n    }\n  }, {\n    key: \"createTableContent\",\n    value: function createTableContent() {\n      var _this2 = this;\n\n      var cells = [];\n      getAllTasks().forEach(function (task) {\n        cells.push(React.createElement(Table.Row, {\n          key: task.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, task.id), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, task.description), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, _this2.getTaskEnumById(task.tasktype)), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, task.stateowner), React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, _this2.formatTaskRequirements(task.requirements)), React.createElement(Table.Cell, {\n          error: !task.status,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, _this2.formatTaskStatus(task.status))));\n      });\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var ids = [];\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i < 100; i++) {\n        ids.push(i);\n      }\n\n      ids.forEach(function (id) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n      });\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n      var newCells = this.createTableContent(tasksObject);\n      console.log(this.getAllTasks());\n      return React.createElement(\"div\", {\n        className: \"task-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, newCells)));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","c","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","first","id","res","TASKTYPES","forEach","taskType","Number","value","text","reqs","reqString","req","slice","length","status","tasks","ccmState","drizzleState","contracts","ContractCollaborationManager","tasksObject","getTasks","taskIds","index","getTaskById","push","description","tasktype","stateowner","requirements","cells","getAllTasks","task","getTaskEnumById","formatTaskRequirements","formatTaskStatus","contract","drizzle","methods","cacheCall","ids","i","setState","newCells","createTableContent","console","log","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nimport \"./TaskTableComponent.css\"\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: []\n        }\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (Number(taskType.value) === Number(id)) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    formatTaskRequirements(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return \"Completed\"\n        }\n        return \"Not Completed\"\n    }\n\n    getAllTasks() {\n        let tasks = [];\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n\n        if (tasksObject) {\n            const taskIds = tasksObject.value;\n\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[this.state.getTaskByIdDataKeys[index]];\n                if (tasksObject) {\n                    tasks.push({\n                        description: tasksObject.value.description,\n                        tasktype: tasksObject.value.tasktype,\n                        stateowner: tasksObject.value.stateowner,\n                        requirements: tasksObject.value.requirements,\n                        status: tasksObject.value.status,\n                        id: index,\n                    });\n                }\n            }\n        }\n        return tasks;\n    }\n\n    createTableContent() {\n        let cells = [];\n        getAllTasks().forEach(task => {\n\n\n            cells.push(<Table.Row key={task.id}>\n                <Table.Cell>{task.id}</Table.Cell>\n                <Table.Cell>{task.description}</Table.Cell>\n                <Table.Cell>{this.getTaskEnumById(task.tasktype)}</Table.Cell>\n                <Table.Cell>{task.stateowner}</Table.Cell>\n                <Table.Cell>{this.formatTaskRequirements(task.requirements)}</Table.Cell>\n                <Table.Cell error={!task.status} >{this.formatTaskStatus(task.status)}</Table.Cell>\n            </Table.Row>);\n        });\n\n\n\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n\n        let ids = [];\n        const getTaskByIdDataKeys = [];\n        for (let i = 0; i < 100; i++) {\n            ids.push(i);\n        }\n        ids.forEach(id => {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n        });\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys });\n    }\n\n    render() {\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n\n        const newCells = this.createTableContent(tasksObject);\n        console.log(this.getAllTasks());\n\n        return (\n            <div className=\"task-table\">\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Task Id</Table.HeaderCell>\n                            <Table.HeaderCell>Description</Table.HeaderCell>\n                            <Table.HeaderCell>Type</Table.HeaderCell>\n                            <Table.HeaderCell>Owner</Table.HeaderCell>\n                            <Table.HeaderCell>Requirements</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n\n                        {newCells}\n\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}