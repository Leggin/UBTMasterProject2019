{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/ChangeGlobalPayloadComponent.js\";\nimport React from \"react\";\nimport { Dropdown, Button, Input, Message } from 'semantic-ui-react';\n\nvar ChangeGlobalPayloadComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChangeGlobalPayloadComponent, _React$Component);\n\n  function ChangeGlobalPayloadComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeGlobalPayloadComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeGlobalPayloadComponent).call(this, props));\n\n    _this.handleDismiss = function () {\n      _this.setState({\n        visible: false\n      });\n\n      setTimeout(function () {\n        _this.setState({\n          visible: false\n        });\n      }, 2000);\n    };\n\n    _this.state = {\n      intPayloadOptions: [],\n      stringPayloadOptions: [],\n      isIntPayload: true,\n      newPayload: \"\",\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(ChangeGlobalPayloadComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      this.setIntegerPayloadOptions(contract, ccmState);\n      this.setStringPayloadOptions(contract, ccmState);\n    }\n  }, {\n    key: \"setIntegerPayloadOptions\",\n    value: function setIntegerPayloadOptions(contract, ccmState) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadOptions = [];\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalIntPayloadValueById[key];\n\n          if (payload) {\n            intPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this2.setState({\n          intPayloadOptions: intPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"setStringPayloadOptions\",\n    value: function setStringPayloadOptions(contract, ccmState) {\n      var _this3 = this;\n\n      contract.methods.getGlobalStringPayloadCount().call().then(function (count) {\n        var stringPayloadOptions = [];\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n\n        for (var i = 0; i < count; i++) {\n          var key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n          var payload = ccmState.getGlobalStringPayloadValueById[key];\n\n          if (payload) {\n            stringPayloadOptions.push({\n              key: i,\n              value: i,\n              text: \"ID: \".concat(i, \" | Payload: \").concat(payload.value)\n            });\n          }\n        }\n\n        _this3.setState({\n          stringPayloadOptions: stringPayloadOptions\n        });\n      });\n    }\n  }, {\n    key: \"changePayload\",\n    value: function changePayload() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n      if (this.state.isIntPayload) {\n        this.changeIntPayload(contract);\n      } else {\n        this.changeStringPayload(contract);\n      }\n\n      this.resetInput();\n    }\n  }, {\n    key: \"changeIntPayload\",\n    value: function changeIntPayload(contract) {\n      var _this4 = this;\n\n      var payloadID = this.state.selectedIntPayload;\n\n      if (!isNaN(this.state.newPayload)) {\n        var newPayload = Number(this.state.newPayload);\n        contract.methods.changeGlobalIntPayload.cacheSend(payloadID, newPayload, {\n          from: this.props.defaultAccount,\n          gas: 600000\n        });\n      } else {\n        console.error(\"New Payload Value must be Numerical!\");\n        this.setState({\n          visible: true\n        });\n        setTimeout(function () {\n          _this4.setState({\n            visible: false\n          });\n        }, 8000);\n      }\n    }\n  }, {\n    key: \"changeStringPayload\",\n    value: function changeStringPayload(contract) {\n      var newPayload = Number(this.state.newPayload);\n      var payloadID = this.state.selectedStringPayload;\n      contract.methods.changeGlobalStringPayload.cacheSend(payloadID, newPayload, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      });\n    }\n  }, {\n    key: \"resetInput\",\n    value: function resetInput() {\n      this.setState({\n        selectedIntPayload: \"\",\n        selectedStringPayload: \"\",\n        newPayload: \"\"\n      });\n    }\n  }, {\n    key: \"renderButtonGroup\",\n    value: function renderButtonGroup() {\n      var _this5 = this;\n\n      return React.createElement(\"label\", {\n        className: \"change-payload-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Button.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        color: this.state.isIntPayload ? 'blue' : null,\n        onClick: function onClick() {\n          _this5.setState({\n            isIntPayload: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Int\"), React.createElement(Button.Or, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        color: !this.state.isIntPayload ? 'blue' : null,\n        onClick: function onClick(a, b) {\n          _this5.setState({\n            isIntPayload: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"String\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return React.createElement(\"div\", {\n        className: \"change-payload-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.state.visible && React.createElement(Message, {\n        onDismiss: this.handleDismiss.bind(this),\n        header: \"Error\",\n        content: \"Input must be numerical\",\n        negative: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), this.renderButtonGroup(), this.state.isIntPayload && React.createElement(Dropdown, {\n        className: \"change-payload-item\",\n        placeholder: \"Select Global Integer Payload\",\n        onChange: function onChange(event, data) {\n          _this6.setState({\n            selectedIntPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: this.state.intPayloadOptions,\n        value: this.state.selectedIntPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), !this.state.isIntPayload && React.createElement(Dropdown, {\n        className: \"change-payload-item\",\n        placeholder: \"Select Global String Payload\",\n        onChange: function onChange(event, data) {\n          _this6.setState({\n            selectedStringPayload: data.value\n          });\n        },\n        floating: true,\n        selection: true,\n        options: this.state.stringPayloadOptions,\n        value: this.state.selectedStringPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(Input, {\n        className: \"change-payload-item\",\n        placeholder: \"New Payload\",\n        onChange: function onChange(event, data) {\n          _this6.setState({\n            newPayload: data.value\n          });\n        },\n        value: this.state.newPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"change-payload-item\",\n        type: \"button\",\n        onClick: this.changePayload.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Change Payload\")));\n    }\n  }]);\n\n  return ChangeGlobalPayloadComponent;\n}(React.Component);\n\nexport default ChangeGlobalPayloadComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/ChangeGlobalPayloadComponent.js"],"names":["React","Dropdown","Button","Input","Message","ChangeGlobalPayloadComponent","props","handleDismiss","setState","visible","setTimeout","state","intPayloadOptions","stringPayloadOptions","isIntPayload","newPayload","contract","drizzle","contracts","ContractCollaborationManager","ccmState","drizzleState","setIntegerPayloadOptions","setStringPayloadOptions","methods","getGlobalIntegerPayloadCount","call","then","count","i","key","getGlobalIntPayloadValueById","cacheCall","payload","push","value","text","getGlobalStringPayloadCount","getGlobalStringPayloadValueById","changeIntPayload","changeStringPayload","resetInput","payloadID","selectedIntPayload","isNaN","Number","changeGlobalIntPayload","cacheSend","from","defaultAccount","gas","console","error","selectedStringPayload","changeGlobalStringPayload","a","b","bind","renderButtonGroup","event","data","changePayload","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Dropdown, Button, Input, Message } from 'semantic-ui-react'\n\nclass ChangeGlobalPayloadComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            intPayloadOptions: [],\n            stringPayloadOptions: [],\n            isIntPayload: true,\n            newPayload: \"\",\n            visible: false\n\n        }\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        this.setIntegerPayloadOptions(contract, ccmState);\n        this.setStringPayloadOptions(contract, ccmState);\n    }\n\n    handleDismiss = () => {\n        this.setState({ visible: false });\n\n        setTimeout(() => {\n            this.setState({ visible: false })\n        }, 2000);\n    }\n\n\n    setIntegerPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadOptions = [];\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalIntPayloadValueById.cacheCall(i);\n\n                let payload = ccmState.getGlobalIntPayloadValueById[key];\n                if (payload) {\n                    intPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ intPayloadOptions });\n        });\n    }\n\n    setStringPayloadOptions(contract, ccmState) {\n        contract.methods.getGlobalStringPayloadCount().call().then((count) => {\n            let stringPayloadOptions = [];\n            this.setState({ stringPayloadOptions });\n\n            for (let i = 0; i < count; i++) {\n                let key = contract.methods.getGlobalStringPayloadValueById.cacheCall(i);\n                let payload = ccmState.getGlobalStringPayloadValueById[key];\n                if (payload) {\n                    stringPayloadOptions.push({ key: i, value: i, text: `ID: ${i} | Payload: ${payload.value}` });\n                }\n            }\n            this.setState({ stringPayloadOptions });\n        });\n    }\n\n    changePayload() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n\n        if (this.state.isIntPayload) {\n            this.changeIntPayload(contract)\n        } else {\n            this.changeStringPayload(contract);\n        }\n        this.resetInput();\n    }\n\n    changeIntPayload(contract) {\n        let payloadID = this.state.selectedIntPayload;\n\n        if (!isNaN(this.state.newPayload)) {\n            let newPayload = Number(this.state.newPayload);\n            contract.methods.changeGlobalIntPayload.cacheSend(payloadID, newPayload, {\n                from: this.props.defaultAccount,\n                gas: 600000\n            });\n        } else {\n            console.error(\"New Payload Value must be Numerical!\");\n            this.setState({ visible: true });\n            setTimeout(() => {\n                this.setState({ visible: false })\n            }, 8000);\n        }\n    }\n\n    changeStringPayload(contract) {\n        let newPayload = Number(this.state.newPayload);\n        let payloadID = this.state.selectedStringPayload;\n        contract.methods.changeGlobalStringPayload.cacheSend(payloadID, newPayload, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n    }\n\n    resetInput() {\n        this.setState({\n            selectedIntPayload: \"\",\n            selectedStringPayload: \"\",\n            newPayload: \"\"\n        })\n    }\n\n    renderButtonGroup() {\n        return (<label className=\"change-payload-item\">\n            <Button.Group >\n                <Button\n                    type=\"button\"\n                    color={this.state.isIntPayload ? 'blue' : null}\n                    onClick={() => {\n                        this.setState({ isIntPayload: true });\n                    }}>Int</Button>\n                <Button.Or />\n                <Button\n\n                    type=\"button\"\n                    color={!this.state.isIntPayload ? 'blue' : null}\n                    onClick={(a, b) => {\n                        this.setState({ isIntPayload: false });\n                    }}>String</Button>\n            </Button.Group>\n        </label>);\n    }\n\n    render() {\n        return (\n            <div className=\"change-payload-container\">\n                {this.state.visible && <Message\n                    onDismiss={this.handleDismiss.bind(this)}\n                    header='Error'\n                    content='Input must be numerical'\n                    negative\n                />\n                }\n                {this.renderButtonGroup()}\n                {\n                    this.state.isIntPayload &&\n                    <Dropdown className=\"change-payload-item\" placeholder='Select Global Integer Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedIntPayload: data.value });\n                        }} floating selection options={this.state.intPayloadOptions} value={this.state.selectedIntPayload} />\n                }\n\n                {\n                    !this.state.isIntPayload &&\n                    < Dropdown className=\"change-payload-item\" placeholder='Select Global String Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedStringPayload: data.value });\n                        }} floating selection options={this.state.stringPayloadOptions} value={this.state.selectedStringPayload} />\n                }\n\n                <Input className=\"change-payload-item\" placeholder='New Payload' onChange={\n                    (event, data) => {\n                        this.setState({ newPayload: data.value });\n                    }} value={this.state.newPayload} />\n\n                <div>\n                    <button className=\"change-payload-item\" type=\"button\" onClick={this.changePayload.bind(this)}>Change Payload</button>\n                </div>\n            </div>\n        );\n    }\n}\nexport default ChangeGlobalPayloadComponent"]},"metadata":{},"sourceType":"module"}