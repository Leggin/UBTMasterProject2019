{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/CollaboratorsComponent.js\";\nimport React from \"react\";\nimport { Dropdown } from 'semantic-ui-react';\nimport './CollaboratorsComponent.css';\n\nvar CollaboratorsComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CollaboratorsComponent, _React$Component);\n\n  function CollaboratorsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CollaboratorsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollaboratorsComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      collaborator: null,\n      chosenAccount: null\n    };\n\n    _this.setValue = function (value) {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.addCollaborator.cacheSend(_this.state.collaborator, \"HARTCODE\", {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.setValue = _this.setValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CollaboratorsComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getCollaborators.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"getAccountsDropdownObject\",\n    value: function getAccountsDropdownObject() {\n      var accountOject = [];\n      var drizzleAccounts = this.props.drizzleState.accounts;\n\n      for (var acc in drizzleAccounts) {\n        accountOject.push({\n          key: drizzleAccounts[acc],\n          text: acc + \":\\t\" + drizzleAccounts[acc],\n          value: drizzleAccounts[acc]\n        });\n      }\n\n      return accountOject;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = this.getAccountsDropdownObject();\n      return React.createElement(\"div\", {\n        className: \"add-collaborater-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"collaborator-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Account\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            collaborator: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: options,\n        value: this.state.collaborator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.setValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Add Collborator\"));\n    }\n  }]);\n\n  return CollaboratorsComponent;\n}(React.Component);\n\nexport default CollaboratorsComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/CollaboratorsComponent.js"],"names":["React","Dropdown","CollaboratorsComponent","props","state","stackId","collaborator","chosenAccount","setValue","value","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","methods","addCollaborator","cacheSend","from","accounts","gas","setState","bind","dataKey","getCollaborators","cacheCall","accountOject","drizzleAccounts","acc","push","key","text","options","getAccountsDropdownObject","event","data","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAO,8BAAP;;IAEMC,sB;;;;;AAOF,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gGAAMA,KAAN;AADe,UANnBC,KAMmB,GANX;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,YAAY,EAAE,IAFV;AAGJC,MAAAA,aAAa,EAAE;AAHX,KAMW;;AAAA,UAKnBC,QALmB,GAKR,UAAAC,KAAK,EAAI;AAAA,wBACkB,MAAKN,KADvB;AAAA,UACRO,OADQ,eACRA,OADQ;AAAA,UACCC,YADD,eACCA,YADD;AAEhB,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFgB,CAGhB;;AAEA,UAAMT,OAAO,GAAGO,QAAQ,CAACG,OAAT,CAAiBC,eAAjB,CAAiCC,SAAjC,CAA2C,MAAKb,KAAL,CAAWE,YAAtD,EAAoE,UAApE,EAAgF;AAC5FY,QAAAA,IAAI,EAAEP,YAAY,CAACQ,QAAb,CAAsB,CAAtB,CADsF;AAE5FC,QAAAA,GAAG,EAAE;AAFuF,OAAhF,CAAhB,CALgB,CAUhB;;AACA,YAAKC,QAAL,CAAc;AAAEhB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH,KAjBkB;;AAEf,UAAKG,QAAL,GAAgB,MAAKA,QAAL,CAAcc,IAAd,uDAAhB;AAFe;AAGlB;;;;wCAgBmB;AAAA,UACRZ,OADQ,GACI,KAAKP,KADT,CACRO,OADQ;AAEhB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFgB,CAIhB;;AACA,UAAMS,OAAO,GAAGX,QAAQ,CAACG,OAAT,CAAiBS,gBAAjB,CAAkCC,SAAlC,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKJ,QAAL,CAAc;AAAEE,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;gDAE2B;AACxB,UAAIG,YAAY,GAAG,EAAnB;AACA,UAAIC,eAAe,GAAG,KAAKxB,KAAL,CAAWQ,YAAX,CAAwBQ,QAA9C;;AACA,WAAK,IAAIS,GAAT,IAAgBD,eAAhB,EAAiC;AAC7BD,QAAAA,YAAY,CAACG,IAAb,CAAkB;AAAEC,UAAAA,GAAG,EAAEH,eAAe,CAACC,GAAD,CAAtB;AAA6BG,UAAAA,IAAI,EAAEH,GAAG,GAAG,KAAN,GAAcD,eAAe,CAACC,GAAD,CAAhE;AAAuEnB,UAAAA,KAAK,EAAEkB,eAAe,CAACC,GAAD;AAA7F,SAAlB;AACH;;AACD,aAAOF,YAAP;AACH;;;6BAEQ;AAAA;;AACL,UAAIM,OAAO,GAAG,KAAKC,yBAAL,EAAd;AACA,aACI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,WAAW,EAAC,SAAtB;AAAgC,QAAA,QAAQ,EACpC,kBAACC,KAAD,EAAQC,IAAR,EAAiB;AACb,UAAA,MAAI,CAACd,QAAL,CAAc;AAAEf,YAAAA,YAAY,EAAE6B,IAAI,CAAC1B;AAArB,WAAd;AACH,SAHL;AAIE,QAAA,KAAK,MAJP;AAIQ,QAAA,SAAS,MAJjB;AAIkB,QAAA,OAAO,EAAEuB,OAJ3B;AAIoC,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWE,YAJtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAQI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKE,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BARJ,CADJ;AAcH;;;;EA/DgCR,KAAK,CAACoC,S;;AAkE3C,eAAelC,sBAAf","sourcesContent":["import React from \"react\";\nimport { Dropdown } from 'semantic-ui-react'\nimport './CollaboratorsComponent.css';\n\nclass CollaboratorsComponent extends React.Component {\n    state = {\n        stackId: null,\n        collaborator: null,\n        chosenAccount: null,\n    };\n\n    constructor(props) {\n        super(props);\n        this.setValue = this.setValue.bind(this);\n    }\n\n    setValue = value => {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        // let drizzle know we want to call the `set` method with `value`\n\n        const stackId = contract.methods.addCollaborator.cacheSend(this.state.collaborator, \"HARTCODE\", {\n            from: drizzleState.accounts[0],\n            gas: 600000\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getCollaborators.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    getAccountsDropdownObject() {\n        let accountOject = [];\n        let drizzleAccounts = this.props.drizzleState.accounts;\n        for (let acc in drizzleAccounts) {\n            accountOject.push({ key: drizzleAccounts[acc], text: acc + \":\\t\" + drizzleAccounts[acc], value: drizzleAccounts[acc] })\n        }\n        return accountOject;\n    }\n\n    render() {\n        let options = this.getAccountsDropdownObject();\n        return (\n            <div className=\"add-collaborater-container\">\n                <div className=\"collaborator-input\">\n                    <Dropdown placeholder='Account' onChange={\n                        (event, data) => {\n                            this.setState({ collaborator: data.value });\n                        }\n                    } fluid selection options={options} value={this.state.collaborator} />\n                </div>\n                <button type=\"button\" onClick={this.setValue}>\n                    Add Collborator\n                 </button>\n            </div>\n        );\n    }\n}\n\nexport default CollaboratorsComponent;"]},"metadata":{},"sourceType":"module"}