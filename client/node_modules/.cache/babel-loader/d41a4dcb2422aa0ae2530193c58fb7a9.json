{"ast":null,"code":"import _defineProperty from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTaskComponent.js\";\nimport React from \"react\";\nimport './CreateTaskComponent.css';\nimport { Dropdown, Input, Button } from 'semantic-ui-react';\nimport * as c from './Constants.js';\n\nvar CreateTaskComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CreateTaskComponent, _React$Component);\n\n  function CreateTaskComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CreateTaskComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateTaskComponent).call(this, props));\n\n    _this.handleCreateTask = function () {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.createTask.cacheSend(_this.state.activity, _this.state.address, _this.state.taskType, _this.state.requirements, {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.state = {\n      stackId: null,\n      activity: '',\n      address: '',\n      taskType: '',\n      requirements: [],\n      dataKey: null,\n      tasks: null,\n      reqoptions: []\n    };\n    _this.taskTypes = c.TASKTYPES;\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleRequirements = _this.handleRequirements.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTasktypes = _this.handleTasktypes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCreateTask = _this.handleCreateTask.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CreateTaskComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      var dataKey = contract.methods.getTasks.cacheCall();\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(tasksObject) {\n      var optionlist = [];\n\n      if (tasksObject) {\n        for (var i = 0; i < tasksObject.value.length; i++) {\n          var option = {\n            key: Number(tasksObject.value[i]),\n            text: tasksObject.value[i],\n            value: Number(tasksObject.value[i])\n          };\n          optionlist.push(option);\n        }\n      }\n\n      return optionlist;\n    }\n  }, {\n    key: \"handleRequirements\",\n    value: function handleRequirements(event, data) {\n      this.setState({\n        requirements: data.value\n      });\n    }\n  }, {\n    key: \"handleTasktypes\",\n    value: function handleTasktypes(event, data) {\n      this.setState({\n        taskType: data.value\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"handleActivity\",\n    value: function handleActivity(event, data) {\n      this.setState({\n        activity: data.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var ContractCollaborationManager = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n      var newOptions = this.updateOptions(tasksObject);\n      return React.createElement(\"form\", {\n        className: \"add-task-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Input, {\n        fluid: true,\n        icon: \"clipboard outline\",\n        placeholder: \"Activity\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            activity: data.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Input, {\n        fluid: true,\n        icon: \"address book outline\",\n        placeholder: \"Address\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            address: data.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"TaskType\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            taskType: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: this.taskTypes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"add-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Requirements\",\n        onChange: this.handleRequirements,\n        fluid: true,\n        multiple: true,\n        selection: true,\n        options: newOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Create Task\"));\n    }\n  }]);\n\n  return CreateTaskComponent;\n}(React.Component);\n\nexport default CreateTask;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/CreateTaskComponent.js"],"names":["React","Dropdown","Input","Button","c","CreateTaskComponent","props","handleCreateTask","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","stackId","methods","createTask","cacheSend","state","activity","address","taskType","requirements","from","accounts","gas","setState","dataKey","tasks","reqoptions","taskTypes","TASKTYPES","handleChange","bind","handleRequirements","handleTasktypes","getTasks","cacheCall","tasksObject","optionlist","i","value","length","option","key","Number","text","push","event","data","evt","target","name","newOptions","updateOptions","Component","CreateTask"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './CreateTaskComponent.css';\nimport { Dropdown, Input, Button } from 'semantic-ui-react'\nimport * as c from './Constants.js'\nclass CreateTaskComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            activity: '',\n            address: '',\n            taskType: '',\n            requirements: [],\n            dataKey: null,\n            tasks: null,\n            reqoptions: []\n        }\n        this.taskTypes = c.TASKTYPES;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleRequirements = this.handleRequirements.bind(this);\n        this.handleTasktypes = this.handleTasktypes.bind(this);\n        this.handleCreateTask = this.handleCreateTask.bind(this);\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        const dataKey = contract.methods.getTasks.cacheCall();\n        this.setState({ dataKey });\n    }\n\n    updateOptions(tasksObject) {\n        const optionlist = []\n        if (tasksObject) {\n            for (var i = 0; i < tasksObject.value.length; i++) {\n                let option = { key: Number(tasksObject.value[i]), text: tasksObject.value[i], value: Number(tasksObject.value[i]) }\n                optionlist.push(option)\n            }\n        }\n\n        return optionlist;\n    }\n    handleRequirements(event, data) {\n        this.setState({ requirements: data.value });\n    }\n    handleTasktypes(event, data) {\n        this.setState({ taskType: data.value });\n    }\n    handleChange(evt) {\n        this.setState({ [evt.target.name]: evt.target.value });\n    }\n    handleActivity(event, data) {\n        this.setState({ activity: data.value });\n    }\n\n    handleCreateTask = () => {\n\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to call the `set` method with `value`\n        const stackId = contract.methods.createTask.cacheSend(this.state.activity,\n            this.state.address, this.state.taskType, this.state.requirements, {\n                from: drizzleState.accounts[0],\n                gas: 600000\n            });\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    render() {\n        const { ContractCollaborationManager } = this.props.drizzleState.contracts;\n        const tasksObject = ContractCollaborationManager.getTasks[this.state.dataKey];\n        const newOptions = this.updateOptions(tasksObject);\n\n        return (\n            <form className=\"add-task-form\">\n                <label className=\"add-task-label\">\n                    <Input fluid icon='clipboard outline' placeholder='Activity' onChange={\n                        (event, data) => {\n                            this.setState({ activity: data.value });\n                        }} />\n                </label>\n                <label className=\"add-task-label\">\n                    <Input fluid icon='address book outline' placeholder='Address' onChange={\n                        (event, data) => {\n                            this.setState({ address: data.value });\n                        }} />\n                </label>\n                <label className=\"add-task-label\">\n\n                    <Dropdown placeholder='TaskType' onChange={\n                        (event, data) => {\n                            this.setState({ taskType: data.value });\n                        }} fluid selection options={this.taskTypes} />\n                </label>\n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={this.handleRequirements} fluid multiple selection options={newOptions} />\n                </label>\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Create Task\n                 </button>\n            </form>\n        );\n    }\n}\n\nexport default CreateTask;\n"]},"metadata":{},"sourceType":"module"}