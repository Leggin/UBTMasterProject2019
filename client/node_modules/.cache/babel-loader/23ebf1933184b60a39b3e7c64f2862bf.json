{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js\";\nimport React from \"react\";\nimport { Table } from 'semantic-ui-react';\nimport * as c from './Constants.js';\n\nvar TaskTableComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskTableComponent, _React$Component);\n\n  function TaskTableComponent(props) {\n    var _this;\n\n    _classCallCheck(this, TaskTableComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskTableComponent).call(this, props));\n    _this.state = {\n      getTasksDataKey: null,\n      tasksData: [],\n      getTaskByIdDataKeys: []\n    };\n    _this.first = true;\n    return _this;\n  }\n\n  _createClass(TaskTableComponent, [{\n    key: \"getTaskEnumById\",\n    value: function getTaskEnumById(id) {\n      var res;\n      c.TASKTYPES.forEach(function (taskType) {\n        if (taskType.value === id) {\n          res = taskType.text;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"formatTaskRequirements\",\n    value: function formatTaskRequirements(reqs) {\n      var reqString = \"\";\n      reqs.forEach(function (req) {\n        reqString += req + \", \";\n      });\n      return reqString.slice(0, reqString.length - 2);\n    }\n  }, {\n    key: \"formatTaskStatus\",\n    value: function formatTaskStatus(status) {\n      if (status) {\n        return \"Completed\";\n      }\n\n      return \"Not Completed\";\n    }\n  }, {\n    key: \"createTableContent\",\n    value: function createTableContent(tasksObject) {\n      var cells = [];\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n      if (tasksObject) {\n        var taskIds = tasksObject.value;\n\n        for (var index = 0; index < taskIds.length; index++) {\n          var _tasksObject = ccmState.getTaskById[this.state.getTaskByIdDataKeys[index]];\n\n          if (_tasksObject) {\n            cells.push(React.createElement(Table.Row, {\n              key: taskIds[index],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53\n              },\n              __self: this\n            }, React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54\n              },\n              __self: this\n            }, taskIds[index]), React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55\n              },\n              __self: this\n            }, _tasksObject.value.description), React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 56\n              },\n              __self: this\n            }, this.getTaskEnumById(_tasksObject.value.tasktype)), React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57\n              },\n              __self: this\n            }, _tasksObject.value.stateowner), React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58\n              },\n              __self: this\n            }, this.formatTaskRequirements(_tasksObject.value.requirements)), React.createElement(Table.Cell, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59\n              },\n              __self: this\n            }, this.formatTaskStatus(_tasksObject.value.status))));\n          }\n        }\n      }\n\n      return cells;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33];\n      var getTaskByIdDataKeys = [];\n      ids.forEach(function (id) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n      });\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n      var newCells = this.createTableContent(tasksObject);\n      return React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Task Id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Type\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Owner\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Requirements\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, newCells));\n    }\n  }]);\n\n  return TaskTableComponent;\n}(React.Component);\n\nexport default TaskTableComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/TaskTableComponent.js"],"names":["React","Table","c","TaskTableComponent","props","state","getTasksDataKey","tasksData","getTaskByIdDataKeys","first","id","res","TASKTYPES","forEach","taskType","value","text","reqs","reqString","req","slice","length","status","tasksObject","cells","ccmState","drizzleState","contracts","ContractCollaborationManager","taskIds","index","getTaskById","push","description","getTaskEnumById","tasktype","stateowner","formatTaskRequirements","requirements","formatTaskStatus","contract","drizzle","methods","getTasks","cacheCall","ids","setState","newCells","createTableContent","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from 'semantic-ui-react'\nimport * as c from './Constants.js'\n\nclass TaskTableComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            getTasksDataKey: null,\n            tasksData: [],\n            getTaskByIdDataKeys: []\n        }\n        this.first = true;\n    }\n\n    getTaskEnumById(id) {\n        let res;\n        c.TASKTYPES.forEach(taskType => {\n            if (taskType.value === id) {\n                res = taskType.text;\n            }\n        });\n        return res;\n    }\n\n    formatTaskRequirements(reqs) {\n        let reqString = \"\";\n        reqs.forEach(req => {\n            reqString += req + \", \"\n        });\n        return reqString.slice(0, reqString.length - 2)\n    }\n\n    formatTaskStatus(status) {\n        if (status) {\n            return \"Completed\"\n        }\n        return \"Not Completed\"\n    }\n\n    createTableContent(tasksObject) {\n        const cells = []\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        if (tasksObject) {\n            const taskIds = tasksObject.value;\n\n            for (let index = 0; index < taskIds.length; index++) {\n                const tasksObject = ccmState.getTaskById[this.state.getTaskByIdDataKeys[index]];\n                if (tasksObject) {\n\n                    cells.push(<Table.Row key={taskIds[index]}>\n                        <Table.Cell>{taskIds[index]}</Table.Cell>\n                        <Table.Cell>{tasksObject.value.description}</Table.Cell>\n                        <Table.Cell>{this.getTaskEnumById(tasksObject.value.tasktype)}</Table.Cell>\n                        <Table.Cell>{tasksObject.value.stateowner}</Table.Cell>\n                        <Table.Cell>{this.formatTaskRequirements(tasksObject.value.requirements)}</Table.Cell>\n                        <Table.Cell>{this.formatTaskStatus(tasksObject.value.status)}</Table.Cell>\n\n\n                    </Table.Row>);\n                }\n            }\n        }\n        return (cells);\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n\n        let ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,]\n        const getTaskByIdDataKeys = []\n        ids.forEach(id => {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(id));\n        });\n\n\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys });\n    }\n\n\n    render() {\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        const tasksObject = ccmState.getTasks[this.state.getTasksDataKey];\n\n        const newCells = this.createTableContent(tasksObject);\n\n        return (\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Task Id</Table.HeaderCell>\n                        <Table.HeaderCell>Description</Table.HeaderCell>\n                        <Table.HeaderCell>Type</Table.HeaderCell>\n                        <Table.HeaderCell>Owner</Table.HeaderCell>\n                        <Table.HeaderCell>Requirements</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n\n\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n\n                    {newCells}\n\n                </Table.Body>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTableComponent;\n"]},"metadata":{},"sourceType":"module"}