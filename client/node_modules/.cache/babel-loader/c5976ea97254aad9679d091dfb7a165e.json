{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\"\n    };\n    _this.decisionTypes = c.DECISIONTYPES;\n    _this.operator = c.OPERATORS;\n    _this.gatewayTypes = c.GATEWAYTPYES;\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n      var stringPayloadCountKey = contract.methods.getGlobalStringPayloadCount.cacheCall();\n      console.log(\"IntPAyload COtnasdfefadf\", intPayloadCountKey);\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(taskCount.value) : 150;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setIntegerPayloadKeys(contract);\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys,\n        intPayloadCountKey: intPayloadCountKey,\n        stringPayloadCountKey: stringPayloadCountKey,\n        stringPayloadKeys: this.getStringPayloadKeys(contract, ccmState, stringPayloadCountKey)\n      });\n    }\n  }, {\n    key: \"setIntegerPayloadKeys\",\n    value: function setIntegerPayloadKeys(contract) {\n      var _this2 = this;\n\n      contract.methods.getGlobalIntegerPayloadCount().call().then(function (count) {\n        var intPayloadKeys = [];\n\n        for (var i = 0; i < count; i++) {\n          intPayloadKeys.push(contract.methods.getGlobalIntPayloadValueById.cacheCall(i));\n        }\n\n        console.log(\"IntPayloadKeys\", intPayloadKeys);\n\n        _this2.setState({\n          intPayloadKeys: intPayloadKeys\n        });\n      });\n    }\n  }, {\n    key: \"getStringPayloadKeys\",\n    value: function getStringPayloadKeys(contract, ccmState, countKey) {\n      var stringPayloadKeys = [];\n      var count = ccmState.getGlobalStringPayloadCount[countKey];\n      count = count ? count.value : 5;\n\n      for (var i = 0; i < count; i++) {\n        stringPayloadKeys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n      }\n\n      return stringPayloadKeys;\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n      var options = [];\n      tasks.forEach(function (task) {\n        options.push({\n          key: task.id,\n          value: task.id,\n          text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n        });\n      });\n      return options;\n    }\n  }, {\n    key: \"setIntpayloads\",\n    value: function setIntpayloads() {\n      var _this3 = this;\n\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      this.setState({\n        intPayloads: []\n      });\n\n      var _loop = function _loop(i) {\n        contract.methods.getGlobalIntPayloadValueById(i).call().then(function (payload) {\n          _this3.setState({\n            intPayloads: _this3.state.intPayloads.push({\n              payload: payload,\n              id: i\n            })\n          });\n        });\n      };\n\n      for (var i = 0; i < this.state.intPayloadKeys.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"getIntPayloadDropdownOptions\",\n    value: function getIntPayloadDropdownOptions() {// const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      // const count = ccmState.getGlobalIntegerPayloadCount[this.state.intPayloadCountKey];\n      // const payloads = [];\n      // if (count) {\n      //     console.log(\"PARTY\", count);\n      //     for (let i = 0; i < count.value - 1; i++) {\n      //         let payload = ccmState.getGlobalIntPayloadValueById[this.state.intPayloadKeys[i]];\n      //         if (payload) {\n      //             payloads.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n      //         }\n      //     }\n      // }\n      // return payloads;\n    }\n  }, {\n    key: \"getStringPayloadDropdownOptions\",\n    value: function getStringPayloadDropdownOptions() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      var intPayloadOptions = this.getIntPayloadDropdownOptions();\n      console.log(intPayloadOptions); //let stringPayloadOptions = this.getStringPayloadDropdownOptions();\n\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this4.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this4.setState({\n            selectedPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: intPayloadOptions,\n        value: this.state.selectedPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Add Decision\"));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","decisionTypes","DECISIONTYPES","operator","OPERATORS","gatewayTypes","GATEWAYTPYES","contract","drizzle","contracts","ContractCollaborationManager","methods","getTasks","cacheCall","intPayloadCountKey","getGlobalIntegerPayloadCount","stringPayloadCountKey","getGlobalStringPayloadCount","console","log","getTaskCountKey","getTaskCount","ccmState","drizzleState","taskCount","Number","value","i","push","getTaskById","setIntegerPayloadKeys","setState","stringPayloadKeys","getStringPayloadKeys","call","then","count","intPayloadKeys","getGlobalIntPayloadValueById","countKey","getGlobalStringPayloadValueById","tasks","getAllTasks","options","forEach","task","key","id","text","description","intPayloads","payload","length","taskOptions","getTaskDropdownOptions","intPayloadOptions","getIntPayloadDropdownOptions","event","data","selectedPayload","handleCreateTask","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\"\n        }\n        this.decisionTypes = c.DECISIONTYPES;\n        this.operator = c.OPERATORS;\n        this.gatewayTypes = c.GATEWAYTPYES\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const intPayloadCountKey = contract.methods.getGlobalIntegerPayloadCount.cacheCall();\n        const stringPayloadCountKey = contract.methods.getGlobalStringPayloadCount.cacheCall();\n        console.log(\"IntPAyload COtnasdfefadf\", intPayloadCountKey);\n\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(taskCount.value) : 150;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setIntegerPayloadKeys(contract);\n        this.setState({\n            getTasksDataKey,\n            getTaskByIdDataKeys,\n            intPayloadCountKey,\n            stringPayloadCountKey,\n            stringPayloadKeys: this.getStringPayloadKeys(contract, ccmState, stringPayloadCountKey)\n        });\n    }\n\n    setIntegerPayloadKeys(contract) {\n        contract.methods.getGlobalIntegerPayloadCount().call().then((count) => {\n            let intPayloadKeys = [];\n            for (let i = 0; i < count; i++) {\n                intPayloadKeys.push(contract.methods.getGlobalIntPayloadValueById.cacheCall(i));\n            }\n            console.log(\"IntPayloadKeys\", intPayloadKeys);\n\n            this.setState({ intPayloadKeys });\n        });\n\n    }\n\n    getStringPayloadKeys(contract, ccmState, countKey) {\n        let stringPayloadKeys = [];\n        let count = ccmState.getGlobalStringPayloadCount[countKey];\n        count = (count) ? count.value : 5;\n        for (let i = 0; i < count; i++) {\n            stringPayloadKeys.push(contract.methods.getGlobalStringPayloadValueById.cacheCall(i));\n        }\n\n        return stringPayloadKeys;\n    }\n\n    getTaskDropdownOptions() {\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        let options = [];\n\n        tasks.forEach(task => {\n            options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n        });\n        return options;\n    }\n\n\n    setIntpayloads() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        this.setState({ intPayloads: [] });\n        for (let i = 0; i < this.state.intPayloadKeys.length; i++) {\n            contract.methods.getGlobalIntPayloadValueById(i).call().then((payload) => {\n                this.setState({ intPayloads: this.state.intPayloads.push({ payload, id: i }) })\n            });\n\n        }\n\n    }\n\n    getIntPayloadDropdownOptions() {\n\n\n\n        // const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n        // const count = ccmState.getGlobalIntegerPayloadCount[this.state.intPayloadCountKey];\n\n        // const payloads = [];\n        // if (count) {\n\n        //     console.log(\"PARTY\", count);\n\n        //     for (let i = 0; i < count.value - 1; i++) {\n\n        //         let payload = ccmState.getGlobalIntPayloadValueById[this.state.intPayloadKeys[i]];\n        //         if (payload) {\n        //             payloads.push({ key: i, value: payload.value, text: `ID: ${i} | Payload: ${payload.value}` });\n        //         }\n        //     }\n        // }\n\n        // return payloads;\n    }\n    getStringPayloadDropdownOptions() {\n    }\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n        let intPayloadOptions = this.getIntPayloadDropdownOptions();\n        console.log(intPayloadOptions);\n\n        //let stringPayloadOptions = this.getStringPayloadDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedPayload: data.value });\n                        }} fluid selection options={intPayloadOptions} value={this.state.selectedPayload} />\n                </label>\n                {/* \n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label> */}\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}