{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/CompleteTaskComponent.js\";\nimport React from \"react\";\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar CompleteTaskComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CompleteTaskComponent, _React$Component);\n\n  function CompleteTaskComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CompleteTaskComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompleteTaskComponent).call(this, props));\n    _this.state = {\n      stackId: null,\n      dataKey: null,\n      taskToCompleteId: null,\n      getTaskByIdDataKeys: null,\n      getTasksDataKey: null\n    };\n    return _this;\n  }\n\n  _createClass(CompleteTaskComponent, [{\n    key: \"completeTask\",\n    value: function completeTask() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.setTaskOnCompleted.cacheSend(this.state.taskToCompleteId, {\n        from: this.props.defaultAccount,\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId: stackId\n      });\n    }\n  }, {\n    key: \"getTasks\",\n    value: function getTasks() {\n      var unfullfilledtasks = [];\n      var tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n\n      for (var task in tasks) {\n        if (!tasks[task].status) {\n          unfullfilledtasks.push({\n            key: task,\n            text: task + \":\\t\" + tasks[task].description,\n            value: task\n          });\n        }\n      }\n\n      return unfullfilledtasks;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var contract = this.props.drizzle.contracts.ContractCollaborationManager;\n      var getTasksDataKey = contract.methods.getTasks.cacheCall();\n      var getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n      var ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n      var taskCount = ccmState.getTaskCount[getTaskCountKey];\n      taskCount = taskCount ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n      var getTaskByIdDataKeys = [];\n\n      for (var i = 0; i <= taskCount; i++) {\n        getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n      }\n\n      this.setState({\n        getTasksDataKey: getTasksDataKey,\n        getTaskByIdDataKeys: getTaskByIdDataKeys\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = this.getTasks();\n      return React.createElement(\"div\", {\n        className: \"complete-task-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"collaborator-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Task Id\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            taskToCompleteId: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.completeTask.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Complete Task\"));\n    }\n  }]);\n\n  return CompleteTaskComponent;\n}(React.Component);\n\nexport default CompleteTaskComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/CompleteTaskComponent.js"],"names":["React","Dropdown","Tasks","CompleteTaskComponent","props","state","stackId","dataKey","taskToCompleteId","getTaskByIdDataKeys","getTasksDataKey","drizzle","contract","contracts","ContractCollaborationManager","methods","setTaskOnCompleted","cacheSend","from","defaultAccount","gas","setState","unfullfilledtasks","tasks","getAllTasks","drizzleState","task","status","push","key","text","description","value","getTasks","cacheCall","getTaskCountKey","getTaskCount","ccmState","taskCount","Number","i","getTaskById","options","event","data","completeTask","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\";\nclass CompleteTaskComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stackId: null,\n            dataKey: null,\n            taskToCompleteId: null,\n            getTaskByIdDataKeys: null,\n            getTasksDataKey: null,\n        }\n\n    }\n\n    completeTask() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        // let drizzle know we want to call the `set` method with `value`\n        const stackId = contract.methods.setTaskOnCompleted.cacheSend(this.state.taskToCompleteId, {\n            from: this.props.defaultAccount,\n            gas: 600000\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    getTasks() {\n        let unfullfilledtasks = []\n        let tasks = Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        for (let task in tasks) {\n            if (!tasks[task].status) {\n                unfullfilledtasks.push({ key: task, text: task + \":\\t\" + tasks[task].description, value: task })\n            }\n        }\n        return unfullfilledtasks;\n    }\n\n    componentDidMount() {\n        const contract = this.props.drizzle.contracts.ContractCollaborationManager;\n        const getTasksDataKey = contract.methods.getTasks.cacheCall();\n        const getTaskCountKey = contract.methods.getTaskCount.cacheCall();\n        const ccmState = this.props.drizzleState.contracts.ContractCollaborationManager;\n\n        let taskCount = ccmState.getTaskCount[getTaskCountKey];\n        taskCount = (taskCount) ? Number(ccmState.getTaskCount[getTaskCountKey].value) : taskCount;\n        const getTaskByIdDataKeys = [];\n\n        for (let i = 0; i <= taskCount; i++) {\n            getTaskByIdDataKeys.push(contract.methods.getTaskById.cacheCall(i));\n        }\n        this.setState({ getTasksDataKey, getTaskByIdDataKeys });\n    }\n\n    render() {\n        let options = this.getTasks();\n        return (\n            <div className=\"complete-task-input\">\n                <div className=\"collaborator-input\">\n                    <Dropdown placeholder='Task Id' onChange={\n                        (event, data) => {\n                            this.setState({ taskToCompleteId: data.value });\n                        }\n                    } fluid selection options={options} />\n                </div>\n                <button type=\"button\" onClick={this.completeTask.bind(this)}>Complete Task</button>\n            </div>\n        );\n    }\n}\n\nexport default CompleteTaskComponent;"]},"metadata":{},"sourceType":"module"}