{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js\";\nimport React from \"react\";\nimport * as c from './Constants.js';\nimport { Dropdown } from 'semantic-ui-react';\nimport Tasks from \"./Tasks\";\n\nvar AddDecisionComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddDecisionComponent, _React$Component);\n\n  function AddDecisionComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDecisionComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDecisionComponent).call(this, props));\n    _this.state = {\n      selectedTask: null,\n      getTasksDataKey: \"\",\n      getTaskByIdDataKeys: \"\",\n      getPayloadsDataKey: \"\",\n      getIntPayloadCountKey: \"\",\n      getStringPayloadCountKey: \"\"\n    };\n    _this.decisionTypes = c.DECISIONTYPES;\n    _this.operator = c.OPERATORS;\n    _this.gatewayTypes = c.GATEWAYTPYES;\n    _this.Tasks = null;\n    return _this;\n  }\n\n  _createClass(AddDecisionComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.Tasks = new Tasks(this.props.drizzleState, this.props.drizzle);\n    }\n  }, {\n    key: \"getTaskDropdownOptions\",\n    value: function getTaskDropdownOptions() {\n      var options = [];\n\n      if (this.Tasks) {\n        var tasks = this.Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n        tasks.forEach(function (task) {\n          options.push({\n            key: task.id,\n            value: task.id,\n            text: \"ID: \".concat(task.id, \" | Description: \").concat(task.description)\n          });\n        });\n      }\n\n      return options;\n    }\n  }, {\n    key: \"getIntPayloadDropdownOptions\",\n    value: function getIntPayloadDropdownOptions() {\n      var ccmState = drizzleState.contracts.ContractCollaborationManager;\n      var count = ccmState.getGlobalIntegerPayloadCount[getIntPayloadCountKey];\n      var payloads = [];\n\n      for (var i = 0; i < count; i++) {\n        payloads.push();\n      }\n    }\n  }, {\n    key: \"getIntPayloadDropdownOptions\",\n    value: function getIntPayloadDropdownOptions() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var taskOptions = this.getTaskDropdownOptions();\n      var intPayloadOptions = this.getIntPayloadDropdownOptions();\n      var stringPayloadOptions = this.getStringPayloadDropdownOptions();\n      return React.createElement(\"form\", {\n        className: \"add-decision-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"select-task-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Task\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            selectedTask: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: taskOptions,\n        value: this.state.selectedTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"select-payload-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        placeholder: \"Select Global Payload\",\n        onChange: function onChange(event, data) {\n          _this2.setState({\n            selectedPayload: data.value\n          });\n        },\n        fluid: true,\n        selection: true,\n        options: payloadOptions,\n        value: this.state.selectedPayload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.handleCreateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Add Decision\"));\n    }\n  }]);\n\n  return AddDecisionComponent;\n}(React.Component);\n\nexport default AddDecisionComponent;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/AddDecisionComponent.js"],"names":["React","c","Dropdown","Tasks","AddDecisionComponent","props","state","selectedTask","getTasksDataKey","getTaskByIdDataKeys","getPayloadsDataKey","getIntPayloadCountKey","getStringPayloadCountKey","decisionTypes","DECISIONTYPES","operator","OPERATORS","gatewayTypes","GATEWAYTPYES","drizzleState","drizzle","options","tasks","getAllTasks","forEach","task","push","key","id","value","text","description","ccmState","contracts","ContractCollaborationManager","count","getGlobalIntegerPayloadCount","payloads","i","taskOptions","getTaskDropdownOptions","intPayloadOptions","getIntPayloadDropdownOptions","stringPayloadOptions","getStringPayloadDropdownOptions","event","data","setState","selectedPayload","payloadOptions","handleCreateTask","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as c from './Constants.js'\nimport { Dropdown } from 'semantic-ui-react'\nimport Tasks from \"./Tasks\"\n\n\nclass AddDecisionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTask: null,\n            getTasksDataKey: \"\",\n            getTaskByIdDataKeys: \"\",\n            getPayloadsDataKey: \"\",\n            getIntPayloadCountKey: \"\",\n            getStringPayloadCountKey: \"\"\n        }\n        this.decisionTypes = c.DECISIONTYPES;\n        this.operator = c.OPERATORS;\n        this.gatewayTypes = c.GATEWAYTPYES;\n        this.Tasks = null;\n    }\n\n    componentDidMount() {\n        this.Tasks = new Tasks(this.props.drizzleState, this.props.drizzle);\n    }\n\n    getTaskDropdownOptions() {\n        let options = [];\n\n        if (this.Tasks) {\n            let tasks = this.Tasks.getAllTasks(this.props.drizzleState, this.state.getTaskByIdDataKeys, this.state.getTasksDataKey);\n\n            tasks.forEach(task => {\n                options.push({ key: task.id, value: task.id, text: `ID: ${task.id} | Description: ${task.description}` });\n            });\n        }\n        return options;\n    }\n\n    getIntPayloadDropdownOptions() {\n        const ccmState = drizzleState.contracts.ContractCollaborationManager;\n        const count = ccmState.getGlobalIntegerPayloadCount[getIntPayloadCountKey];\n        const payloads = [];\n\n        for (let i = 0; i < count; i++) {\n            payloads.push();\n        }\n    }\n    getIntPayloadDropdownOptions() {\n    }\n\n    render() {\n        let taskOptions = this.getTaskDropdownOptions();\n        let intPayloadOptions = this.getIntPayloadDropdownOptions();\n        let stringPayloadOptions = this.getStringPayloadDropdownOptions();\n\n        return (\n            <form className=\"add-decision-form\" >\n                <label className=\"select-task-label\">\n                    <Dropdown placeholder='Select Task' onChange={\n                        (event, data) => {\n                            this.setState({ selectedTask: data.value });\n                        }\n                    } fluid selection options={taskOptions} value={this.state.selectedTask} />\n                </label>\n\n                <label className=\"select-payload-label\">\n                    <Dropdown placeholder='Select Global Payload' onChange={\n                        (event, data) => {\n                            this.setState({ selectedPayload: data.value });\n                        }} fluid selection options={payloadOptions} value={this.state.selectedPayload} />\n                </label>\n                {/* \n                <label className=\"add-task-label\">\n                    <Dropdown placeholder='Requirements' onChange={\n                        (event, data) => {\n                            this.setState({ requirements: data.value });\n                        }\n                    }\n                        fluid multiple selection options={newOptions} value={this.state.requirements} />\n                </label> */}\n                <button type=\"button\" onClick={this.handleCreateTask}>\n                    Add Decision\n                 </button>\n            </form >\n        );\n    }\n}\n\n\n\nexport default AddDecisionComponent;"]},"metadata":{},"sourceType":"module"}