{"ast":null,"code":"import _classCallCheck from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/nicolas/Dokumente/Github/drizzle_react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/nicolas/Dokumente/Github/drizzle_react/client/src/Collaborators.js\";\nimport React from \"react\";\nimport { Input, Dropdown } from 'semantic-ui-react';\nimport './Collaborator.css';\n\nvar Collaborators =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Collaborators, _React$Component);\n\n  function Collaborators(props) {\n    var _this;\n\n    _classCallCheck(this, Collaborators);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collaborators).call(this, props));\n    _this.state = {\n      stackId: null,\n      collaborator: null\n    };\n\n    _this.setValue = function (value) {\n      var _this$props = _this.props,\n          drizzle = _this$props.drizzle,\n          drizzleState = _this$props.drizzleState;\n      var contract = drizzle.contracts.ContractCollaborationManager;\n      console.log(_this.state.collaborator); // let drizzle know we want to call the `set` method with `value`\n\n      var stackId = contract.methods.addCollaborator.cacheSend(_this.state.collaborator, \"HARTCODE\", {\n        from: drizzleState.accounts[0],\n        gas: 600000\n      }); // save the `stackId` for later reference\n\n      _this.setState({\n        stackId: stackId\n      });\n    };\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setValue = _this.setValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Collaborators, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        collaborator: event.target.value\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var drizzle = this.props.drizzle;\n      var contract = drizzle.contracts.ContractCollaborationManager; // let drizzle know we want to watch the `myString` method\n\n      var dataKey = contract.methods.getCollaborators.cacheCall(); //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n      // save the `dataKey` to local component state for later reference\n\n      this.setState({\n        dataKey: dataKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"add-collaborater-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.setValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Add Collborator\"), React.createElement(Input, {\n        placeholder: \"Collaborator\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Collaborators;\n}(React.Component);\n\nexport default Collaborators;","map":{"version":3,"sources":["/home/nicolas/Dokumente/Github/drizzle_react/client/src/Collaborators.js"],"names":["React","Input","Dropdown","Collaborators","props","state","stackId","collaborator","setValue","value","drizzle","drizzleState","contract","contracts","ContractCollaborationManager","console","log","methods","addCollaborator","cacheSend","from","accounts","gas","setState","handleChange","bind","event","target","dataKey","getCollaborators","cacheCall","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,mBAAhC;AACA,OAAO,oBAAP;;IAEMC,a;;;;;AAMF,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;AADe,UALnBC,KAKmB,GALX;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,YAAY,EAAE;AAFV,KAKW;;AAAA,UAWnBC,QAXmB,GAWR,UAAAC,KAAK,EAAI;AAAA,wBACkB,MAAKL,KADvB;AAAA,UACRM,OADQ,eACRA,OADQ;AAAA,UACCC,YADD,eACCA,YADD;AAEhB,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKX,KAAL,CAAWE,YAAvB,EAHgB,CAIhB;;AAEA,UAAMD,OAAO,GAAGM,QAAQ,CAACK,OAAT,CAAiBC,eAAjB,CAAiCC,SAAjC,CAA2C,MAAKd,KAAL,CAAWE,YAAtD,EAAoE,UAApE,EAAgF;AAC5Fa,QAAAA,IAAI,EAAET,YAAY,CAACU,QAAb,CAAsB,CAAtB,CADsF;AAE5FC,QAAAA,GAAG,EAAE;AAFuF,OAAhF,CAAhB,CANgB,CAWhB;;AACA,YAAKC,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH,KAxBkB;;AAEf,UAAKkB,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKjB,QAAL,GAAgB,MAAKA,QAAL,CAAciB,IAAd,uDAAhB;AAHe;AAIlB;;;;iCAEYC,K,EAAO;AAChB,WAAKH,QAAL,CAAc;AAAEhB,QAAAA,YAAY,EAAEmB,KAAK,CAACC,MAAN,CAAalB;AAA7B,OAAd;AACH;;;wCAkBmB;AAAA,UACRC,OADQ,GACI,KAAKN,KADT,CACRM,OADQ;AAEhB,UAAME,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,4BAAnC,CAFgB,CAIhB;;AACA,UAAMc,OAAO,GAAGhB,QAAQ,CAACK,OAAT,CAAiBY,gBAAjB,CAAkCC,SAAlC,EAAhB,CALgB,CAOhB;AACA;;AACA,WAAKP,QAAL,CAAc;AAAEK,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKpB,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAMI,oBAAC,KAAD;AAAO,QAAA,WAAW,EAAC,cAAnB;AAAkC,QAAA,QAAQ,EAAE,KAAKgB,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAUH;;;;EAvDuBxB,KAAK,CAAC+B,S;;AA0DlC,eAAe5B,aAAf","sourcesContent":["import React from \"react\";\nimport { Input, Dropdown } from 'semantic-ui-react'\nimport './Collaborator.css';\n\nclass Collaborators extends React.Component {\n    state = {\n        stackId: null,\n        collaborator: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.setValue = this.setValue.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ collaborator: event.target.value });\n    }\n\n\n    setValue = value => {\n        const { drizzle, drizzleState } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n        console.log(this.state.collaborator);\n        // let drizzle know we want to call the `set` method with `value`\n\n        const stackId = contract.methods.addCollaborator.cacheSend(this.state.collaborator, \"HARTCODE\", {\n            from: drizzleState.accounts[0],\n            gas: 600000\n        });\n\n        // save the `stackId` for later reference\n        this.setState({ stackId });\n    }\n\n    componentDidMount() {\n        const { drizzle } = this.props;\n        const contract = drizzle.contracts.ContractCollaborationManager;\n\n        // let drizzle know we want to watch the `myString` method\n        const dataKey = contract.methods.getCollaborators.cacheCall();\n\n        //const collaborators = contract.methods[\"collaboratorAddressArray\"].cacheCall();\n        // save the `dataKey` to local component state for later reference\n        this.setState({ dataKey });\n    }\n\n    render() {\n        return (\n            <div className=\"add-collaborater-container\">\n\n                <button type=\"button\" onClick={this.setValue}>\n                    Add Collborator\n                 </button>\n\n                <Input placeholder=\"Collaborator\" onChange={this.handleChange} />\n            </div>\n        );\n    }\n}\n\nexport default Collaborators;"]},"metadata":{},"sourceType":"module"}